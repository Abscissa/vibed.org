extends layout

block title
	- string title = "Diet templates";

block navigation
	ul
		li
			a(href="##introduction") Introduction
			
		li
			a(href="##basic-structure") Basic structure
			
		li
			a(href="##basic-structure") Content elements
			
			ul
				li
					a(href="##html-elements") HTML elements 
				li
					a(href="##plain-text") Plain text
				li
					a(href="##comments") Comments
		li
			a(href="##embedded-code") Embedded source code

			ul
				li
					a(href="##statements") Statements
				li
					a(href="##procedural-content") Procedural content
				li
					a(href="##string-interpolations") String interpolations

		li
			a(href="##extensions") Blocks and extensions
			
		li
			a(href="##filters") Filters

block body

	section
		a#introduction
		h2 Introduction
			
		p(style="color: red") Work-in-progress
		p(style="color: red") Please use the
			a(href="https://github.com/visionmedia/jade") Jade documentation
			| for any section that is not filled with content, Diet templates are kept as compatible as possible to Jade templates.

		p Diet templates are HTML templates which are statically compiled down to native D code. Dynamic pages thus have almost no runtime overhead and are often even faster than static pages on disk, because they are just written directly from RAM to the HTTP connection.
		
		p The syntax equals that of
			a(href="http://jade-lang.org") Jade
			| templates with the exception of some of the advanced syntax features. Since there is no official syntax reference written yet, you can use the
			a(href="https://github.com/visionmedia/jade") Jade documentation
			| as a replacement. The main difference is that you write D expressions and statements instead of JavaScript.
			
	section
		a#basic-structure
		h2 Basic structure
		
		:markdown
			The general structure uses indentation to manage nesting of HTML tags, similar to what Python does. The indentation style of a document is enforced to be consistent and can either be tabs or any number of spaces. The indentation style is inferred from the first line that is indented. Note that indentation levels may never be skipped, so that the first indented line must always be indented by exactly one tab stop.
			
			Right now, it is necessary to begin the document with an HTML 5 header. This restriction will be removed in the future.
			
		code
			pre !!! 5
				|html
				|	head
				|		title Hello, World
				|	body
				|		h1 Hello World
			.caption Example: A minimal HTML page
			
	section
		a#content-elements
		h2 Content elements
		
		section
			a#html-elements
			h3 HTML elements
			
			p The most basic elements are HTML tags. Every element that does not have a special meaning and begins with a letter and contains only letters, numbers, colons, dashes or underscores is treated as an HTML tag. Tags with no content such as <br> or <link> are recognized and output accordingly. The tag name can also be completely omitted, in which case a <div> is assumed.
			
			p After each tag, an id, multiple class names, and a list of attributes can follow. Ids are prefixed with '##' and class names with '.'. The attribute list is a comma separated list or key/value pairs delimited by clamps. The string value of an attribute can contain
				a(href="##string-interpolations") string interpolations
				| so anchors have to be escaped using a double hash '##'.
			
			p The rest of the line contains the nodes text contents. By default, the text is output HTML encoded and can contain
				a(href="##string-interpolations") string interpolations
				|. If the text is prefixed with '=', it is interpreted as a D expression. The outcome of this expression is converted to a string and HTML encoded. Prefixing with '!=' will output the bare string without HTML encoding.
			
			code
				pre !!! 5
					|html
					|	head
					|		title This is the page title
					|	body
					|		##main This is a <div> with the id 'main'.
					|			p##first This paragraph has the id 'first'.
					|			p.second.red This paragraph has the classes 'second' and 'red' assigned.
					|			p The following paragraph will have an '8' as its content:
					|			p= 5+3
					|			p It's also possible to output raw HTML from a D expression:
					|			p!= "<u>Underlined text</u>"
					|			p(style="color:red") HTML attributes can be specified.
					|			p##second.test(style="color:green") Id, classes and attributes can also be combined.
				.caption Example: HTML tags using the various optional features

			code
				pre.prettyprint.lang-html <!DOCTYPE html>
					|<html>
					|	<head>
					|		<title>This is the page title</title>
					|	<body>
					|		<div id="main">
					|			This is a &lt;div&gt; with the id 'main'.
					|			<p id="first">This paragraph has the id 'first'.</p>
					|			<p class="second red">This paragraph has the classes 'second' and 'red' assigned.</p>
					|			<p>The following paragraph will have an '8' as its content:</p>
					|			<p>8</p>
					|			<p>It's also possible to output raw HTML from a D expression:</p>
					|			<p><u>Underlined text</u></p>
					|			<p style="color:red">HTML attributes can be specified.</p>
					|			<p id="second" class="test" style="color:green">Id, classes and attributes can also be combined.</p>
					|		</div>
					|	</body>
					|</html>
				.caption Example: HTML output for the example
					
			code
				pre
					|html_attr    : (('a'-'z','A'-'Z')('a'-'z','A'-'Z','0'-'9',':','-')*)
					|html_ident   : (('a'-'z','A'-'Z')('a'-'z','A'-'Z','0'-'9','-')*)
					|html_tag     : (('a'-'z','A'-'Z')('a'-'z','A'-'Z','0'-'9',':','-','_')*)
					|html_arrt_list : '(' OPT_WS html_attr ')'
					|               | '(' OPT_WS html_attr OPT_WS '=' OPT_WS string
					|                 ( ',' OPT_WS html_attr OPT_WS '=' OPT_WS string )*
					|                 OPT_WS ')'
					|html_node    : (empty | html_tag) ['##' html_ident] ('.' html_ident)*
					|               [html_attr_list] node_content
					|node_content : (empty | '=' | '!=') text
				.caption Basic grammar for HTML nodes
				
		section
			a#plain-text
			h3 Plain text
			
			p There is a special plain text node for the cases where you want to split up text over multiple lines, for example because you are outputting prefromatted text or because you want to mix text with html nodes. The tag is started with a pipe '|' and can be followed by '=' or '!=' just as HTML nodes. Consecutive text nodes are output as separate lines in the HTML output with their indentation removed.
			
			code
				pre !!!5
					|html
					|	head
					|		title Plain text test
					|	body
					|		pre
					|			|This is some multi-line
					|			|     preformatted
					|			|         text
					|		p This is an example containing a
					|			a(href="http://vibed.org/") link
					|			| mixed with text.
					|		p
					|			|= "<D> expressions"
					|			|!= "And raw <u>HTML</u> output"
					|			| are possible.
				.caption Example: using text nodes to output multiple lines of text

			code
				pre.prettyprint.lang-html <!DOCTYPE html>
					|<html>
					|	<head>
					|		<title>Plain text test</title>
					|	<body>
					|		<pre>This is some multi-line
					|     preformatted
					|         text</pre>
					|		<p>
					|			This is an example containing a
					|			<a href="http://vibed.org/">link</a>
					|			mixed with text.
					|		</p>
					|		<p>
					|			&lt;D&gt; expressions
					|			And raw <u>HTML</u> output
					|			are possible.
					|		</p>
					|	</body>
					|</html>
				.caption Example: HTML output for the example

		section
			a#comments
			h3 Comments

	section
		a#embedded-code
		h2 Embedded D source code
		
		section
			a#statements
			h3 Statements
			
		section
			a#procedural-content
			h3 Procedural content
			
		section
			a#string-interpolations
			h3 String interpolations
		
	section
		a#extensions
		h2 Blocks and Extensions
		
	section
		a#filters
		h2 Filters