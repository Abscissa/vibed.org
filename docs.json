{
"vibe.core.connectionpool": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\connectionpool.d",
	"ddoc": "\n\tGeneric connection pool for reusing persistent connections across fibers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"structs": [
							[
								{
									"kind": "struct",
									"protection": "public",
									"members": {
										"constructors": [
											[
												{
													"kind": "constructor",
													"nestedName": "LockedConnection(Connection : EventedObject).LockedConnection.this",
													"type": {
														"text": "(ConnectionPool!(Connection) pool, Connection conn)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "",
															"qualifiedName": "",
															"name": "constructor",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "ConnectionPool",
																	"templateArgs": "(Connection)",
																	"qualifiedName": "ConnectionPool",
																	"name": "ConnectionPool",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "pool"
															},
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "Connection",
																	"qualifiedName": "Connection",
																	"name": "Connection",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "conn"
															}
														],
														"attributes": []
													},
													"name": "this"
												}
											]
										],
										"variables": [
											[
												{
													"kind": "variable",
													"nestedName": "LockedConnection(Connection : EventedObject).LockedConnection.m_conn",
													"type": {
														"kind": "type",
														"text": "Connection",
														"typeClass": "primitive",
														"nestedName": "Connection",
														"qualifiedName": "Connection",
														"name": "Connection",
														"moduleName": "",
														"attributes": []
													},
													"name": "m_conn"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "LockedConnection(Connection : EventedObject).LockedConnection.m_fiber",
													"type": {
														"kind": "type",
														"text": "Fiber",
														"typeClass": "primitive",
														"nestedName": "Fiber",
														"qualifiedName": "Fiber",
														"name": "Fiber",
														"moduleName": "",
														"attributes": []
													},
													"name": "m_fiber"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "LockedConnection(Connection : EventedObject).LockedConnection.m_pool",
													"type": {
														"kind": "type",
														"text": "ConnectionPool!(Connection)",
														"typeClass": "primitive",
														"nestedName": "ConnectionPool",
														"templateArgs": "(Connection)",
														"qualifiedName": "ConnectionPool",
														"name": "ConnectionPool",
														"moduleName": "",
														"attributes": []
													},
													"name": "m_pool"
												}
											]
										]
									},
									"nestedName": "LockedConnection(Connection : EventedObject).LockedConnection",
									"name": "LockedConnection"
								}
							]
						]
					},
					"nestedName": "LockedConnection(Connection : EventedObject)",
					"name": "LockedConnection(Connection : EventedObject)"
				}
			]
		],
		"classes": [
			[
				{
					"ddoc": "\n\tGeneric connection pool class.\n\n\tThe connection pool is creating connections using the supplied factory function as needed\n\twhenever lockConnection() is called. Connections are associated to the calling fiber, as long\n\tas any copy of the returned LockedConnection object still exists. Connections that are not\n\tassociated\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"classes": [
							[
								{
									"kind": "class",
									"protection": "public",
									"members": {
										"constructors": [
											[
												{
													"kind": "constructor",
													"nestedName": "ConnectionPool(Connection : EventedObject).ConnectionPool.this",
													"type": {
														"text": "(Connection delegate() connection_factory)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "",
															"qualifiedName": "",
															"name": "constructor",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"typeClass": "delegate",
																	"returnType": {
																		"kind": "type",
																		"typeClass": "primitive",
																		"nestedName": "Connection",
																		"qualifiedName": "Connection",
																		"name": "Connection",
																		"moduleName": ""
																	},
																	"parameters": [],
																	"attributes": []
																},
																"name": "connection_factory"
															}
														],
														"attributes": []
													},
													"name": "this"
												}
											]
										],
										"functions": [
											[
												{
													"kind": "function",
													"nestedName": "ConnectionPool(Connection : EventedObject).ConnectionPool.lockConnection",
													"type": {
														"text": "LockedConnection!(Connection)()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "LockedConnection",
															"templateArgs": "(Connection)",
															"qualifiedName": "LockedConnection",
															"name": "LockedConnection",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": []
													},
													"name": "lockConnection"
												}
											]
										],
										"variables": [
											[
												{
													"kind": "variable",
													"nestedName": "ConnectionPool(Connection : EventedObject).ConnectionPool.m_connectionFactory",
													"type": {
														"text": "Connection delegate()",
														"typeClass": "delegate",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "Connection",
															"qualifiedName": "Connection",
															"name": "Connection",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": []
													},
													"name": "m_connectionFactory"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "ConnectionPool(Connection : EventedObject).ConnectionPool.m_connections",
													"type": {
														"kind": "type",
														"text": "Connection[]",
														"typeClass": "array",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "Connection",
															"qualifiedName": "Connection",
															"name": "Connection",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "m_connections"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "ConnectionPool(Connection : EventedObject).ConnectionPool.m_lockCount",
													"type": {
														"kind": "type",
														"keyType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "Connection",
															"qualifiedName": "Connection",
															"name": "Connection",
															"moduleName": ""
														},
														"text": "int[Connection]",
														"typeClass": "associative array",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "int",
															"qualifiedName": "int",
															"name": "int",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "m_lockCount"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "ConnectionPool(Connection : EventedObject).ConnectionPool.m_locks",
													"type": {
														"kind": "type",
														"keyType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "Fiber",
															"qualifiedName": "Fiber",
															"name": "Fiber",
															"moduleName": ""
														},
														"text": "Connection[Fiber]",
														"typeClass": "associative array",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "Connection",
															"qualifiedName": "Connection",
															"name": "Connection",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "m_locks"
												}
											]
										]
									},
									"base": {
										"kind": "type",
										"text": "Object",
										"typeClass": "primitive",
										"nestedName": "Object",
										"qualifiedName": "Object",
										"name": "Object",
										"moduleName": "",
										"attributes": []
									},
									"nestedName": "ConnectionPool(Connection : EventedObject).ConnectionPool",
									"name": "ConnectionPool"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "ConnectionPool(Connection : EventedObject)",
					"name": "ConnectionPool(Connection : EventedObject)"
				}
			],
			[
				{
					"ddoc": "\n\tWraps an InputStream and automatically unlocks a locked connection as soon as all data has been\n\tread.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"classes": [
							[
								{
									"kind": "class",
									"protection": "public",
									"members": {
										"constructors": [
											[
												{
													"kind": "constructor",
													"nestedName": "LockedInputStream(Connection : EventedObject).LockedInputStream.this",
													"type": {
														"text": "(LockedConnection!(Connection) conn, InputStream str)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "",
															"qualifiedName": "",
															"name": "constructor",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "LockedConnection",
																	"templateArgs": "(Connection)",
																	"qualifiedName": "LockedConnection",
																	"name": "LockedConnection",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "conn"
															},
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "InputStream",
																	"qualifiedName": "vibe.stream.stream.InputStream",
																	"name": "InputStream",
																	"moduleName": "vibe.stream.stream",
																	"attributes": []
																},
																"name": "str"
															}
														],
														"attributes": []
													},
													"name": "this"
												}
											]
										],
										"functions": [
											[
												{
													"kind": "function",
													"nestedName": "LockedInputStream(Connection : EventedObject).LockedInputStream.dataAvailableForRead",
													"type": {
														"text": "bool()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "bool",
															"qualifiedName": "bool",
															"name": "bool",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": []
													},
													"name": "dataAvailableForRead"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "LockedInputStream(Connection : EventedObject).LockedInputStream.empty",
													"type": {
														"text": "bool()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "bool",
															"qualifiedName": "bool",
															"name": "bool",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": []
													},
													"name": "empty"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "LockedInputStream(Connection : EventedObject).LockedInputStream.leastSize",
													"type": {
														"text": "ulong()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "ulong",
															"qualifiedName": "ulong",
															"name": "ulong",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": []
													},
													"name": "leastSize"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "LockedInputStream(Connection : EventedObject).LockedInputStream.peek",
													"type": {
														"text": "const(ubyte)[]()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "array",
															"elementType": {
																"kind": "type",
																"modifiers": [
																	"const"
																],
																"typeClass": "primitive",
																"nestedName": "ubyte",
																"qualifiedName": "ubyte",
																"name": "ubyte",
																"moduleName": ""
															}
														},
														"parameters": [],
														"attributes": []
													},
													"name": "peek"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "LockedInputStream(Connection : EventedObject).LockedInputStream.read",
													"type": {
														"text": "void(ubyte[] dst)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "array",
																	"elementType": {
																		"kind": "type",
																		"typeClass": "primitive",
																		"nestedName": "ubyte",
																		"qualifiedName": "ubyte",
																		"name": "ubyte",
																		"moduleName": ""
																	},
																	"attributes": []
																},
																"name": "dst"
															}
														],
														"attributes": []
													},
													"name": "read"
												}
											]
										],
										"variables": [
											[
												{
													"kind": "variable",
													"nestedName": "LockedInputStream(Connection : EventedObject).LockedInputStream.m_lock",
													"type": {
														"kind": "type",
														"text": "LockedConnection!(Connection)",
														"typeClass": "primitive",
														"nestedName": "LockedConnection",
														"templateArgs": "(Connection)",
														"qualifiedName": "LockedConnection",
														"name": "LockedConnection",
														"moduleName": "",
														"attributes": []
													},
													"name": "m_lock"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "LockedInputStream(Connection : EventedObject).LockedInputStream.m_stream",
													"type": {
														"kind": "type",
														"text": "InputStream",
														"typeClass": "primitive",
														"nestedName": "InputStream",
														"qualifiedName": "vibe.stream.stream.InputStream",
														"name": "InputStream",
														"moduleName": "vibe.stream.stream",
														"attributes": []
													},
													"name": "m_stream"
												}
											]
										]
									},
									"base": {
										"kind": "type",
										"text": "Object",
										"typeClass": "primitive",
										"nestedName": "Object",
										"qualifiedName": "Object",
										"name": "Object",
										"moduleName": "",
										"attributes": []
									},
									"nestedName": "LockedInputStream(Connection : EventedObject).LockedInputStream",
									"name": "LockedInputStream"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "LockedInputStream(Connection : EventedObject)",
					"name": "LockedInputStream(Connection : EventedObject)"
				}
			]
		]
	},
	"name": "vibe.core.connectionpool"
},
"vibe.data.bson": {
	"kind": "module",
	"file": "..\\source\\vibe\\data\\bson.d",
	"ddoc": "\n\tBSON serialization and value handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"aliases": [
			[
				{
					"kind": "alias",
					"protection": "public",
					"nestedName": "bdata_t",
					"name": "bdata_t"
				}
			]
		],
		"structs": [
			[
				{
					"ddoc": "\n\tRepresents a BSON value.\n\n\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"ddoc": "\n\t\tCreates a new BSON value using raw data.\n\n\t\tA slice of the first bytes of 'data' is stored, containg the data related to the value. An\n\t\texception is thrown if 'data' is too short.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(Type type, immutable(ubyte)[] data)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Type",
													"qualifiedName": "Type",
													"name": "Type",
													"moduleName": "",
													"attributes": []
												},
												"name": "type"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"modifiers": [
															"immutable"
														],
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							],
							[
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(double value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(string value, Type type = cast(Type)cast(ubyte)2u)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											},
											{
												"defaultValue": "cast(Type",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Type",
													"qualifiedName": "Type",
													"name": "Type",
													"moduleName": "",
													"attributes": []
												},
												"name": "type"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(const(Bson[string]) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"keyType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"typeClass": "associative array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Bson",
														"qualifiedName": "vibe.data.bson.Bson",
														"name": "Bson",
														"moduleName": "vibe.data.bson"
													},
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(const(Bson[]) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Bson",
														"qualifiedName": "vibe.data.bson.Bson",
														"name": "Bson",
														"moduleName": "vibe.data.bson"
													},
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(const(BsonBinData) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonBinData",
													"qualifiedName": "vibe.data.bson.BsonBinData",
													"name": "BsonBinData",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(const(BsonObjectID) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonObjectID",
													"qualifiedName": "vibe.data.bson.BsonObjectID",
													"name": "BsonObjectID",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(bool value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(const(BsonDate) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonDate",
													"qualifiedName": "vibe.data.bson.BsonDate",
													"name": "BsonDate",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(typeof(null))",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "typeof",
														"qualifiedName": "typeof",
														"name": "typeof",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "null",
																"qualifiedName": "null",
																"name": "null",
																"moduleName": "",
																"attributes": []
															}
														}
													],
													"attributes": []
												}
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(const(BsonRegex) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonRegex",
													"qualifiedName": "vibe.data.bson.BsonRegex",
													"name": "BsonRegex",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(int value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(const(BsonTimestamp) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonTimestamp",
													"qualifiedName": "vibe.data.bson.BsonTimestamp",
													"name": "BsonTimestamp",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(long value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(const(Json) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"enums": [
							[
								{
									"ddoc": " Represents the type of a BSON value\n",
									"kind": "enum",
									"protection": "public",
									"members": [
										{
											"ddoc": " End marker - should never occur explicitly\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.End",
											"name": "End"
										},
										{
											"ddoc": " A 64-bit floating point value\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Double",
											"name": "Double"
										},
										{
											"ddoc": " A UTF-8 string\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.String",
											"name": "String"
										},
										{
											"ddoc": " An object aka. dictionary of string to Bson\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Object",
											"name": "Object"
										},
										{
											"ddoc": " An array of BSON values\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Array",
											"name": "Array"
										},
										{
											"ddoc": " Raw binary data (ubyte[])\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.BinData",
											"name": "BinData"
										},
										{
											"ddoc": " Deprecated\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Undefined",
											"name": "Undefined"
										},
										{
											"ddoc": " BSON Object ID (96-bit)\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.ObjectID",
											"name": "ObjectID"
										},
										{
											"ddoc": " Boolean value\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Bool",
											"name": "Bool"
										},
										{
											"ddoc": " Date value (UTC)\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Date",
											"name": "Date"
										},
										{
											"ddoc": " Null value\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Null",
											"name": "Null"
										},
										{
											"ddoc": " Regular expression\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Regex",
											"name": "Regex"
										},
										{
											"ddoc": " Deprecated\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.DBRef",
											"name": "DBRef"
										},
										{
											"ddoc": " JaveScript code\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Code",
											"name": "Code"
										},
										{
											"ddoc": " Symbol/variable name\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Symbol",
											"name": "Symbol"
										},
										{
											"ddoc": " JavaScript code with scope\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.CodeWScope",
											"name": "CodeWScope"
										},
										{
											"ddoc": " 32-bit integer\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Int",
											"name": "Int"
										},
										{
											"ddoc": " Timestamp value\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Timestamp",
											"name": "Timestamp"
										},
										{
											"ddoc": " 64-bit integer\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Long",
											"name": "Long"
										},
										{
											"ddoc": " Internal value\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.MinKey",
											"name": "MinKey"
										},
										{
											"ddoc": " Internal value\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.MaxKey",
											"name": "MaxKey"
										}
									],
									"nestedName": "Bson.Type",
									"name": "Type",
									"baseType": {
										"kind": "type",
										"text": "ubyte",
										"typeClass": "primitive",
										"nestedName": "ubyte",
										"qualifiedName": "ubyte",
										"name": "ubyte",
										"moduleName": "",
										"attributes": []
									}
								}
							]
						],
						"functions": [
							[
								{
									"ddoc": " Returns a new, empty Bson value of type Object.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.EmptyObject",
									"type": {
										"text": "@property Bson()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "EmptyObject"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns the raw data representing this BSON value (not including the field name and type).\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.data",
									"type": {
										"text": "const @property immutable(ubyte)[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"immutable"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "data"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.isNull",
									"type": {
										"text": "const bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "isNull"
								}
							],
							[
								{
									"ddoc": " Returns the length of a BSON value of type String, Array or BinData.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.length",
									"type": {
										"text": "const @property uint()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "length"
								}
							],
							[
								{
									"ddoc": "\n\t\tAllows foreach iterating over BSON objects and arrays.\n\n\t\tNote that although D requires to provide a 'ref' argument for\n\t\topApply, in-place editing of the array/object fields is not possible.\n\t\tAny modification attempty will work on a temporary, even if the\n\t\tloop variable is declared 'ref'.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opApply",
									"type": {
										"text": "const int(int delegate(ref Bson obj) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Bson",
																"qualifiedName": "vibe.data.bson.Bson",
																"name": "Bson",
																"moduleName": "vibe.data.bson",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over BSON objects and arrays.\n\n\t\tNote that although D requires to provide a 'ref' argument for\n\t\topApply, in-place editing of the array/object fields is not possible.\n\t\tAny modification attempty will work on a temporary, even if the\n\t\tloop variable is declared 'ref'.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opApply",
									"type": {
										"text": "const int(int delegate(ref uint idx, ref Bson obj) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "uint",
																"qualifiedName": "uint",
																"name": "uint",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Bson",
																"qualifiedName": "vibe.data.bson.Bson",
																"name": "Bson",
																"moduleName": "vibe.data.bson",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over BSON objects and arrays.\n\n\t\tNote that although D requires to provide a 'ref' argument for\n\t\topApply, in-place editing of the array/object fields is not possible.\n\t\tAny modification attempty will work on a temporary, even if the\n\t\tloop variable is declared 'ref'.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opApply",
									"type": {
										"text": "const int(int delegate(ref string idx, ref Bson obj) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Bson",
																"qualifiedName": "vibe.data.bson.Bson",
																"name": "Bson",
																"moduleName": "vibe.data.bson",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opApply"
								}
							],
							[
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(const(Bson) other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(double value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(string value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(const(Bson[string]) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"keyType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"typeClass": "associative array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Bson",
														"qualifiedName": "vibe.data.bson.Bson",
														"name": "Bson",
														"moduleName": "vibe.data.bson"
													},
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(const(Bson[]) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Bson",
														"qualifiedName": "vibe.data.bson.Bson",
														"name": "Bson",
														"moduleName": "vibe.data.bson"
													},
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(const(BsonBinData) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonBinData",
													"qualifiedName": "vibe.data.bson.BsonBinData",
													"name": "BsonBinData",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(const(BsonObjectID) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonObjectID",
													"qualifiedName": "vibe.data.bson.BsonObjectID",
													"name": "BsonObjectID",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(bool value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(const(BsonDate) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonDate",
													"qualifiedName": "vibe.data.bson.BsonDate",
													"name": "BsonDate",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(typeof(null))",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "typeof",
														"qualifiedName": "typeof",
														"name": "typeof",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "null",
																"qualifiedName": "null",
																"name": "null",
																"moduleName": "",
																"attributes": []
															}
														}
													],
													"attributes": []
												}
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(const(BsonRegex) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonRegex",
													"qualifiedName": "vibe.data.bson.BsonRegex",
													"name": "BsonRegex",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(int value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(const(BsonTimestamp) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonTimestamp",
													"qualifiedName": "vibe.data.bson.BsonTimestamp",
													"name": "BsonTimestamp",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(long value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(const(Json) value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								}
							],
							[
								{
									"ddoc": "\n\t\tConverts the BSON value to a D value.\n\n\t\tIf the BSON type of the value does not match the D type, an exception is thrown.\n\t\n",
									"kind": "function",
									"templateName": "opCast(T)",
									"nestedName": "Bson.opCast",
									"type": {
										"text": "const T()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "opCast"
								},
								{
									"kind": "function",
									"ddoc": "\n\t\tConverts the BSON value to a D value.\n\n\t\tIf the BSON type of the value does not match the D type, an exception is thrown.\n\t\n",
									"templateName": "get(T)",
									"nestedName": "Bson.get",
									"type": {
										"text": "const T()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "get"
								}
							],
							[
								{
									"kind": "function",
									"ddoc": " Allows to access existing fields of a JSON object using dot syntax.\n\n\t\tReturns a null value for non-existent fields.\n\t\n",
									"templateName": "opDispatch(string prop)",
									"nestedName": "Bson.opDispatch",
									"type": {
										"text": "inout inout(Bson)()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [],
										"attributes": [
											"inout"
										]
									},
									"name": "opDispatch"
								},
								{
									"kind": "function",
									"ddoc": " Allows to access existing fields of a JSON object using dot syntax.\n\n\t\tReturns a null value for non-existent fields.\n\t\n",
									"templateName": "opDispatch(string prop,T)",
									"nestedName": "Bson.opDispatch",
									"type": {
										"text": "void(T val)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "val"
											}
										],
										"attributes": []
									},
									"name": "opDispatch"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opEquals",
									"type": {
										"text": "const bool(ref const(Bson) other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"ddoc": " Allows accessing fields of a BSON object using [].\n\n\t\tReturns a null value if the specified field does not exist.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opIndex",
									"type": {
										"text": "inout inout(Bson)(string idx)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "idx"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opIndex"
								},
								{
									"ddoc": " Allows accessing fields of a BSON object using [].\n\n\t\tReturns a null value if the specified field does not exist.\n\t\n",
									"kind": "function",
									"templateName": "opIndexAssign(T)",
									"nestedName": "Bson.opIndexAssign",
									"type": {
										"text": "void(T value, string idx)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "idx"
											}
										],
										"attributes": []
									},
									"name": "opIndexAssign"
								}
							],
							[
								{
									"ddoc": " Allows index based access of a BSON array value.\n\n\t\tReturns a null value if the index is out of bounds.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opIndex",
									"type": {
										"text": "inout inout(Bson)(uint idx)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "idx"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opIndex"
								}
							],
							[
								{
									"ddoc": " Returns the native type for this BSON if it matches the current runtime type.\n\n\t\tIf the runtime type does not match the given native type, the 'def' parameter is returned\n\t\tinstead.\n\t\n",
									"kind": "function",
									"templateName": "opt(T)",
									"nestedName": "Bson.opt",
									"type": {
										"text": "inout inout(T)(T def = T.init)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"defaultValue": "T.init",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "def"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opt"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns the BSON type of this value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.type",
									"type": {
										"text": "const @property Type()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Type",
											"qualifiedName": "Type",
											"name": "Type",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "type"
								}
							]
						]
					},
					"nestedName": "Bson",
					"name": "Bson"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a BSON binary data value (Bson.Type.BinData).\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonBinData.this",
									"type": {
										"text": "ref BsonBinData(Type type, immutable(ubyte)[] data)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonBinData",
											"qualifiedName": "vibe.data.bson.BsonBinData",
											"name": "BsonBinData",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Type",
													"qualifiedName": "Type",
													"name": "Type",
													"moduleName": "",
													"attributes": []
												},
												"name": "type"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"modifiers": [
															"immutable"
														],
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"enums": [
							[
								{
									"kind": "enum",
									"protection": "public",
									"members": [
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.Generic",
											"name": "Generic"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.Function",
											"name": "Function"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.BinaryOld",
											"name": "BinaryOld"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.UUID",
											"name": "UUID"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.MD5",
											"name": "MD5"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.UserDefined",
											"name": "UserDefined"
										}
									],
									"nestedName": "BsonBinData.Type",
									"name": "Type",
									"baseType": {
										"kind": "type",
										"text": "ubyte",
										"typeClass": "primitive",
										"nestedName": "ubyte",
										"qualifiedName": "ubyte",
										"name": "ubyte",
										"moduleName": "",
										"attributes": []
									}
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonBinData.rawData",
									"type": {
										"text": "const @property immutable(ubyte)[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"immutable"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "rawData"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonBinData.type",
									"type": {
										"text": "const @property Type()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Type",
											"qualifiedName": "Type",
											"name": "Type",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "type"
								}
							]
						]
					},
					"nestedName": "BsonBinData",
					"name": "BsonBinData"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a BSON date value (Bson.Type.Date).\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonDate.this",
									"type": {
										"text": "ref BsonDate(const(Date) date)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonDate",
											"qualifiedName": "vibe.data.bson.BsonDate",
											"name": "BsonDate",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Date",
													"qualifiedName": "Date",
													"name": "Date",
													"moduleName": "",
													"attributes": []
												},
												"name": "date"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonDate.this",
									"type": {
										"text": "ref BsonDate(const(DateTime) date)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonDate",
											"qualifiedName": "vibe.data.bson.BsonDate",
											"name": "BsonDate",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "DateTime",
													"qualifiedName": "DateTime",
													"name": "DateTime",
													"moduleName": "",
													"attributes": []
												},
												"name": "date"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonDate.this",
									"type": {
										"text": "ref BsonDate(long time)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonDate",
											"qualifiedName": "vibe.data.bson.BsonDate",
											"name": "BsonDate",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "time"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonDate.this",
									"type": {
										"text": "ref BsonDate(const(SysTime) time)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonDate",
											"qualifiedName": "vibe.data.bson.BsonDate",
											"name": "BsonDate",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "SysTime",
													"qualifiedName": "SysTime",
													"name": "SysTime",
													"moduleName": "",
													"attributes": []
												},
												"name": "time"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.fromString",
									"type": {
										"text": "BsonDate(string iso_ext_string)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonDate",
											"qualifiedName": "vibe.data.bson.BsonDate",
											"name": "BsonDate",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "iso_ext_string"
											}
										],
										"attributes": []
									},
									"name": "fromString"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.opCmp",
									"type": {
										"text": "const int(ref const(BsonDate) other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonDate",
													"qualifiedName": "vibe.data.bson.BsonDate",
													"name": "BsonDate",
													"moduleName": "vibe.data.bson",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opCmp"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.opEquals",
									"type": {
										"text": "const bool(ref const(BsonDate) other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonDate",
													"qualifiedName": "vibe.data.bson.BsonDate",
													"name": "BsonDate",
													"moduleName": "vibe.data.bson",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.toString",
									"type": {
										"text": "const string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.toSysTime",
									"type": {
										"text": "const SysTime()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SysTime",
											"qualifiedName": "SysTime",
											"name": "SysTime",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toSysTime"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.value",
									"type": {
										"text": "const @property long()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "long",
											"qualifiedName": "long",
											"name": "long",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "value"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.value",
									"type": {
										"text": "@property void(long v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "value"
								}
							]
						]
					},
					"nestedName": "BsonDate",
					"name": "BsonDate"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a BSON object id (Bson.Type.BinData).\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"ddoc": " Constructs a new object ID from the given raw byte array.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonObjectID.this",
									"type": {
										"text": "ref BsonObjectID(const(ubyte[]) bytes)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonObjectID",
											"qualifiedName": "vibe.data.bson.BsonObjectID",
											"name": "BsonObjectID",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"aliases": [
							[
								{
									"ddoc": " ditto\n",
									"kind": "alias",
									"protection": "public",
									"nestedName": "BsonObjectID.fromHexString",
									"name": "fromHexString"
								}
							]
						],
						"functions": [
							[
								{
									"ddoc": " Creates a pseudo object ID that matches the given date.\n\n\t\tThis kind of ID can be useful to query a database for items in a certain\n\t\tdate interval using their ID. This works using the property of standard BSON\n\t\tobject IDs that they store their creation date as part of the ID. Note that\n\t\tthis date part is only 32-bit wide and is limited to the same timespan as a\n\t\t32-bit Unix timestamp.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonObjectID.createDateID",
									"type": {
										"text": "BsonObjectID(const(SysTime) date)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonObjectID",
											"qualifiedName": "vibe.data.bson.BsonObjectID",
											"name": "BsonObjectID",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "SysTime",
													"qualifiedName": "SysTime",
													"name": "SysTime",
													"moduleName": "",
													"attributes": []
												},
												"name": "date"
											}
										],
										"attributes": []
									},
									"name": "createDateID"
								}
							],
							[
								{
									"ddoc": " Creates an on object ID from a string in standard hexa-decimal form.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonObjectID.fromString",
									"type": {
										"text": "BsonObjectID(string str)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonObjectID",
											"qualifiedName": "vibe.data.bson.BsonObjectID",
											"name": "BsonObjectID",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "str"
											}
										],
										"attributes": []
									},
									"name": "fromString"
								}
							],
							[
								{
									"ddoc": " Generates a unique object ID.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonObjectID.generate",
									"type": {
										"text": "BsonObjectID()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonObjectID",
											"qualifiedName": "vibe.data.bson.BsonObjectID",
											"name": "BsonObjectID",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "generate"
								}
							],
							[
								{
									"ddoc": " Allows for relational comparison of different IDs.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonObjectID.opCmp",
									"type": {
										"text": "const int(ref const(BsonObjectID) other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonObjectID",
													"qualifiedName": "vibe.data.bson.BsonObjectID",
													"name": "BsonObjectID",
													"moduleName": "vibe.data.bson",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opCmp"
								}
							],
							[
								{
									"ddoc": " Converts the ID to its standard hexa-decimal string representation.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonObjectID.toString",
									"type": {
										"text": "const string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							],
							[
								{
									"ddoc": " Returns true for any non-zero ID.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonObjectID.valid",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "valid"
								}
							]
						]
					},
					"nestedName": "BsonObjectID",
					"name": "BsonObjectID"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a BSON regular expression value (Bson.Type.Regex).\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonRegex.this",
									"type": {
										"text": "ref BsonRegex(string expr, string options)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonRegex",
											"qualifiedName": "vibe.data.bson.BsonRegex",
											"name": "BsonRegex",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "expr"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "options"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonRegex.expression",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "expression"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonRegex.options",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "options"
								}
							]
						]
					},
					"nestedName": "BsonRegex",
					"name": "BsonRegex"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a BSON timestamp value (Bson.Type.Timestamp)\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonTimestamp.this",
									"type": {
										"text": "ref BsonTimestamp(long time)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonTimestamp",
											"qualifiedName": "vibe.data.bson.BsonTimestamp",
											"name": "BsonTimestamp",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "time"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						]
					},
					"nestedName": "BsonTimestamp",
					"name": "BsonTimestamp"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tDeserializes a BSON value into the destination variable.\n\n\tThe same types as for serializeToBson() are supported and handled inversely.\n",
					"kind": "function",
					"templateName": "deserializeBson(T)",
					"nestedName": "deserializeBson",
					"type": {
						"text": "void(ref T dst, Bson src)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Bson",
									"qualifiedName": "vibe.data.bson.Bson",
									"name": "Bson",
									"moduleName": "vibe.data.bson",
									"attributes": []
								},
								"name": "src"
							}
						],
						"attributes": []
					},
					"name": "deserializeBson"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "fromBsonData(T)",
					"nestedName": "fromBsonData",
					"type": {
						"text": "T(in ubyte[] v)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "T",
							"qualifiedName": "T",
							"name": "T",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "ubyte",
										"qualifiedName": "ubyte",
										"name": "ubyte",
										"moduleName": ""
									},
									"attributes": [
										"in"
									]
								},
								"name": "v"
							}
						],
						"attributes": []
					},
					"name": "fromBsonData"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "putCString(R)",
					"nestedName": "putCString",
					"type": {
						"text": "void(R dst, string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": []
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "putCString"
				}
			],
			[
				{
					"ddoc": "\n\tSerializes the given value to BSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Bson)            $(DD Used as-is)\n\t\t$(DT Json)            $(DD Converted to BSON)\n\t\t$(DT BsonBinData)     $(DD Converted to Bson.Type.BinData)\n\t\t$(DT BsonObjectID)    $(DD Converted to Bson.Type.ObjectID)\n\t\t$(DT BsonDate)        $(DD Converted to Bson.Type.Date)\n\t\t$(DT BsonTimestamp)   $(DD Converted to Bson.Type.Timestamp)\n\t\t$(DT BsonRegex)       $(DD Converted to Bson.Type.Regex)\n\t\t$(DT null)            $(DD Converted to Bson.Type.Null)\n\t\t$(DT bool)            $(DD Converted to Bson.Type.Bool)\n\t\t$(DT float, double)   $(DD Converted to Bson.Type.Double)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Bson.Type.Long)\n\t\t$(DT string)          $(DD Converted to Bson.Type.String)\n\t\t$(DT ubyte[])         $(DD Converted to Bson.Type.BinData)\n\t\t$(DT T[])             $(DD Converted to Bson.Type.Array)\n\t\t$(DT T[string])       $(DD Converted to Bson.Type.Object)\n\t\t$(DT struct)          $(DD Converted to Bson.Type.Object)\n\t\t$(DT class)           $(DD Converted to Bson.Type.Object or Bson.Type.Null)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall fields of a struct/class are recursively serialized using the same rules.\n",
					"kind": "function",
					"templateName": "serializeToBson(T)",
					"nestedName": "serializeToBson",
					"type": {
						"text": "Bson(T value)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Bson",
							"qualifiedName": "vibe.data.bson.Bson",
							"name": "Bson",
							"moduleName": "vibe.data.bson"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "value"
							}
						],
						"attributes": []
					},
					"name": "serializeToBson"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "toBigEndianData(T)",
					"nestedName": "toBigEndianData",
					"type": {
						"text": "ubyte[](T v)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "ubyte",
								"qualifiedName": "ubyte",
								"name": "ubyte",
								"moduleName": ""
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "v"
							}
						],
						"attributes": []
					},
					"name": "toBigEndianData"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "toBsonData(T)",
					"nestedName": "toBsonData",
					"type": {
						"text": "ubyte[](T v)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "ubyte",
								"qualifiedName": "ubyte",
								"name": "ubyte",
								"moduleName": ""
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "v"
							}
						],
						"attributes": []
					},
					"name": "toBsonData"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "writeBson(R) if (isOutputRange!(R,ubyte))",
					"nestedName": "writeBson",
					"type": {
						"text": "Bson.Type(ref R dst, in Json value)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Bson.Type",
							"qualifiedName": "Bson.Type",
							"name": "Type",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": [
										"in"
									]
								},
								"name": "value"
							}
						],
						"attributes": []
					},
					"name": "writeBson"
				}
			]
		]
	},
	"name": "vibe.data.bson"
},
"vibe.templ.diet": {
	"kind": "module",
	"file": "..\\source\\vibe\\templ\\diet.d",
	"ddoc": "\n\tImplements a compile-time Diet template parser.\n\n\tDiet templates are an more or less compatible incarnation of Jade templates but with\n\tembedded D source instead of JavaScript. The Diet syntax reference is found at\n\t$(LINK http://vibed.org/templates).\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"kind": "function",
					"templateName": "_toString(T)",
					"nestedName": "_toString",
					"type": {
						"text": "string(T v)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "v"
							}
						],
						"attributes": []
					},
					"name": "_toString"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "buildSpecialTag(alias node_stack)",
					"nestedName": "buildSpecialTag",
					"type": {
						"text": "string(string tag, int level, ref bool in_string)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "tag"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "level"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "bool",
									"qualifiedName": "bool",
									"name": "bool",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "in_string"
							}
						],
						"attributes": []
					},
					"name": "buildSpecialTag"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "dietParser(string template_file)",
					"nestedName": "dietParser",
					"type": {
						"text": "string()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "dietParser"
				}
			],
			[
				{
					"ddoc": "\n\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "filterCSS",
					"type": {
						"text": "string(string text, int indent)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "text"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "indent"
							}
						],
						"attributes": []
					},
					"name": "filterCSS"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "filterJavaScript",
					"type": {
						"text": "string(string text, int indent)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "text"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "indent"
							}
						],
						"attributes": []
					},
					"name": "filterJavaScript"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "filterMarkdown",
					"type": {
						"text": "string(string text, int indent)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "text"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "indent"
							}
						],
						"attributes": []
					},
					"name": "filterMarkdown"
				}
			],
			[
				{
					"ddoc": "\n\tParses the given diet template at compile time and writes the resulting\n\tHTML code into 'stream'.\n\n\tNote that this function currently suffers from multiple DMD bugs in conjunction with local\n\tvariables passed as alias template parameters.\n",
					"kind": "function",
					"templateName": "parseDietFile(string template_file,ALIASES...)",
					"nestedName": "parseDietFile",
					"type": {
						"text": "void(OutputStream stream__)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "OutputStream",
									"qualifiedName": "vibe.stream.stream.OutputStream",
									"name": "OutputStream",
									"moduleName": "vibe.stream.stream",
									"attributes": []
								},
								"name": "stream__"
							}
						],
						"attributes": []
					},
					"name": "parseDietFile"
				}
			],
			[
				{
					"ddoc": "\n\tCompatibility version of parseDietFile().\n\n\tThis function should only be called indiretly through HttpServerResponse.renderCompat().\n\n",
					"kind": "function",
					"templateName": "parseDietFileCompat(string template_file,TYPES_AND_NAMES...)",
					"nestedName": "parseDietFileCompat",
					"type": {
						"text": "void(OutputStream stream__, Variant[] args__...)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "OutputStream",
									"qualifiedName": "vibe.stream.stream.OutputStream",
									"name": "OutputStream",
									"moduleName": "vibe.stream.stream",
									"attributes": []
								},
								"name": "stream__"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "Variant",
										"qualifiedName": "Variant",
										"name": "Variant",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "args__..."
							}
						],
						"attributes": []
					},
					"name": "parseDietFileCompat"
				}
			],
			[
				{
					"ddoc": "\n\tRegisters a new text filter for use in Diet templates.\n\n\tThe filter will be available using :filtername inside of the template. The following filters are\n\tpredefined: css, javascript, markdown\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "registerDietTextFilter",
					"type": {
						"text": "void(string name, string function(string, int indent) filter)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "name"
							},
							{
								"type": {
									"typeClass": "function",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											}
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "int",
												"qualifiedName": "int",
												"name": "int",
												"moduleName": "",
												"attributes": []
											},
											"name": "indent"
										}
									],
									"attributes": []
								},
								"name": "filter"
							}
						],
						"attributes": []
					},
					"name": "registerDietTextFilter"
				}
			]
		]
	},
	"name": "vibe.templ.diet"
},
"vibe.crypto.sha1": {
	"kind": "module",
	"file": "..\\source\\vibe\\crypto\\sha1.d",
	"members": {
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "sha1",
					"type": {
						"text": "ubyte[20u](const(char[]) str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "static array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "ubyte",
								"qualifiedName": "ubyte",
								"name": "ubyte",
								"moduleName": ""
							},
							"elementCount": 20
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"modifiers": [
										"const"
									],
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "char",
										"qualifiedName": "char",
										"name": "char",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "sha1"
				}
			]
		]
	},
	"name": "vibe.crypto.sha1"
},
"vibe.http.session": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\session.d",
	"ddoc": "\n\tCookie based session support.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\tSession store for storing a session in local memory.\n\n\tIf the server is running as a single instance (no thread or process clustering), this kind of\n\tsession store provies the fastest and simplest way to store sessions. In any other case,\n\ta persistent session store based on a database is necessary.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "MemorySessionStore.this",
									"type": {
										"text": "MemorySessionStore()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MemorySessionStore",
											"qualifiedName": "vibe.http.session.MemorySessionStore",
											"name": "MemorySessionStore",
											"moduleName": "vibe.http.session"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.create",
									"type": {
										"text": "Session()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Session",
											"qualifiedName": "vibe.http.session.Session",
											"name": "Session",
											"moduleName": "vibe.http.session"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "create"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.destroy",
									"type": {
										"text": "void(string id)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											}
										],
										"attributes": []
									},
									"name": "destroy"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.get",
									"type": {
										"text": "const string(string id, string name, string defaultVal = null)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "defaultVal"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "get"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.isKeySet",
									"type": {
										"text": "const bool(string id, string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "isKeySet"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.iterateSession",
									"type": {
										"text": "int delegate(int delegate(ref string key, ref string val))(string id)",
										"typeClass": "function",
										"returnType": {
											"typeClass": "delegate",
											"returnType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "int",
												"qualifiedName": "int",
												"name": "int",
												"moduleName": ""
											},
											"parameters": [
												{
													"type": {
														"typeClass": "delegate",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "int",
															"qualifiedName": "int",
															"name": "int",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "string",
																	"qualifiedName": "string",
																	"name": "string",
																	"moduleName": "",
																	"attributes": [
																		"ref"
																	]
																},
																"name": "key"
															},
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "string",
																	"qualifiedName": "string",
																	"name": "string",
																	"moduleName": "",
																	"attributes": [
																		"ref"
																	]
																},
																"name": "val"
															}
														],
														"attributes": []
													}
												}
											]
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											}
										],
										"attributes": []
									},
									"name": "iterateSession"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.open",
									"type": {
										"text": "Session(string id)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Session",
											"qualifiedName": "vibe.http.session.Session",
											"name": "Session",
											"moduleName": "vibe.http.session"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											}
										],
										"attributes": []
									},
									"name": "open"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.set",
									"type": {
										"text": "void(string id, string name, string value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "set"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MemorySessionStore",
					"interfaces": [
						{
							"kind": "type",
							"text": "SessionStore",
							"typeClass": "primitive",
							"nestedName": "SessionStore",
							"qualifiedName": "vibe.http.session.SessionStore",
							"name": "SessionStore",
							"moduleName": "vibe.http.session",
							"attributes": []
						}
					],
					"name": "MemorySessionStore"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a single HTTP session.\n\n\tIndexing the session object with string keys allows to store arbitrary key/value pairs.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Returns the unique session id of this session.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Session.id",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "id"
								}
							],
							[
								{
									"ddoc": " Queries the session for the existence of a particular key.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Session.isKeySet",
									"type": {
										"text": "const bool(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "isKeySet"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Session.opApply",
									"type": {
										"text": "int(int delegate(ref string key, ref string val) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "key"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "val"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								}
							],
							[
								{
									"ddoc": " Gets/sets a key/value pair stored within the session.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Session.opIndex",
									"type": {
										"text": "const string(string name)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opIndex"
								},
								{
									"ddoc": " Gets/sets a key/value pair stored within the session.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Session.opIndexAssign",
									"type": {
										"text": "void(string value, string name)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											}
										],
										"attributes": []
									},
									"name": "opIndexAssign"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Session",
					"name": "Session"
				}
			]
		],
		"interfaces": [
			[
				{
					"ddoc": "\n\tInterface for a basic session store.\n\n\tA sesseion store is responsible for storing the id and the associated key/value pairs of a\n\tsession.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.create",
									"type": {
										"text": "Session()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Session",
											"qualifiedName": "vibe.http.session.Session",
											"name": "Session",
											"moduleName": "vibe.http.session"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "create"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.destroy",
									"type": {
										"text": "void(string id)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											}
										],
										"attributes": []
									},
									"name": "destroy"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.get",
									"type": {
										"text": "const string(string id, string name, string defaultVal = null)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "defaultVal"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "get"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.isKeySet",
									"type": {
										"text": "const bool(string id, string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "isKeySet"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.iterateSession",
									"type": {
										"text": "int delegate(int delegate(ref string key, ref string val))(string id)",
										"typeClass": "function",
										"returnType": {
											"typeClass": "delegate",
											"returnType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "int",
												"qualifiedName": "int",
												"name": "int",
												"moduleName": ""
											},
											"parameters": [
												{
													"type": {
														"typeClass": "delegate",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "int",
															"qualifiedName": "int",
															"name": "int",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "string",
																	"qualifiedName": "string",
																	"name": "string",
																	"moduleName": "",
																	"attributes": [
																		"ref"
																	]
																},
																"name": "key"
															},
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "string",
																	"qualifiedName": "string",
																	"name": "string",
																	"moduleName": "",
																	"attributes": [
																		"ref"
																	]
																},
																"name": "val"
															}
														],
														"attributes": []
													}
												}
											]
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											}
										],
										"attributes": []
									},
									"name": "iterateSession"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.open",
									"type": {
										"text": "Session(string id)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Session",
											"qualifiedName": "vibe.http.session.Session",
											"name": "Session",
											"moduleName": "vibe.http.session"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											}
										],
										"attributes": []
									},
									"name": "open"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.set",
									"type": {
										"text": "void(string id, string name, string value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "set"
								}
							]
						]
					},
					"nestedName": "SessionStore",
					"name": "SessionStore"
				}
			]
		]
	},
	"name": "vibe.http.session"
},
"vibe.core.process": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\process.d",
	"ddoc": "\n\tProcess spawning and controlling\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"kind": "struct",
					"protection": "public",
					"nestedName": "SECURITY_ATTRIBUTES",
					"name": "SECURITY_ATTRIBUTES"
				}
			]
		],
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Process.this",
									"type": {
										"text": "Process(int pid)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Process",
											"qualifiedName": "vibe.core.process.Process",
											"name": "Process",
											"moduleName": "vibe.core.process"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "pid"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Process.id",
									"type": {
										"text": "const @property int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "id"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Process.term",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "term"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Process",
					"name": "Process"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "spawnProcess",
					"type": {
						"text": "Process(string executable, string[] args, string working_dir)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Process",
							"qualifiedName": "vibe.core.process.Process",
							"name": "Process",
							"moduleName": "vibe.core.process"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "executable"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "args"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "working_dir"
							}
						],
						"attributes": []
					},
					"name": "spawnProcess"
				}
			]
		]
	},
	"name": "vibe.core.process"
},
"vibe.core.drivers.libev": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\drivers\\libev.d",
	"ddoc": "\n\tlibev based driver implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
	"members": {
	},
	"name": "vibe.core.drivers.libev"
},
"vibe.core.file": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\file.d",
	"ddoc": "\n\tFile handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"ddoc": "\n\tSpecifies how a file is manipulated on disk.\n",
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FileMode.Read",
							"name": "Read"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FileMode.ReadWrite",
							"name": "ReadWrite"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FileMode.CreateTrunc",
							"name": "CreateTrunc"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FileMode.Append",
							"name": "Append"
						}
					],
					"nestedName": "FileMode",
					"name": "FileMode",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"structs": [
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileInfo.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileInfo.opEquals",
									"type": {
										"text": "const bool(const(FileInfo) p)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "FileInfo",
													"qualifiedName": "vibe.core.file.FileInfo",
													"name": "FileInfo",
													"moduleName": "vibe.core.file",
													"attributes": []
												},
												"name": "p"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "FileInfo.isDirectory",
									"type": {
										"kind": "type",
										"text": "bool",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": "",
										"attributes": []
									},
									"name": "isDirectory"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "FileInfo.isSymlink",
									"type": {
										"kind": "type",
										"text": "bool",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": "",
										"attributes": []
									},
									"name": "isSymlink"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "FileInfo.name",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "name"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "FileInfo.size",
									"type": {
										"kind": "type",
										"text": "ulong",
										"typeClass": "primitive",
										"nestedName": "ulong",
										"qualifiedName": "ulong",
										"name": "ulong",
										"moduleName": "",
										"attributes": []
									},
									"name": "size"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "FileInfo.timeCreated",
									"type": {
										"kind": "type",
										"text": "SysTime",
										"typeClass": "primitive",
										"nestedName": "SysTime",
										"qualifiedName": "SysTime",
										"name": "SysTime",
										"moduleName": "",
										"attributes": []
									},
									"name": "timeCreated"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "FileInfo.timeModified",
									"type": {
										"kind": "type",
										"text": "SysTime",
										"typeClass": "primitive",
										"nestedName": "SysTime",
										"qualifiedName": "SysTime",
										"name": "SysTime",
										"moduleName": "",
										"attributes": []
									},
									"name": "timeModified"
								}
							]
						]
					},
					"nestedName": "FileInfo",
					"name": "FileInfo"
				}
			]
		],
		"interfaces": [
			[
				{
					"ddoc": "\n\tAccesses the contents of a file as a stream.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Closes the file handle.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.close",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "close"
								}
							],
							[
								{
									"ddoc": " The path of the file.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.path",
									"type": {
										"text": "const @property Path()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "path"
								}
							],
							[
								{
									"ddoc": " Determines if this stream is readable.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.readable",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "readable"
								}
							],
							[
								{
									"ddoc": " Seeks to a specific position in the file if supported by the stream.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.seek",
									"type": {
										"text": "void(ulong offset)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "offset"
											}
										],
										"attributes": []
									},
									"name": "seek"
								}
							],
							[
								{
									"ddoc": " Returns the total size of the file.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.size",
									"type": {
										"text": "const @property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "size"
								}
							],
							[
								{
									"ddoc": " Returns the current offset of the file pointer\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.tell",
									"type": {
										"text": "ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "tell"
								}
							],
							[
								{
									"ddoc": " Determines if this stream is writable.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.writable",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "writable"
								}
							]
						]
					},
					"nestedName": "FileStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "Stream",
							"typeClass": "primitive",
							"nestedName": "Stream",
							"qualifiedName": "vibe.stream.stream.Stream",
							"name": "Stream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						},
						{
							"kind": "type",
							"text": "EventedObject",
							"typeClass": "primitive",
							"nestedName": "EventedObject",
							"qualifiedName": "vibe.core.driver.EventedObject",
							"name": "EventedObject",
							"moduleName": "vibe.core.driver",
							"attributes": []
						}
					],
					"name": "FileStream"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tCreates a new directory.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "createDirectory",
					"type": {
						"text": "void(Path path)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Path",
									"qualifiedName": "vibe.inet.url.Path",
									"name": "Path",
									"moduleName": "vibe.inet.url",
									"attributes": []
								},
								"name": "path"
							}
						],
						"attributes": []
					},
					"name": "createDirectory"
				},
				{
					"ddoc": "\n\tCreates a new directory.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "createDirectory",
					"type": {
						"text": "void(string path)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "path"
							}
						],
						"attributes": []
					},
					"name": "createDirectory"
				}
			],
			[
				{
					"ddoc": "\n\tCreates and opens a temporary file for writing.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "createTempFile",
					"type": {
						"text": "FileStream()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "FileStream",
							"qualifiedName": "vibe.core.file.FileStream",
							"name": "FileStream",
							"moduleName": "vibe.core.file"
						},
						"parameters": [],
						"attributes": []
					},
					"name": "createTempFile"
				}
			],
			[
				{
					"ddoc": "\n\tChecks if a file exists\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "existsFile",
					"type": {
						"text": "bool(Path path)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Path",
									"qualifiedName": "vibe.inet.url.Path",
									"name": "Path",
									"moduleName": "vibe.inet.url",
									"attributes": []
								},
								"name": "path"
							}
						],
						"attributes": []
					},
					"name": "existsFile"
				},
				{
					"ddoc": "\n\tChecks if a file exists\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "existsFile",
					"type": {
						"text": "bool(string path)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "path"
							}
						],
						"attributes": []
					},
					"name": "existsFile"
				}
			],
			[
				{
					"ddoc": " Stores information about the specified file/directory into 'info'\n\n\tReturns false if the file does not exist.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "getFileInfo",
					"type": {
						"text": "FileInfo(Path path)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "FileInfo",
							"qualifiedName": "vibe.core.file.FileInfo",
							"name": "FileInfo",
							"moduleName": "vibe.core.file"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Path",
									"qualifiedName": "vibe.inet.url.Path",
									"name": "Path",
									"moduleName": "vibe.inet.url",
									"attributes": []
								},
								"name": "path"
							}
						],
						"attributes": []
					},
					"name": "getFileInfo"
				},
				{
					"ddoc": " Stores information about the specified file/directory into 'info'\n\n\tReturns false if the file does not exist.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "getFileInfo",
					"type": {
						"text": "FileInfo(string path)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "FileInfo",
							"qualifiedName": "vibe.core.file.FileInfo",
							"name": "FileInfo",
							"moduleName": "vibe.core.file"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "path"
							}
						],
						"attributes": []
					},
					"name": "getFileInfo"
				}
			],
			[
				{
					"ddoc": " Enumerates all files in the specified directory. \n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listDirectory",
					"type": {
						"text": "void(Path path, bool delegate(FileInfo info) del)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Path",
									"qualifiedName": "vibe.inet.url.Path",
									"name": "Path",
									"moduleName": "vibe.inet.url",
									"attributes": []
								},
								"name": "path"
							},
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "FileInfo",
												"qualifiedName": "vibe.core.file.FileInfo",
												"name": "FileInfo",
												"moduleName": "vibe.core.file",
												"attributes": []
											},
											"name": "info"
										}
									],
									"attributes": []
								},
								"name": "del"
							}
						],
						"attributes": []
					},
					"name": "listDirectory"
				},
				{
					"ddoc": " Enumerates all files in the specified directory. \n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listDirectory",
					"type": {
						"text": "void(string path, bool delegate(FileInfo info) del)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "path"
							},
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "FileInfo",
												"qualifiedName": "vibe.core.file.FileInfo",
												"name": "FileInfo",
												"moduleName": "vibe.core.file",
												"attributes": []
											},
											"name": "info"
										}
									],
									"attributes": []
								},
								"name": "del"
							}
						],
						"attributes": []
					},
					"name": "listDirectory"
				}
			],
			[
				{
					"ddoc": "\n\tMoves or renames a file.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "moveFile",
					"type": {
						"text": "void(Path from, Path to)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Path",
									"qualifiedName": "vibe.inet.url.Path",
									"name": "Path",
									"moduleName": "vibe.inet.url",
									"attributes": []
								},
								"name": "from"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Path",
									"qualifiedName": "vibe.inet.url.Path",
									"name": "Path",
									"moduleName": "vibe.inet.url",
									"attributes": []
								},
								"name": "to"
							}
						],
						"attributes": []
					},
					"name": "moveFile"
				},
				{
					"ddoc": "\n\tMoves or renames a file.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "moveFile",
					"type": {
						"text": "void(string from, string to)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "from"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "to"
							}
						],
						"attributes": []
					},
					"name": "moveFile"
				}
			],
			[
				{
					"ddoc": "\n\tOpens a file stream with the specified mode.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "openFile",
					"type": {
						"text": "FileStream(Path path, FileMode mode = cast(FileMode)0)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "FileStream",
							"qualifiedName": "vibe.core.file.FileStream",
							"name": "FileStream",
							"moduleName": "vibe.core.file"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Path",
									"qualifiedName": "vibe.inet.url.Path",
									"name": "Path",
									"moduleName": "vibe.inet.url",
									"attributes": []
								},
								"name": "path"
							},
							{
								"defaultValue": "cast(FileMode",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "FileMode",
									"qualifiedName": "vibe.core.file.FileMode",
									"name": "FileMode",
									"moduleName": "vibe.core.file",
									"attributes": []
								},
								"name": "mode"
							}
						],
						"attributes": []
					},
					"name": "openFile"
				},
				{
					"ddoc": "\n\tOpens a file stream with the specified mode.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "openFile",
					"type": {
						"text": "FileStream(string path, FileMode mode = cast(FileMode)0)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "FileStream",
							"qualifiedName": "vibe.core.file.FileStream",
							"name": "FileStream",
							"moduleName": "vibe.core.file"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "path"
							},
							{
								"defaultValue": "cast(FileMode",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "FileMode",
									"qualifiedName": "vibe.core.file.FileMode",
									"name": "FileMode",
									"moduleName": "vibe.core.file",
									"attributes": []
								},
								"name": "mode"
							}
						],
						"attributes": []
					},
					"name": "openFile"
				}
			],
			[
				{
					"ddoc": "\n\tRemoves a file\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "removeFile",
					"type": {
						"text": "void(Path path)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Path",
									"qualifiedName": "vibe.inet.url.Path",
									"name": "Path",
									"moduleName": "vibe.inet.url",
									"attributes": []
								},
								"name": "path"
							}
						],
						"attributes": []
					},
					"name": "removeFile"
				},
				{
					"ddoc": "\n\tRemoves a file\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "removeFile",
					"type": {
						"text": "void(string path)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "path"
							}
						],
						"attributes": []
					},
					"name": "removeFile"
				}
			]
		]
	},
	"name": "vibe.core.file"
},
"vibe.core.drivers.threadedfile": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\drivers\\threadedfile.d",
	"ddoc": "\n\tThread based asynchronous file I/O fallback implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
	"members": {
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "ThreadedFileStream.this",
									"type": {
										"text": "ThreadedFileStream(string path, FileMode mode)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ThreadedFileStream",
											"qualifiedName": "vibe.core.drivers.threadedfile.ThreadedFileStream",
											"name": "ThreadedFileStream",
											"moduleName": "vibe.core.drivers.threadedfile"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "FileMode",
													"qualifiedName": "vibe.core.file.FileMode",
													"name": "FileMode",
													"moduleName": "vibe.core.file",
													"attributes": []
												},
												"name": "mode"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"aliases": [
							[
								{
									"kind": "alias",
									"protection": "public",
									"nestedName": "ThreadedFileStream.write",
									"name": "write"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.acquire",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "acquire"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.close",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "close"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.dataAvailableForRead",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dataAvailableForRead"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.empty",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.fd",
									"type": {
										"text": "@property int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "fd"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.finalize",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.flush",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.isOwner",
									"type": {
										"text": "bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "isOwner"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.leastSize",
									"type": {
										"text": "const @property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.path",
									"type": {
										"text": "const @property Path()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "path"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.peek",
									"type": {
										"text": "const(ubyte)[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"const"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": []
									},
									"name": "peek"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.readable",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "readable"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.release",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "release"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.seek",
									"type": {
										"text": "void(ulong offset)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "offset"
											}
										],
										"attributes": []
									},
									"name": "seek"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.size",
									"type": {
										"text": "const @property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "size"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.tell",
									"type": {
										"text": "ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "tell"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.writable",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "writable"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ThreadedFileStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "ThreadedFileStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "FileStream",
							"typeClass": "primitive",
							"nestedName": "FileStream",
							"qualifiedName": "vibe.core.file.FileStream",
							"name": "FileStream",
							"moduleName": "vibe.core.file",
							"attributes": []
						}
					],
					"name": "ThreadedFileStream"
				}
			]
		]
	},
	"name": "vibe.core.drivers.threadedfile"
},
"vibe.core.drivers.win32": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\drivers\\win32.d",
	"ddoc": "\n\tWin32 driver implementation using I/O completion ports\n\n\tCopyright: © 2012 Sönke Ludwig\n\tAuthors: Sönke Ludwig, Leonid Kramer\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
	"members": {
	},
	"name": "vibe.core.drivers.win32"
},
"vibe.core.drivers.libevent2_tcp": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\drivers\\libevent2_tcp.d",
	"ddoc": "\n\tlibevent based driver\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
	"members": {
	},
	"name": "vibe.core.drivers.libevent2_tcp"
},
"vibe.crypto.ssl": {
	"kind": "module",
	"file": "..\\source\\vibe\\crypto\\ssl.d",
	"ddoc": "\n\tContains the SSLContext class used for SSL based network connections.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SSLVersion.SSLv23",
							"name": "SSLv23"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SSLVersion.SSLv3",
							"name": "SSLv3"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SSLVersion.TLSv1",
							"name": "TLSv1"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SSLVersion.DTLSv1",
							"name": "DTLSv1"
						}
					],
					"nestedName": "SSLVersion",
					"name": "SSLVersion",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"classes": [
			[
				{
					"ddoc": "\n\n\n\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "SslContext.this",
									"type": {
										"text": "SslContext(string cert_file, string key_file, SSLVersion ver = cast(SSLVersion)0)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SslContext",
											"qualifiedName": "vibe.crypto.ssl.SslContext",
											"name": "SslContext",
											"moduleName": "vibe.crypto.ssl"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "cert_file"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key_file"
											},
											{
												"defaultValue": "cast(SSLVersion",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "SSLVersion",
													"qualifiedName": "vibe.crypto.ssl.SSLVersion",
													"name": "SSLVersion",
													"moduleName": "vibe.crypto.ssl",
													"attributes": []
												},
												"name": "ver"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "SslContext.this",
									"type": {
										"text": "SslContext(SSLVersion ver = cast(SSLVersion)0)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SslContext",
											"qualifiedName": "vibe.crypto.ssl.SslContext",
											"name": "SslContext",
											"moduleName": "vibe.crypto.ssl"
										},
										"parameters": [
											{
												"defaultValue": "cast(SSLVersion",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "SSLVersion",
													"qualifiedName": "vibe.crypto.ssl.SSLVersion",
													"name": "SSLVersion",
													"moduleName": "vibe.crypto.ssl",
													"attributes": []
												},
												"name": "ver"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SslContext.createClientCtx",
									"type": {
										"text": "ssl_st*()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "pointer",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ssl_st",
												"qualifiedName": "ssl_st",
												"name": "ssl_st",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": []
									},
									"name": "createClientCtx"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "SslContext",
					"name": "SslContext"
				}
			]
		]
	},
	"name": "vibe.crypto.ssl"
},
"vibe.http.server": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\server.d",
	"ddoc": "\n\tA HTTP 1.1/1.0 server implementation.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
	"members": {
		"aliases": [
			[
				{
					"ddoc": " Delegate type used for user defined error page generator callbacks.\n",
					"kind": "alias",
					"protection": "public",
					"nestedName": "HttpServerErrorPageHandler",
					"name": "HttpServerErrorPageHandler"
				}
			],
			[
				{
					"ddoc": "\n\n Delegate based request handler\n",
					"kind": "alias",
					"protection": "public",
					"nestedName": "HttpServerRequestDelegate",
					"name": "HttpServerRequestDelegate"
				}
			],
			[
				{
					"ddoc": " Static function based request handler\n",
					"kind": "alias",
					"protection": "public",
					"nestedName": "HttpServerRequestFunction",
					"name": "HttpServerRequestFunction"
				}
			]
		],
		"enums": [
			[
				{
					"ddoc": "\n\tSpecifies optional features of the HTTP server.\n\n\tDisabling unneeded features can speed up the server or reduce its memory usage.\n",
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.None",
							"name": "None"
						},
						{
							"ddoc": " Fills the .path, .queryString fields in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseURL",
							"name": "ParseURL"
						},
						{
							"ddoc": " Fills the .query field in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseQueryString",
							"name": "ParseQueryString"
						},
						{
							"ddoc": " Fills the .form field in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseFormBody",
							"name": "ParseFormBody"
						},
						{
							"ddoc": " Fills the .json field in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseJsonBody",
							"name": "ParseJsonBody"
						},
						{
							"ddoc": " Enables use of the .nextPart() method in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseMultiPartBody",
							"name": "ParseMultiPartBody"
						},
						{
							"ddoc": " Fills the .cookies field in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseCookies",
							"name": "ParseCookies"
						}
					],
					"nestedName": "HttpServerOption",
					"name": "HttpServerOption",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"classes": [
			[
				{
					"ddoc": " Aggregates all information about an HTTP error status.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"variables": [
							[
								{
									"ddoc": " The HTTP status code\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerErrorInfo.code",
									"type": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									},
									"name": "code"
								}
							],
							[
								{
									"ddoc": " Extended error message with debug information such as a stack trace\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerErrorInfo.debugMessage",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "debugMessage"
								}
							],
							[
								{
									"ddoc": " The error exception, if any\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerErrorInfo.exception",
									"type": {
										"kind": "type",
										"text": "object.Throwable",
										"typeClass": "primitive",
										"nestedName": "object.Throwable",
										"qualifiedName": "object.Throwable",
										"name": "Throwable",
										"moduleName": "",
										"attributes": []
									},
									"name": "exception"
								}
							],
							[
								{
									"ddoc": " The error message\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerErrorInfo.message",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "message"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpServerErrorInfo",
					"name": "HttpServerErrorInfo"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a HTTP request as received by the server side.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpServerRequest.this",
									"type": {
										"text": "HttpServerRequest()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpServerRequest",
											"qualifiedName": "vibe.http.server.HttpServerRequest",
											"name": "HttpServerRequest",
											"moduleName": "vibe.http.server"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerRequest.nextPart",
									"type": {
										"text": "MultiPart()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MultiPart",
											"qualifiedName": "vibe.http.common.MultiPart",
											"name": "MultiPart",
											"moduleName": "vibe.http.common"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "nextPart"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerRequest.rootDir",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "rootDir"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerRequest.timeCreated",
									"type": {
										"text": "@property SysTime()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SysTime",
											"qualifiedName": "SysTime",
											"name": "SysTime",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "timeCreated"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.bodyReader",
									"type": {
										"kind": "type",
										"text": "vibe.stream.stream.InputStream",
										"typeClass": "primitive",
										"nestedName": "InputStream",
										"qualifiedName": "vibe.stream.stream.InputStream",
										"name": "InputStream",
										"moduleName": "vibe.stream.stream",
										"attributes": []
									},
									"name": "bodyReader"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.cookies",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "string[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "cookies"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.data",
									"type": {
										"kind": "type",
										"text": "ubyte[]",
										"typeClass": "array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ubyte",
											"qualifiedName": "ubyte",
											"name": "ubyte",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "data"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.files",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "FilePart[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "FilePart",
											"qualifiedName": "vibe.http.form.FilePart",
											"name": "FilePart",
											"moduleName": "vibe.http.form"
										},
										"attributes": []
									},
									"name": "files"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.form",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "string[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "form"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.json",
									"type": {
										"kind": "type",
										"text": "Json",
										"typeClass": "primitive",
										"nestedName": "Json",
										"qualifiedName": "vibe.data.json.Json",
										"name": "Json",
										"moduleName": "vibe.data.json",
										"attributes": []
									},
									"name": "json"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.params",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "string[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "params"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.password",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "password"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.path",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "path"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.peer",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "peer"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.query",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "string[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "query"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.queryString",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "queryString"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.session",
									"type": {
										"kind": "type",
										"text": "vibe.http.session.Session",
										"typeClass": "primitive",
										"nestedName": "Session",
										"qualifiedName": "vibe.http.session.Session",
										"name": "Session",
										"moduleName": "vibe.http.session",
										"attributes": []
									},
									"name": "session"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.username",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "username"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "HttpRequest",
						"typeClass": "primitive",
						"nestedName": "HttpRequest",
						"qualifiedName": "vibe.http.common.HttpRequest",
						"name": "HttpRequest",
						"moduleName": "vibe.http.common",
						"attributes": []
					},
					"nestedName": "HttpServerRequest",
					"name": "HttpServerRequest"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a HTTP response as sent from the server side.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpServerResponse.this",
									"type": {
										"text": "HttpServerResponse(Stream conn, HttpServerSettings settings, Allocator req_alloc)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpServerResponse",
											"qualifiedName": "vibe.http.server.HttpServerResponse",
											"name": "HttpServerResponse",
											"moduleName": "vibe.http.server"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Stream",
													"qualifiedName": "vibe.stream.stream.Stream",
													"name": "Stream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "conn"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerSettings",
													"qualifiedName": "vibe.http.server.HttpServerSettings",
													"name": "HttpServerSettings",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "settings"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Allocator",
													"qualifiedName": "vibe.utils.memory.Allocator",
													"name": "Allocator",
													"moduleName": "vibe.utils.memory",
													"attributes": []
												},
												"name": "req_alloc"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"ddoc": " A stream for writing the body of the HTTP response.\n\n\t\tNote that after 'bodyWriter' has been accessed for the first time, it\n\t\tis not allowed to change any header or the status code of the response.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.bodyWriter",
									"type": {
										"text": "@property OutputStream()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "OutputStream",
											"qualifiedName": "vibe.stream.stream.OutputStream",
											"name": "OutputStream",
											"moduleName": "vibe.stream.stream"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "bodyWriter"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.bytesWritten",
									"type": {
										"text": "@property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "bytesWritten"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.headerWritten",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "headerWritten"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.isHeadResponse",
									"type": {
										"text": "const bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "isHeadResponse"
								}
							],
							[
								{
									"ddoc": " Sends a redirect request to the client.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.redirect",
									"type": {
										"text": "void(string url, int status = 302)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url"
											},
											{
												"defaultValue": "302",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "status"
											}
										],
										"attributes": []
									},
									"name": "redirect"
								}
							],
							[
								{
									"ddoc": "\n\t\tCompatibility version of render() that takes a list of explicit names and types instead\n\t\tof variable aliases.\n\n\t\tThis version of render() works around a compiler bug in DMD (Issue 2962). You should use\n\t\tthis method instead of render() as long as this bug is not fixed.\n\n\t\tNote that the variables are copied and not referenced inside of the template - any\n\t\tmodification you do on them from within the template will get lost.\n\n\t\tExamples:\n\t\t\t---\n\t\t\tstring title = \"Hello, World!\";\n\t\t\tint pageNumber = 1;\n\t\t\tres.renderCompat!(\"mytemplate.jd\",\n\t\t\t\tstring, \"title\",\n\t\t\t\tint, \"pageNumber\")\n\t\t\t\t(Variant(title), Variant(pageNumber));\n\t\t\t---\n\t\n",
									"kind": "function",
									"templateName": "renderCompat(string template_file,TYPES_AND_NAMES...)",
									"nestedName": "HttpServerResponse.renderCompat",
									"type": {
										"text": "void(Variant[] args...)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Variant",
														"qualifiedName": "Variant",
														"name": "Variant",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "args..."
											}
										],
										"attributes": []
									},
									"name": "renderCompat"
								}
							],
							[
								{
									"ddoc": " Sets the specified cookie value.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.setCookie",
									"type": {
										"text": "Cookie(string name, string value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "setCookie"
								}
							],
							[
								{
									"ddoc": "\n\t\tInitiates a new session.\n\n\t\tThe session is stored in the SessionStore that was specified when\n\t\tcreating the server. Depending on this, the session can be persistent\n\t\tor temporary and specific to this server instance.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.startSession",
									"type": {
										"text": "Session()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Session",
											"qualifiedName": "vibe.http.session.Session",
											"name": "Session",
											"moduleName": "vibe.http.session"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "startSession"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.switchProtocol",
									"type": {
										"text": "Stream(string protocol)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Stream",
											"qualifiedName": "vibe.stream.stream.Stream",
											"name": "Stream",
											"moduleName": "vibe.stream.stream"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "protocol"
											}
										],
										"attributes": []
									},
									"name": "switchProtocol"
								}
							],
							[
								{
									"ddoc": "\n\t\tTerminates the current session (if any).\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.terminateSession",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "terminateSession"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.timeFinalized",
									"type": {
										"text": "@property SysTime()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SysTime",
											"qualifiedName": "SysTime",
											"name": "SysTime",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "timeFinalized"
								}
							],
							[
								{
									"ddoc": " Writes the hole body of the response at once.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.writeBody",
									"type": {
										"text": "void(const(ubyte[]) data, string content_type = null)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "content_type"
											}
										],
										"attributes": []
									},
									"name": "writeBody"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.writeBody",
									"type": {
										"text": "void(string data, string content_type = \"text/plain\")",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "text/plain\"",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "content_type"
											}
										],
										"attributes": []
									},
									"name": "writeBody"
								}
							],
							[
								{
									"ddoc": " Writes a JSON message with the specified status\n",
									"kind": "function",
									"templateName": "writeJsonBody(T)",
									"nestedName": "HttpServerResponse.writeJsonBody",
									"type": {
										"text": "void(T data, int status = HttpStatus.OK)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "HttpStatus.OK",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "status"
											}
										],
										"attributes": []
									},
									"name": "writeJsonBody"
								}
							],
							[
								{
									"ddoc": " Writes the response with no body.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.writeVoidBody",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "writeVoidBody"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "HttpResponse",
						"typeClass": "primitive",
						"nestedName": "HttpResponse",
						"qualifiedName": "vibe.http.common.HttpResponse",
						"name": "HttpResponse",
						"moduleName": "vibe.http.common",
						"attributes": []
					},
					"nestedName": "HttpServerResponse",
					"name": "HttpServerResponse"
				}
			],
			[
				{
					"ddoc": "\n\tContains all settings for configuring a basic HTTP server.\n\n\tThe defaults are sufficient for most normal uses.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerSettings.dup",
									"type": {
										"text": "@property HttpServerSettings()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpServerSettings",
											"qualifiedName": "vibe.http.server.HttpServerSettings",
											"name": "HttpServerSettings",
											"moduleName": "vibe.http.server"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dup"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.accessLogFile",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "accessLogFile"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.accessLogFormat",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "accessLogFormat"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.accessLogToConsole",
									"type": {
										"kind": "type",
										"text": "bool",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": "",
										"attributes": []
									},
									"name": "accessLogToConsole"
								}
							],
							[
								{
									"ddoc": " The interfaces on which the HTTP server is listening.\n\n\t\tBy default, the server will listen on all IPv4 and IPv6 interfaces.\n\t\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.bindAddresses",
									"type": {
										"kind": "type",
										"text": "string[]",
										"typeClass": "array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "bindAddresses"
								}
							],
							[
								{
									"ddoc": " Sets a custom handler for displaying error pages for HTTP errors\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.errorPageHandler",
									"type": {
										"text": "void delegate(HttpServerRequest req, HttpServerResponse res, HttpServerErrorInfo error)",
										"typeClass": "delegate",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerRequest",
													"qualifiedName": "vibe.http.server.HttpServerRequest",
													"name": "HttpServerRequest",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "req"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerResponse",
													"qualifiedName": "vibe.http.server.HttpServerResponse",
													"name": "HttpServerResponse",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "res"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerErrorInfo",
													"qualifiedName": "vibe.http.server.HttpServerErrorInfo",
													"name": "HttpServerErrorInfo",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "error"
											}
										],
										"attributes": []
									},
									"name": "errorPageHandler"
								}
							],
							[
								{
									"ddoc": " Determines the server host name.\n\n\t\tIf multiple servers are listening on the same port, the host name will determine which one\n\t\tgets a request.\n\t\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.hostName",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "hostName"
								}
							],
							[
								{
									"ddoc": " Maximum time between two request on a keep-alive connection\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.keepAliveTimeout",
									"type": {
										"kind": "type",
										"text": "Duration",
										"typeClass": "primitive",
										"nestedName": "Duration",
										"qualifiedName": "Duration",
										"name": "Duration",
										"moduleName": "",
										"attributes": []
									},
									"name": "keepAliveTimeout"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.maxRequestHeaderCount",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "maxRequestHeaderCount"
								}
							],
							[
								{
									"ddoc": "\tMaximum number of transferred bytes for the request header. This includes the request line \n the url and all headers. \n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.maxRequestHeaderSize",
									"type": {
										"kind": "type",
										"text": "ulong",
										"typeClass": "primitive",
										"nestedName": "ulong",
										"qualifiedName": "ulong",
										"name": "ulong",
										"moduleName": "",
										"attributes": []
									},
									"name": "maxRequestHeaderSize"
								}
							],
							[
								{
									"ddoc": " Maximum number of transferred bytes per request after which the connection is closed with\n an error; not supported yet\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.maxRequestSize",
									"type": {
										"kind": "type",
										"text": "ulong",
										"typeClass": "primitive",
										"nestedName": "ulong",
										"qualifiedName": "ulong",
										"name": "ulong",
										"moduleName": "",
										"attributes": []
									},
									"name": "maxRequestSize"
								}
							],
							[
								{
									"ddoc": " Time of a request after which the connection is closed with an error; not supported yet\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.maxRequestTime",
									"type": {
										"kind": "type",
										"text": "Duration",
										"typeClass": "primitive",
										"nestedName": "Duration",
										"qualifiedName": "Duration",
										"name": "Duration",
										"moduleName": "",
										"attributes": []
									},
									"name": "maxRequestTime"
								}
							],
							[
								{
									"ddoc": " Configures optional features of the HTTP server\n\n\t\tDisabling unneeded features can improve performance or reduce the server\n\t\tload in case of invalid or unwanted requests (DoS).\n\t\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.options",
									"type": {
										"kind": "type",
										"text": "HttpServerOption",
										"typeClass": "primitive",
										"nestedName": "HttpServerOption",
										"qualifiedName": "vibe.http.server.HttpServerOption",
										"name": "HttpServerOption",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "options"
								}
							],
							[
								{
									"ddoc": " The port on which the HTTP server is listening.\n\n\t\tThe default value is 80. If you are running a SSL enabled server you may want to set this\n\t\tto 443 instead.\n\t\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.port",
									"type": {
										"kind": "type",
										"text": "ushort",
										"typeClass": "primitive",
										"nestedName": "ushort",
										"qualifiedName": "ushort",
										"name": "ushort",
										"moduleName": "",
										"attributes": []
									},
									"name": "port"
								}
							],
							[
								{
									"ddoc": "\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.serverString",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "serverString"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.sessionIdCookie",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "sessionIdCookie"
								}
							],
							[
								{
									"ddoc": " Session management is enabled if a session store instance is provided\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.sessionStore",
									"type": {
										"kind": "type",
										"text": "vibe.http.session.SessionStore",
										"typeClass": "primitive",
										"nestedName": "SessionStore",
										"qualifiedName": "vibe.http.session.SessionStore",
										"name": "SessionStore",
										"moduleName": "vibe.http.session",
										"attributes": []
									},
									"name": "sessionStore"
								}
							],
							[
								{
									"ddoc": " If set, a HTTPS server will be started instead of plain HTTP\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.sslCertFile",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "sslCertFile"
								},
								{
									"ddoc": " If set, a HTTPS server will be started instead of plain HTTP\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.sslKeyFile",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "sslKeyFile"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpServerSettings",
					"name": "HttpServerSettings"
				}
			],
			[
				{
					"ddoc": "\n\tThrowing this exception from within a request handler will produce a matching error page.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpStatusException.this",
									"type": {
										"text": "HttpStatusException(int status, string message = null, Throwable next = null, string file = __FILE__, int line = __LINE__)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpStatusException",
											"qualifiedName": "vibe.http.server.HttpStatusException",
											"name": "HttpStatusException",
											"moduleName": "vibe.http.server"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "status"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "message"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Throwable",
													"qualifiedName": "Throwable",
													"name": "Throwable",
													"moduleName": "",
													"attributes": []
												},
												"name": "next"
											},
											{
												"defaultValue": "__FILE__",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "file"
											},
											{
												"defaultValue": "__LINE__",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "line"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpStatusException.status",
									"type": {
										"text": "const @property int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "status"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Exception",
						"typeClass": "primitive",
						"nestedName": "Exception",
						"qualifiedName": "Exception",
						"name": "Exception",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpStatusException",
					"name": "HttpStatusException"
				}
			]
		],
		"interfaces": [
			[
				{
					"ddoc": " Interface for class based request handlers\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Handles incoming HTTP requests\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "IHttpServerRequestHandler.handleRequest",
									"type": {
										"text": "void(HttpServerRequest req, HttpServerResponse res)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerRequest",
													"qualifiedName": "vibe.http.server.HttpServerRequest",
													"name": "HttpServerRequest",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "req"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerResponse",
													"qualifiedName": "vibe.http.server.HttpServerResponse",
													"name": "HttpServerResponse",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "res"
											}
										],
										"attributes": []
									},
									"name": "handleRequest"
								}
							]
						]
					},
					"nestedName": "IHttpServerRequestHandler",
					"name": "IHttpServerRequestHandler"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"templateName": "formatAlloc(ARGS...)",
					"nestedName": "formatAlloc",
					"type": {
						"text": "string(Allocator alloc, string fmt, ARGS args)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Allocator",
									"qualifiedName": "vibe.utils.memory.Allocator",
									"name": "Allocator",
									"moduleName": "vibe.utils.memory",
									"attributes": []
								},
								"name": "alloc"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ARGS",
									"qualifiedName": "ARGS",
									"name": "ARGS",
									"moduleName": "",
									"attributes": []
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "formatAlloc"
				}
			],
			[
				{
					"ddoc": "\n\n\n\tStarts a HTTP server listening on the specified port.\n\n\t'request_task' will be called for each HTTP request that is made. The\n\t'res' parameter of the callback then has to be filled with the response\n\tdata.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n\n\trequest_task can be either HttpServerRequestDelegate/HttpServerRequestFunction\n\tor a class/struct with a member function 'handleRequest' that has the same\n\tsignature as HttpServerRequestDelegate/Function.\n\n\tNote that if the application has been started with the --disthost command line\n\tswitch, listenHttp() will automatically listen on the specified VibeDist host\n\tinstead of locally. This allows for a seemless switch from single-host to\n\tmulti-host scenarios without changing the code. If you need to listen locally,\n\tuse listenHttpPlain() instead.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttp",
					"type": {
						"text": "void(HttpServerSettings settings, void delegate(HttpServerRequest req, HttpServerResponse res) request_handler)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerRequest",
												"qualifiedName": "vibe.http.server.HttpServerRequest",
												"name": "HttpServerRequest",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "req"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerResponse",
												"qualifiedName": "vibe.http.server.HttpServerResponse",
												"name": "HttpServerResponse",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "res"
										}
									],
									"attributes": []
								},
								"name": "request_handler"
							}
						],
						"attributes": []
					},
					"name": "listenHttp"
				},
				{
					"ddoc": "\n\n\n\tStarts a HTTP server listening on the specified port.\n\n\t'request_task' will be called for each HTTP request that is made. The\n\t'res' parameter of the callback then has to be filled with the response\n\tdata.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n\n\trequest_task can be either HttpServerRequestDelegate/HttpServerRequestFunction\n\tor a class/struct with a member function 'handleRequest' that has the same\n\tsignature as HttpServerRequestDelegate/Function.\n\n\tNote that if the application has been started with the --disthost command line\n\tswitch, listenHttp() will automatically listen on the specified VibeDist host\n\tinstead of locally. This allows for a seemless switch from single-host to\n\tmulti-host scenarios without changing the code. If you need to listen locally,\n\tuse listenHttpPlain() instead.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttp",
					"type": {
						"text": "void(HttpServerSettings settings, void function(HttpServerRequest req, HttpServerResponse res) request_handler)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"typeClass": "function",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerRequest",
												"qualifiedName": "vibe.http.server.HttpServerRequest",
												"name": "HttpServerRequest",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "req"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerResponse",
												"qualifiedName": "vibe.http.server.HttpServerResponse",
												"name": "HttpServerResponse",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "res"
										}
									],
									"attributes": []
								},
								"name": "request_handler"
							}
						],
						"attributes": []
					},
					"name": "listenHttp"
				},
				{
					"ddoc": "\n\n\n\tStarts a HTTP server listening on the specified port.\n\n\t'request_task' will be called for each HTTP request that is made. The\n\t'res' parameter of the callback then has to be filled with the response\n\tdata.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n\n\trequest_task can be either HttpServerRequestDelegate/HttpServerRequestFunction\n\tor a class/struct with a member function 'handleRequest' that has the same\n\tsignature as HttpServerRequestDelegate/Function.\n\n\tNote that if the application has been started with the --disthost command line\n\tswitch, listenHttp() will automatically listen on the specified VibeDist host\n\tinstead of locally. This allows for a seemless switch from single-host to\n\tmulti-host scenarios without changing the code. If you need to listen locally,\n\tuse listenHttpPlain() instead.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttp",
					"type": {
						"text": "void(HttpServerSettings settings, IHttpServerRequestHandler request_handler)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "IHttpServerRequestHandler",
									"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
									"name": "IHttpServerRequestHandler",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "request_handler"
							}
						],
						"attributes": []
					},
					"name": "listenHttp"
				}
			],
			[
				{
					"ddoc": "\n\tStarts a HTTP server listening on the specified port.\n\n\tThis is the same as listenHttp() except that it does not use a VibeDist host for\n\tremote listening, even if specified on the command line.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttpPlain",
					"type": {
						"text": "void(HttpServerSettings settings, void delegate(HttpServerRequest req, HttpServerResponse res) request_handler)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerRequest",
												"qualifiedName": "vibe.http.server.HttpServerRequest",
												"name": "HttpServerRequest",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "req"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerResponse",
												"qualifiedName": "vibe.http.server.HttpServerResponse",
												"name": "HttpServerResponse",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "res"
										}
									],
									"attributes": []
								},
								"name": "request_handler"
							}
						],
						"attributes": []
					},
					"name": "listenHttpPlain"
				}
			],
			[
				{
					"kind": "function",
					"ddoc": "\n\tRenders the given template and makes all ALIASES available to the template.\n\n\tThis currently suffers from multiple DMD bugs - use renderCompat() instead for the time being.\n\n\tYou can call this function as a member of HttpServerResponse using D's uniform function\n\tcall syntax.\n\n\tExamples:\n\t\t---\n\t\tstring title = \"Hello, World!\";\n\t\tint pageNumber = 1;\n\t\tres.render!(\"mytemplate.jd\", title, pageNumber);\n\t\t---\n",
					"templateName": "render(string template_file,ALIASES...)",
					"nestedName": "render",
					"type": {
						"text": "void(HttpServerResponse res)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerResponse",
									"qualifiedName": "vibe.http.server.HttpServerResponse",
									"name": "HttpServerResponse",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "res"
							}
						],
						"attributes": []
					},
					"name": "render"
				}
			],
			[
				{
					"ddoc": "\n\tSets a VibeDist host to register with.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "setVibeDistHost",
					"type": {
						"text": "void(string host, ushort port)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "host"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							}
						],
						"attributes": []
					},
					"name": "setVibeDistHost"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "startListening",
					"type": {
						"text": "void()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "startListening"
				}
			],
			[
				{
					"ddoc": "\n\tProvides a HTTP request handler that responds with a static redirection to the specified URL.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "staticRedirect",
					"type": {
						"text": "void delegate(HttpServerRequest req, HttpServerResponse res)(string url)",
						"typeClass": "function",
						"returnType": {
							"typeClass": "delegate",
							"returnType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "void",
								"qualifiedName": "void",
								"name": "void",
								"moduleName": ""
							},
							"parameters": [
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerRequest",
										"qualifiedName": "vibe.http.server.HttpServerRequest",
										"name": "HttpServerRequest",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "req"
								},
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerResponse",
										"qualifiedName": "vibe.http.server.HttpServerResponse",
										"name": "HttpServerResponse",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "res"
								}
							]
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "url"
							}
						],
						"attributes": []
					},
					"name": "staticRedirect"
				}
			],
			[
				{
					"kind": "function",
					"ddoc": "\n\tProvides a HTTP request handler that responds with a static Diet template.\n",
					"templateName": "staticTemplate(string template_file)",
					"nestedName": "staticTemplate",
					"type": {
						"text": "HttpServerRequestDelegate()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "HttpServerRequestDelegate",
							"qualifiedName": "HttpServerRequestDelegate",
							"name": "HttpServerRequestDelegate",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "staticTemplate"
				}
			]
		]
	},
	"name": "vibe.http.server"
},
"vibe.inet.message": {
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\message.d",
	"ddoc": "\n\tInternet message handling according to RFC822/RFC5322\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"aliases": [
			[
				{
					"kind": "alias",
					"protection": "public",
					"nestedName": "InetHeaderMap",
					"name": "InetHeaderMap"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "parseRFC822DateTimeString",
					"type": {
						"text": "SysTime(string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "SysTime",
							"qualifiedName": "SysTime",
							"name": "SysTime",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "parseRFC822DateTimeString"
				}
			],
			[
				{
					"ddoc": "\n\tParses an internet header according to RFC5322 (with RFC822 compatibility).\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "parseRfc5322Header",
					"type": {
						"text": "void(InputStream input, ref StrMapCI dst, uint max_line_length = cast(uint)1000, Allocator alloc = defaultAllocator())",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "InputStream",
									"qualifiedName": "vibe.stream.stream.InputStream",
									"name": "InputStream",
									"moduleName": "vibe.stream.stream",
									"attributes": []
								},
								"name": "input"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "StrMapCI",
									"qualifiedName": "vibe.http.common.StrMapCI",
									"name": "StrMapCI",
									"moduleName": "vibe.http.common",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"defaultValue": "cast(uint",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "uint",
									"qualifiedName": "uint",
									"name": "uint",
									"moduleName": "",
									"attributes": []
								},
								"name": "max_line_length"
							}
						],
						"attributes": []
					},
					"name": "parseRfc5322Header"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "toRFC822DateString",
					"type": {
						"text": "string(SysTime time)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "SysTime",
									"qualifiedName": "SysTime",
									"name": "SysTime",
									"moduleName": "",
									"attributes": []
								},
								"name": "time"
							}
						],
						"attributes": []
					},
					"name": "toRFC822DateString"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "toRFC822DateTimeString",
					"type": {
						"text": "string(SysTime time)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "SysTime",
									"qualifiedName": "SysTime",
									"name": "SysTime",
									"moduleName": "",
									"attributes": []
								},
								"name": "time"
							}
						],
						"attributes": []
					},
					"name": "toRFC822DateTimeString"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "toRFC822TimeString",
					"type": {
						"text": "string(SysTime time)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "SysTime",
									"qualifiedName": "SysTime",
									"name": "SysTime",
									"moduleName": "",
									"attributes": []
								},
								"name": "time"
							}
						],
						"attributes": []
					},
					"name": "toRFC822TimeString"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "writeDecimal(R)",
					"nestedName": "writeDecimal",
					"type": {
						"text": "void(ref R dst, uint n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "uint",
									"qualifiedName": "uint",
									"name": "uint",
									"moduleName": "",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "writeDecimal"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "writeDecimal2(R)",
					"nestedName": "writeDecimal2",
					"type": {
						"text": "void(ref R dst, uint n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "uint",
									"qualifiedName": "uint",
									"name": "uint",
									"moduleName": "",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "writeDecimal2"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "writeRFC822DateString(R)",
					"nestedName": "writeRFC822DateString",
					"type": {
						"text": "void(ref R dst, SysTime time)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "SysTime",
									"qualifiedName": "SysTime",
									"name": "SysTime",
									"moduleName": "",
									"attributes": []
								},
								"name": "time"
							}
						],
						"attributes": []
					},
					"name": "writeRFC822DateString"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "writeRFC822DateTimeString(R)",
					"nestedName": "writeRFC822DateTimeString",
					"type": {
						"text": "void(ref R dst, SysTime time)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "SysTime",
									"qualifiedName": "SysTime",
									"name": "SysTime",
									"moduleName": "",
									"attributes": []
								},
								"name": "time"
							}
						],
						"attributes": []
					},
					"name": "writeRFC822DateTimeString"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "writeRFC822TimeString(R)",
					"nestedName": "writeRFC822TimeString",
					"type": {
						"text": "void(ref R dst, SysTime time)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "SysTime",
									"qualifiedName": "SysTime",
									"name": "SysTime",
									"moduleName": "",
									"attributes": []
								},
								"name": "time"
							}
						],
						"attributes": []
					},
					"name": "writeRFC822TimeString"
				}
			]
		]
	},
	"name": "vibe.inet.message"
},
"vibe.core.args": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\args.d",
	"ddoc": "\n\tParsing of command line arguments.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tProcesses the command line arguments passed to the application.\n\n\tAny argument that matches a vibe supported command switch is removed from the 'args' array.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "processCommandLineArgs",
					"type": {
						"text": "void(ref string[] args)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"attributes": [
										"ref"
									]
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "processCommandLineArgs"
				}
			]
		]
	},
	"name": "vibe.core.args"
},
"vibe.db.mongo.db": {
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\db.d",
	"ddoc": "\n\tMongoDB class doing connection management.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\tRepresents a single remote MongoDB.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " See $(LINK http://www.mongodb.org/display/DOCS/fsync+Command)\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoDB.fsync",
									"type": {
										"text": "Bson(string db, bool async = false)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "db"
											},
											{
												"defaultValue": "false",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "async"
											}
										],
										"attributes": []
									},
									"name": "fsync"
								}
							],
							[
								{
									"ddoc": "\n Return: MongoCollection for the given database and collecting specified.\n\n If a default database has been set in the MongoClientSettings it is NOT used here.\n The full database.collection path must be specified.\n\n Example:\n ---\n auto col = db.getCollection(\"mydb.mycollection\");\n ---\n\n The opIndex function should be used to get a relative collection name where the\n default database is taken into consideration.\n\n Most user code should use opIndex.\n\t \n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoDB.getCollection",
									"type": {
										"text": "MongoCollection(string db_and_col)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoCollection",
											"qualifiedName": "vibe.db.mongo.collection.MongoCollection",
											"name": "MongoCollection",
											"moduleName": "vibe.db.mongo.collection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "db_and_col"
											}
										],
										"attributes": []
									},
									"name": "getCollection"
								}
							],
							[
								{
									"ddoc": " See $(LINK http://www.mongodb.org/display/DOCS/getLastError+Command) \n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoDB.getLastError",
									"type": {
										"text": "Bson(string db)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "db"
											}
										],
										"attributes": []
									},
									"name": "getLastError"
								}
							],
							[
								{
									"ddoc": " See $(LINK http://www.mongodb.org/display/DOCS/getLog+Command)\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoDB.getLog",
									"type": {
										"text": "Bson(string db, string mask)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "db"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "mask"
											}
										],
										"attributes": []
									},
									"name": "getLog"
								}
							],
							[
								{
									"ddoc": "\n\t\tAccesses the collections inside this DB.\n\n\t \tExamples:\n\t \t---\n\t \tauto db = connectMongoDB(\"mongodb://localhost/mydatabase\");\n\t \tauto col = db[\"mycollection\"];\n\n\t \tauto db = connectMongoDB(\"mongodb://localhost\");\n\t \tauto col = db[\"mydatabase.mycollection\"];\n\t \t---\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoDB.opIndex",
									"type": {
										"text": "MongoCollection(string name)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoCollection",
											"qualifiedName": "vibe.db.mongo.collection.MongoCollection",
											"name": "MongoCollection",
											"moduleName": "vibe.db.mongo.collection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											}
										],
										"attributes": []
									},
									"name": "opIndex"
								}
							],
							[
								{
									"ddoc": "\n\t\tRuns a command on the specified database.\n\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Commands)\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoDB.runCommand",
									"type": {
										"text": "Bson(string db, Bson command_and_options)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "db"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "command_and_options"
											}
										],
										"attributes": []
									},
									"name": "runCommand"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MongoDB",
					"name": "MongoDB"
				}
			]
		]
	},
	"name": "vibe.db.mongo.db"
},
"vibe.http.rest": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\rest.d",
	"ddoc": "\n\tAutomatic REST interface and client code generation facilities.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"ddoc": "\n\tDetermines the naming convention of an identifier.\n",
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"ddoc": " Special value for free-style conventions\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "MethodStyle.Unaltered",
							"name": "Unaltered"
						},
						{
							"ddoc": " camelCaseNaming\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "MethodStyle.CamelCase",
							"name": "CamelCase"
						},
						{
							"ddoc": " PascalCaseNaming\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "MethodStyle.PascalCase",
							"name": "PascalCase"
						},
						{
							"ddoc": " lowercasenaming\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "MethodStyle.LowerCase",
							"name": "LowerCase"
						},
						{
							"ddoc": " UPPERCASENAMING\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "MethodStyle.UpperCase",
							"name": "UpperCase"
						},
						{
							"ddoc": " lower_case_naming\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "MethodStyle.LowerUnderscored",
							"name": "LowerUnderscored"
						},
						{
							"ddoc": " UPPER_CASE_NAMING\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "MethodStyle.UpperUnderscored",
							"name": "UpperUnderscored"
						}
					],
					"nestedName": "MethodStyle",
					"name": "MethodStyle",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"classes": [
			[
				{
					"ddoc": "\n\tImplements the given interface by forwarding all public methods to a REST server.\n\n\tThe server must talk the same protocol as registerRestInterface() generates. Be sure to set\n\tthe matching method style for this. The RestInterfaceClient class will derive from the\n\tinterface that is passed as a template argument. It can be used as a drop-in replacement\n\tof the real implementation of the API this way.\n\n\tExamples:\n\n\t\tAn example client that accesses the API defined in the registerRestInterface() example:\n\n\t\t---\n\t\timport vibe.d;\n\n\t\tinterface IMyApi {\n\t\t\tstring getStatus();\n\n\t\t\t@property string greeting();\n\t\t\t@property void greeting(string text);\n\n\t\t\tvoid addNewUser(string name);\n\t\t\t@property string[] users();\n\t\t\tstring[] index();\n\t\t\tstring getName(int id);\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto api = new RestInterfaceClient!IMyApi(\"http://127.0.0.1/api/\");\n\n\t\t\tlogInfo(\"Status: %s\", api.getStatus());\n\t\t\tapi.greeting = \"Hello, World!\";\n\t\t\tlogInfo(\"Greeting message: %s\", api.greeting);\n\t\t\tapi.addNewUser(\"Peter\");\n\t\t\tapi.addNewUser(\"Igor\");\n\t\t\tlogInfo(\"Users: %s\", api.users);\n\t\t}\n\t\t---\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"classes": [
							[
								{
									"kind": "class",
									"protection": "public",
									"members": {
										"constructors": [
											[
												{
													"kind": "constructor",
													"nestedName": "RestInterfaceClient(I).RestInterfaceClient.this",
													"type": {
														"text": "(string base_url, MethodStyle style = MethodStyle.LowerUnderscored)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "",
															"qualifiedName": "",
															"name": "constructor",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "string",
																	"qualifiedName": "string",
																	"name": "string",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "base_url"
															},
															{
																"defaultValue": "MethodStyle.LowerUnderscored",
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "MethodStyle",
																	"qualifiedName": "vibe.http.rest.MethodStyle",
																	"name": "MethodStyle",
																	"moduleName": "vibe.http.rest",
																	"attributes": []
																},
																"name": "style"
															}
														],
														"attributes": []
													},
													"name": "this"
												}
											],
											[
												{
													"kind": "constructor",
													"nestedName": "RestInterfaceClient(I).RestInterfaceClient.this",
													"type": {
														"text": "(Url base_url, MethodStyle style = MethodStyle.LowerUnderscored)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "",
															"qualifiedName": "",
															"name": "constructor",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "Url",
																	"qualifiedName": "vibe.inet.url.Url",
																	"name": "Url",
																	"moduleName": "vibe.inet.url",
																	"attributes": []
																},
																"name": "base_url"
															},
															{
																"defaultValue": "MethodStyle.LowerUnderscored",
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "MethodStyle",
																	"qualifiedName": "vibe.http.rest.MethodStyle",
																	"name": "MethodStyle",
																	"moduleName": "vibe.http.rest",
																	"attributes": []
																},
																"name": "style"
															}
														],
														"attributes": []
													},
													"name": "this"
												}
											]
										],
										"aliases": [
											[
												{
													"kind": "alias",
													"nestedName": "RestInterfaceClient(I).RestInterfaceClient.BaseInterface",
													"name": "BaseInterface"
												}
											],
											[
												{
													"kind": "alias",
													"nestedName": "RestInterfaceClient(I).RestInterfaceClient.RequestFilter",
													"name": "RequestFilter"
												}
											]
										],
										"functions": [
											[
												{
													"kind": "function",
													"nestedName": "RestInterfaceClient(I).RestInterfaceClient.request",
													"type": {
														"text": "const Json(string verb, string name, Json params, bool[string] param_is_json)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "Json",
															"qualifiedName": "vibe.data.json.Json",
															"name": "Json",
															"moduleName": "vibe.data.json"
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "string",
																	"qualifiedName": "string",
																	"name": "string",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "verb"
															},
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "string",
																	"qualifiedName": "string",
																	"name": "string",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "name"
															},
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "Json",
																	"qualifiedName": "vibe.data.json.Json",
																	"name": "Json",
																	"moduleName": "vibe.data.json",
																	"attributes": []
																},
																"name": "params"
															},
															{
																"type": {
																	"kind": "type",
																	"keyType": {
																		"kind": "type",
																		"typeClass": "primitive",
																		"nestedName": "string",
																		"qualifiedName": "string",
																		"name": "string",
																		"moduleName": ""
																	},
																	"typeClass": "associative array",
																	"elementType": {
																		"kind": "type",
																		"typeClass": "primitive",
																		"nestedName": "bool",
																		"qualifiedName": "bool",
																		"name": "bool",
																		"moduleName": ""
																	},
																	"attributes": []
																},
																"name": "param_is_json"
															}
														],
														"attributes": [
															"const"
														]
													},
													"name": "request"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "RestInterfaceClient(I).RestInterfaceClient.requestFilter",
													"type": {
														"text": "RequestFilter()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "RequestFilter",
															"qualifiedName": "RequestFilter",
															"name": "RequestFilter",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": []
													},
													"name": "requestFilter"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "RestInterfaceClient(I).RestInterfaceClient.requestFilter",
													"type": {
														"text": "void(RequestFilter v)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "RequestFilter",
																	"qualifiedName": "RequestFilter",
																	"name": "RequestFilter",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "v"
															}
														],
														"attributes": []
													},
													"name": "requestFilter"
												}
											]
										],
										"variables": [
											[
												{
													"kind": "variable",
													"nestedName": "RestInterfaceClient(I).RestInterfaceClient.m_baseUrl",
													"type": {
														"kind": "type",
														"text": "Url",
														"typeClass": "primitive",
														"nestedName": "Url",
														"qualifiedName": "vibe.inet.url.Url",
														"name": "Url",
														"moduleName": "vibe.inet.url",
														"attributes": []
													},
													"name": "m_baseUrl"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "RestInterfaceClient(I).RestInterfaceClient.m_methodStyle",
													"type": {
														"kind": "type",
														"text": "MethodStyle",
														"typeClass": "primitive",
														"nestedName": "MethodStyle",
														"qualifiedName": "vibe.http.rest.MethodStyle",
														"name": "MethodStyle",
														"moduleName": "vibe.http.rest",
														"attributes": []
													},
													"name": "m_methodStyle"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "RestInterfaceClient(I).RestInterfaceClient.m_requestFilter",
													"type": {
														"kind": "type",
														"text": "RequestFilter",
														"typeClass": "primitive",
														"nestedName": "RequestFilter",
														"qualifiedName": "RequestFilter",
														"name": "RequestFilter",
														"moduleName": "",
														"attributes": []
													},
													"name": "m_requestFilter"
												}
											]
										]
									},
									"base": {
										"kind": "type",
										"text": "Object",
										"typeClass": "primitive",
										"nestedName": "Object",
										"qualifiedName": "Object",
										"name": "Object",
										"moduleName": "",
										"attributes": []
									},
									"nestedName": "RestInterfaceClient(I).RestInterfaceClient",
									"name": "RestInterfaceClient"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "RestInterfaceClient(I)",
					"name": "RestInterfaceClient(I)"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tAdjusts the naming convention for a given function name to the specified style.\n\n\tThe function name must be in lowerCamelCase (D-style) for the adjustment to work correctly.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "adjustMethodStyle",
					"type": {
						"text": "string(string name, MethodStyle style)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "name"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "MethodStyle",
									"qualifiedName": "vibe.http.rest.MethodStyle",
									"name": "MethodStyle",
									"moduleName": "vibe.http.rest",
									"attributes": []
								},
								"name": "style"
							}
						],
						"attributes": []
					},
					"name": "adjustMethodStyle"
				}
			],
			[
				{
					"ddoc": "\n\tGenerates a form based interface to the given instance.\n\n\tEach function is callable with either GET or POST using form encoded parameters. Complex\n\tparameters are encoded as JSON strings.\n\n\tNote that this function is currently not fully implemented.\n",
					"kind": "function",
					"templateName": "registerFormInterface(I)",
					"nestedName": "registerFormInterface",
					"type": {
						"text": "void(UrlRouter router, I instance, string url_prefix, MethodStyle style = MethodStyle.Unaltered)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "UrlRouter",
									"qualifiedName": "vibe.http.router.UrlRouter",
									"name": "UrlRouter",
									"moduleName": "vibe.http.router",
									"attributes": []
								},
								"name": "router"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "I",
									"qualifiedName": "I",
									"name": "I",
									"moduleName": "",
									"attributes": []
								},
								"name": "instance"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "url_prefix"
							},
							{
								"defaultValue": "MethodStyle.Unaltered",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "MethodStyle",
									"qualifiedName": "vibe.http.rest.MethodStyle",
									"name": "MethodStyle",
									"moduleName": "vibe.http.rest",
									"attributes": []
								},
								"name": "style"
							}
						],
						"attributes": []
					},
					"name": "registerFormInterface"
				}
			],
			[
				{
					"ddoc": "\n\tGenerates registers a REST interface and connects it the the given instance.\n\n\tEach method is mapped to the corresponing HTTP verb. Property methods are mapped to GET/PUT and\n\tall other methods are mapped according to their prefix verb. If the method has no known prefix,\n\tPOST is used. The following table lists the mappings from prefix verb to HTTP verb:\n\n\t<table>\n\t\t<tr><th>Prefix</th><th>HTTP verb</th></tr>\n\t\t<tr><td>get</td><td>GET</td></tr>\n\t\t<tr><td>query</td><td>GET</td></tr>\n\t\t<tr><td>set</td><td>PUT</td></tr>\n\t\t<tr><td>put</td><td>PUT</td></tr>\n\t\t<tr><td>update</td><td>PATCH</td></tr>\n\t\t<tr><td>patch</td><td>PATCH</td></tr>\n\t\t<tr><td>add</td><td>POST</td></tr>\n\t\t<tr><td>create</td><td>POST</td></tr>\n\t\t<tr><td>post</td><td>POST</td></tr>\n\t</table>\n\n\tA method named 'index' is mapped to the root URL (e.g. GET /api/). If a method has its first\n\tparameter named 'id', it will be mapped to ':id/method' and 'id' is expected to be part of the\n\tURL instead of a JSON request.\n\n\tAny interface that you return from a getter will be made available with the base url and its name appended.\n\n\tExamples:\n\n\t\tThe following example makes MyApi available using HTTP requests. Valid requests are:\n\n\t\t<ul>\n\t\t  $(LI GET /api/status &rarr; \"OK\")\n\t\t  $(LI GET /api/greeting &rarr; \"&lt;current greeting&gt;\")\n\t\t  $(LI PUT /api/greeting &larr; {\"text\": \"&lt;new text&gt;\"})\n\t\t  $(LI POST /api/new_user &larr; {\"name\": \"&lt;new user name&gt;\"})\n\t\t  $(LI GET /api/users &rarr; [\"&lt;user 1&gt;\", \"&lt;user 2&gt;\"])\n\t\t  $(LI GET /api/ &rarr; [\"&lt;user 1&gt;\", \"&lt;user 2&gt;\"])\n\t\t  $(LI GET /api/:id/name &rarr; [\"&lt;user name for id&gt;\"])\n\t\t  $(LI GET /api/items/text &rarr; \"Hello, World\")\n\t\t  $(LI GET /api/items/:id/index &rarr; &lt;item index&gt;)\n\t\t</ul>\n\t\t---\n\t\timport vibe.d;\n\n\t\tinterface IMyItemsApi {\n\t\t\tstring getText();\n\t\t\tint getIndex(int id);\n\t\t}\n\n\t\tinterface IMyApi {\n\t\t\tstring getStatus();\n\n\t\t\t@property string greeting();\n\t\t\t@property void greeting(string text);\n\n\t\t\tvoid addNewUser(string name);\n\t\t\t@property string[] users();\n\t\t\tstring[] index();\n\t\t\tstring getName(int id);\n\n\t\t\t@property IMyItemsApi items();\n\t\t}\n\n\t\tclass MyItemsApiImpl : IMyItemsApi {\n\t\t\tstring getText() { return \"Hello, World\"; }\n\t\t\tint getIndex(int id) { return id; }\n\t\t}\n\n\t\tclass MyApiImpl : IMyApi {\n\t\t\tprivate string m_greeting;\n\t\t\tprivate string[] m_users;\n\t\t\tprivate MyItemsApiImpl m_items;\n\n\t\t\tthis() { m_items = new MyItemsApiImpl; }\n\n\t\t\tstring getStatus() { return \"OK\"; }\n\n\t\t\t@property string greeting() { return m_greeting; }\n\t\t\t@property void greeting(string text) { m_greeting = text; }\n\n\t\t\tvoid addNewUser(string name) { m_users ~= name; }\n\t\t\t@property string[] users() { return m_users; }\n\t\t\tstring[] index() { return m_users; }\n\t\t\tstring getName(int id) { return m_users[id]; }\n\n\t\t\t@property MyItemsApiImpl items() { return m_items; }\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto routes = new UrlRouter;\n\n\t\t\tregisterRestInterface(routes, new MyApiImpl, \"/api/\");\n\n\t\t\tlistenHttp(new HttpServerSettings, routes);\n\t\t}\n\t\t---\n\n\tSee_Also:\n\n\t\tRestInterfaceClient class for a seemless way to acces such a generated API\n",
					"kind": "function",
					"templateName": "registerRestInterface(T)",
					"nestedName": "registerRestInterface",
					"type": {
						"text": "void(UrlRouter router, T instance, string url_prefix = \"/\", MethodStyle style = MethodStyle.LowerUnderscored)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "UrlRouter",
									"qualifiedName": "vibe.http.router.UrlRouter",
									"name": "UrlRouter",
									"moduleName": "vibe.http.router",
									"attributes": []
								},
								"name": "router"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "instance"
							},
							{
								"defaultValue": "/\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "url_prefix"
							},
							{
								"defaultValue": "MethodStyle.LowerUnderscored",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "MethodStyle",
									"qualifiedName": "vibe.http.rest.MethodStyle",
									"name": "MethodStyle",
									"moduleName": "vibe.http.rest",
									"attributes": []
								},
								"name": "style"
							}
						],
						"attributes": []
					},
					"name": "registerRestInterface"
				}
			]
		]
	},
	"name": "vibe.http.rest"
},
"vibe.stream.stream": {
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\stream.d",
	"ddoc": "\n\tGeneric stream interface used by several stream-like classes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\tStream implementation acting as a sink with no function.\n\n\tAny data written to the stream will be ignored and discarded. This stream type is useful if\n\tthe output of a particular stream is not needed but the stream needs to be drained.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "NullOutputStream.finalize",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "NullOutputStream.flush",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "NullOutputStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "NullOutputStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "NullOutputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "NullOutputStream"
				}
			]
		],
		"interfaces": [
			[
				{
					"ddoc": "\n\n\n\tInterface for all classes implementing readable streams.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": "\n\t\tQueries if there is data available for immediate, non-blocking read.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "InputStream.dataAvailableForRead",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dataAvailableForRead"
								}
							],
							[
								{
									"ddoc": " Returns true iff the end of the stream has been reached\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "InputStream.empty",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"ddoc": "\tReturns the maximum number of bytes that are known to remain in this stream until the\n\t\tend is reached. After leastSize() bytes have been read, the stream will either have\n\t\treached EOS and empty() returns true, or leastSize() returns again a number > 0.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "InputStream.leastSize",
									"type": {
										"text": "@property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"ddoc": " Returns a temporary reference to the data that is currently buffered, typically has the size\n\t\tleastSize() or 0 if dataAvailableForRead() returns false.\n\n\t\tNote that any method invocation on the same stream invalidates the contents of the returned\n\t\tbuffer.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "InputStream.peek",
									"type": {
										"text": "const(ubyte)[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"const"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": []
									},
									"name": "peek"
								}
							],
							[
								{
									"ddoc": "\tFills the preallocated array 'bytes' with data from the stream.\n\n\t\tThrows: An exception if the operation reads past the end of the stream\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "InputStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							]
						]
					},
					"nestedName": "InputStream",
					"name": "InputStream"
				}
			],
			[
				{
					"ddoc": "\n\tInterface for all classes implementing writeable streams.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Flushes and finalizes the stream.\n\n\t\tFinalize has to be called on certain types of streams. No writes are possible after a\n\t\tcall to finalize().\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.finalize",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"ddoc": " Flushes the stream and makes sure that all data is being written to the output device.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.flush",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"ddoc": " These methods provide an output range interface.\n\n\t\tNote that these functions do not flush the output stream for performance reasons. flush()\n\t\tneeds to be called manually afterwards.\n\n\t\tSee_Also: $(LINK http://dlang.org/phobos/std_range.html#isOutputRange)\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.put",
									"type": {
										"text": "void(ubyte elem)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ubyte",
													"qualifiedName": "ubyte",
													"name": "ubyte",
													"moduleName": "",
													"attributes": []
												},
												"name": "elem"
											}
										],
										"attributes": []
									},
									"name": "put"
								},
								{
									"ddoc": " These methods provide an output range interface.\n\n\t\tNote that these functions do not flush the output stream for performance reasons. flush()\n\t\tneeds to be called manually afterwards.\n\n\t\tSee_Also: $(LINK http://dlang.org/phobos/std_range.html#isOutputRange)\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.put",
									"type": {
										"text": "void(const(ubyte[]) elems)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "elems"
											}
										],
										"attributes": []
									},
									"name": "put"
								},
								{
									"ddoc": " These methods provide an output range interface.\n\n\t\tNote that these functions do not flush the output stream for performance reasons. flush()\n\t\tneeds to be called manually afterwards.\n\n\t\tSee_Also: $(LINK http://dlang.org/phobos/std_range.html#isOutputRange)\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.put",
									"type": {
										"text": "void(char elem)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "char",
													"qualifiedName": "char",
													"name": "char",
													"moduleName": "",
													"attributes": []
												},
												"name": "elem"
											}
										],
										"attributes": []
									},
									"name": "put"
								},
								{
									"ddoc": " These methods provide an output range interface.\n\n\t\tNote that these functions do not flush the output stream for performance reasons. flush()\n\t\tneeds to be called manually afterwards.\n\n\t\tSee_Also: $(LINK http://dlang.org/phobos/std_range.html#isOutputRange)\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.put",
									"type": {
										"text": "void(const(char[]) elems)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "char",
														"qualifiedName": "char",
														"name": "char",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "elems"
											}
										],
										"attributes": []
									},
									"name": "put"
								}
							],
							[
								{
									"ddoc": " Writes an array of bytes to the stream.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"ddoc": " Writes an array of chars to the stream.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.write",
									"type": {
										"text": "void(const(char[]) bytes, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "char",
														"qualifiedName": "char",
														"name": "char",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"ddoc": " Pipes an InputStream directly into this OutputStream.\n\n\t\tThe number of bytes written is either the whole input stream when nbytes == 0, or exactly\n\t\tnbytes for nbytes > 0. If the input stream contains less than nbytes of data, an exception\n\t\tis thrown.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "OutputStream.writeDefault",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "writeDefault"
								}
							]
						]
					},
					"nestedName": "OutputStream",
					"name": "OutputStream"
				}
			],
			[
				{
					"ddoc": "\n\tInterface for all classes implementing readable and writable streams.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
					},
					"nestedName": "Stream",
					"interfaces": [
						{
							"kind": "type",
							"text": "InputStream",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						},
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "Stream"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tReads the complete contents of a stream, optionally limited by max_bytes.\n\n\tThrows:\n\t\tAn exception is thrown if max_bytes != 0 and the stream contains more than max_bytes data.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "readAll",
					"type": {
						"text": "ubyte[](InputStream stream, uint max_bytes = cast(uint)0)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "ubyte",
								"qualifiedName": "ubyte",
								"name": "ubyte",
								"moduleName": ""
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "InputStream",
									"qualifiedName": "vibe.stream.stream.InputStream",
									"name": "InputStream",
									"moduleName": "vibe.stream.stream",
									"attributes": []
								},
								"name": "stream"
							},
							{
								"defaultValue": "cast(uint",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "uint",
									"qualifiedName": "uint",
									"name": "uint",
									"moduleName": "",
									"attributes": []
								},
								"name": "max_bytes"
							}
						],
						"attributes": []
					},
					"name": "readAll"
				}
			],
			[
				{
					"ddoc": "\n\n\n\tReads and returns a single line from the stream.\n\n\tThrows:\n\t\tAn exception if either the stream end was hit without hitting a newline first, or\n\t\tif more than max_bytes have been read from the stream in case of max_bytes != 0.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "readLine",
					"type": {
						"text": "ubyte[](InputStream stream, uint max_bytes = cast(uint)0, string linesep = \"\\x0d\\x0a\", Allocator alloc = defaultAllocator())",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "ubyte",
								"qualifiedName": "ubyte",
								"name": "ubyte",
								"moduleName": ""
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "InputStream",
									"qualifiedName": "vibe.stream.stream.InputStream",
									"name": "InputStream",
									"moduleName": "vibe.stream.stream",
									"attributes": []
								},
								"name": "stream"
							},
							{
								"defaultValue": "cast(uint",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "uint",
									"qualifiedName": "uint",
									"name": "uint",
									"moduleName": "",
									"attributes": []
								},
								"name": "max_bytes"
							}
						],
						"attributes": []
					},
					"name": "readLine"
				}
			],
			[
				{
					"ddoc": "\n\tReads all data of a stream until the specified end marker is detected.\n\n\tThrows:\n\t\tAn exception if either the stream end was hit without hitting a marker first, or\n\t\tif more than max_bytes have been read from the stream in case of max_bytes != 0.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "readUntil",
					"type": {
						"text": "ubyte[](InputStream stream, const(ubyte[]) end_marker, uint max_bytes = cast(uint)0, Allocator alloc = defaultAllocator())",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "ubyte",
								"qualifiedName": "ubyte",
								"name": "ubyte",
								"moduleName": ""
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "InputStream",
									"qualifiedName": "vibe.stream.stream.InputStream",
									"name": "InputStream",
									"moduleName": "vibe.stream.stream",
									"attributes": []
								},
								"name": "stream"
							},
							{
								"type": {
									"kind": "type",
									"modifiers": [
										"const"
									],
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "ubyte",
										"qualifiedName": "ubyte",
										"name": "ubyte",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "end_marker"
							},
							{
								"defaultValue": "cast(uint",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "uint",
									"qualifiedName": "uint",
									"name": "uint",
									"moduleName": "",
									"attributes": []
								},
								"name": "max_bytes"
							}
						],
						"attributes": []
					},
					"name": "readUntil"
				},
				{
					"ddoc": "\n\tReads all data of a stream until the specified end marker is detected.\n\n\tThrows:\n\t\tAn exception if either the stream end was hit without hitting a marker first, or\n\t\tif more than max_bytes have been read from the stream in case of max_bytes != 0.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "readUntil",
					"type": {
						"text": "void(InputStream stream, OutputStream dst, const(ubyte[]) end_marker, ulong max_bytes = cast(ulong)0)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "InputStream",
									"qualifiedName": "vibe.stream.stream.InputStream",
									"name": "InputStream",
									"moduleName": "vibe.stream.stream",
									"attributes": []
								},
								"name": "stream"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "OutputStream",
									"qualifiedName": "vibe.stream.stream.OutputStream",
									"name": "OutputStream",
									"moduleName": "vibe.stream.stream",
									"attributes": []
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"modifiers": [
										"const"
									],
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "ubyte",
										"qualifiedName": "ubyte",
										"name": "ubyte",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "end_marker"
							},
							{
								"defaultValue": "cast(ulong",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ulong",
									"qualifiedName": "ulong",
									"name": "ulong",
									"moduleName": "",
									"attributes": []
								},
								"name": "max_bytes"
							}
						],
						"attributes": []
					},
					"name": "readUntil"
				}
			]
		]
	},
	"name": "vibe.stream.stream"
},
"vibe.core.signal": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\signal.d",
	"ddoc": "\n\tEvented signal-slot mechanism\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "SignalException.this",
									"type": {
										"text": "SignalException()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SignalException",
											"qualifiedName": "vibe.core.signal.SignalException",
											"name": "SignalException",
											"moduleName": "vibe.core.signal"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Exception",
						"typeClass": "primitive",
						"nestedName": "Exception",
						"qualifiedName": "Exception",
						"name": "Exception",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "SignalException",
					"name": "SignalException"
				}
			]
		],
		"interfaces": [
			[
				{
					"ddoc": " A cross-fiber signal\n\n\tNote: the ownership can be shared between multiple fibers.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Signal.emit",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "emit"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Signal.emitCount",
									"type": {
										"text": "const @property int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "emitCount"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Signal.wait",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "wait"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Signal.wait",
									"type": {
										"text": "void(int reference_emit_count)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "reference_emit_count"
											}
										],
										"attributes": []
									},
									"name": "wait"
								}
							]
						]
					},
					"nestedName": "Signal",
					"interfaces": [
						{
							"kind": "type",
							"text": "EventedObject",
							"typeClass": "primitive",
							"nestedName": "EventedObject",
							"qualifiedName": "vibe.core.driver.EventedObject",
							"name": "EventedObject",
							"moduleName": "vibe.core.driver",
							"attributes": []
						}
					],
					"name": "Signal"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": " Creates a new signal that can be shared between fibers.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "createSignal",
					"type": {
						"text": "Signal()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Signal",
							"qualifiedName": "vibe.core.signal.Signal",
							"name": "Signal",
							"moduleName": "vibe.core.signal"
						},
						"parameters": [],
						"attributes": []
					},
					"name": "createSignal"
				}
			]
		]
	},
	"name": "vibe.core.signal"
},
"vibe.http.log": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\log.d",
	"ddoc": "\n\tA HTTP 1.1/1.0 server implementation.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
	"members": {
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpConsoleLogger.this",
									"type": {
										"text": "HttpConsoleLogger(HttpServerSettings settings, string format)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpConsoleLogger",
											"qualifiedName": "vibe.http.log.HttpConsoleLogger",
											"name": "HttpConsoleLogger",
											"moduleName": "vibe.http.log"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerSettings",
													"qualifiedName": "vibe.http.server.HttpServerSettings",
													"name": "HttpServerSettings",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "settings"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "format"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "HttpConsoleLogger.writeLine",
									"type": {
										"text": "void(string ln)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "ln"
											}
										],
										"attributes": []
									},
									"name": "writeLine"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "HttpLogger",
						"typeClass": "primitive",
						"nestedName": "HttpLogger",
						"qualifiedName": "vibe.http.log.HttpLogger",
						"name": "HttpLogger",
						"moduleName": "vibe.http.log",
						"attributes": []
					},
					"nestedName": "HttpConsoleLogger",
					"name": "HttpConsoleLogger"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpFileLogger.this",
									"type": {
										"text": "HttpFileLogger(HttpServerSettings settings, string format, string filename)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpFileLogger",
											"qualifiedName": "vibe.http.log.HttpFileLogger",
											"name": "HttpFileLogger",
											"moduleName": "vibe.http.log"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerSettings",
													"qualifiedName": "vibe.http.server.HttpServerSettings",
													"name": "HttpServerSettings",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "settings"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "format"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "filename"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpFileLogger.close",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "close"
								}
							],
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "HttpFileLogger.writeLine",
									"type": {
										"text": "void(string ln)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "ln"
											}
										],
										"attributes": []
									},
									"name": "writeLine"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "HttpLogger",
						"typeClass": "primitive",
						"nestedName": "HttpLogger",
						"qualifiedName": "vibe.http.log.HttpLogger",
						"name": "HttpLogger",
						"moduleName": "vibe.http.log",
						"attributes": []
					},
					"nestedName": "HttpFileLogger",
					"name": "HttpFileLogger"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpLogger.this",
									"type": {
										"text": "HttpLogger(HttpServerSettings settings, string format)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpLogger",
											"qualifiedName": "vibe.http.log.HttpLogger",
											"name": "HttpLogger",
											"moduleName": "vibe.http.log"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerSettings",
													"qualifiedName": "vibe.http.server.HttpServerSettings",
													"name": "HttpServerSettings",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "settings"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "format"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpLogger.close",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "close"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpLogger.log",
									"type": {
										"text": "void(HttpServerRequest req, HttpServerResponse res)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerRequest",
													"qualifiedName": "vibe.http.server.HttpServerRequest",
													"name": "HttpServerRequest",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "req"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerResponse",
													"qualifiedName": "vibe.http.server.HttpServerResponse",
													"name": "HttpServerResponse",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "res"
											}
										],
										"attributes": []
									},
									"name": "log"
								}
							],
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "HttpLogger.writeLine",
									"type": {
										"text": "void(string ln)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "ln"
											}
										],
										"attributes": []
									},
									"name": "writeLine"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpLogger",
					"name": "HttpLogger"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "formatApacheLog",
					"type": {
						"text": "string(string format, HttpServerRequest req, HttpServerResponse res, HttpServerSettings settings)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "format"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerRequest",
									"qualifiedName": "vibe.http.server.HttpServerRequest",
									"name": "HttpServerRequest",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "req"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerResponse",
									"qualifiedName": "vibe.http.server.HttpServerResponse",
									"name": "HttpServerResponse",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "res"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							}
						],
						"attributes": []
					},
					"name": "formatApacheLog"
				}
			]
		]
	},
	"name": "vibe.http.log"
},
"vibe.utils.string": {
	"kind": "module",
	"file": "..\\source\\vibe\\utils\\string.d",
	"ddoc": "\n\tUtility functions for string processing\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tChecks if all characters in 'str' are contained in 'chars'.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "allOf",
					"type": {
						"text": "bool(string str, string chars)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "chars"
							}
						],
						"attributes": []
					},
					"name": "allOf"
				}
			],
			[
				{
					"ddoc": "\n\tChecks if any character in 'str' is contained in 'chars'.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "anyOf",
					"type": {
						"text": "bool(string str, string chars)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "chars"
							}
						],
						"attributes": []
					},
					"name": "anyOf"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "countUntilAny",
					"type": {
						"text": "int(string str, string chars)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "int",
							"qualifiedName": "int",
							"name": "int",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "chars"
							}
						],
						"attributes": []
					},
					"name": "countUntilAny"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "formatString(ARGS...)",
					"nestedName": "formatString",
					"type": {
						"text": "string(string format, ARGS args)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "format"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ARGS",
									"qualifiedName": "ARGS",
									"name": "ARGS",
									"moduleName": "",
									"attributes": []
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "formatString"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "icmp2",
					"type": {
						"text": "int(string a, string b)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "int",
							"qualifiedName": "int",
							"name": "int",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "a"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "b"
							}
						],
						"attributes": []
					},
					"name": "icmp2"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "isAlpha",
					"type": {
						"text": "bool(char ch)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "char",
									"qualifiedName": "char",
									"name": "char",
									"moduleName": "",
									"attributes": []
								},
								"name": "ch"
							}
						],
						"attributes": []
					},
					"name": "isAlpha"
				}
			],
			[
				{
					"ddoc": "\n\tJoins an array of strings using 'linesep' as the line separator (\\n by default).\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "joinLines",
					"type": {
						"text": "string(string[] strs, string linesep = \"\\x0a\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "strs"
							},
							{
								"defaultValue": "\\x0a\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "linesep"
							}
						],
						"attributes": []
					},
					"name": "joinLines"
				}
			],
			[
				{
					"ddoc": "\n\tTakes a string with possibly invalid UTF8 sequences and outputs a valid UTF8 string as near to\n\tthe original as possible.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "sanitizeUTF8",
					"type": {
						"text": "string(const(ubyte[]) str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"modifiers": [
										"const"
									],
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "ubyte",
										"qualifiedName": "ubyte",
										"name": "ubyte",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "sanitizeUTF8"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "stripA",
					"type": {
						"text": "string(string s)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "s"
							}
						],
						"attributes": []
					},
					"name": "stripA"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "stripLeftA",
					"type": {
						"text": "string(string s)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "s"
							}
						],
						"attributes": []
					},
					"name": "stripLeftA"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "stripRightA",
					"type": {
						"text": "string(string s)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "s"
							}
						],
						"attributes": []
					},
					"name": "stripRightA"
				}
			],
			[
				{
					"ddoc": "\n\tStrips the byte order mark of an UTF8 encoded string.\n\tThis is useful when the string is coming from a file.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "stripUTF8Bom",
					"type": {
						"text": "string(string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "stripUTF8Bom"
				}
			]
		]
	},
	"name": "vibe.utils.string"
},
"vibe.db.mongo.cursor": {
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\cursor.d",
	"ddoc": "\n\tMongoDB cursor abstraction\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"ddoc": "\n\tRepresents a cursor for a MongoDB query.\n\n\tUse foreach( doc; cursor ) to iterate over the list of documents.\n\n\tThis struct uses reference counting to destroy the underlying MongoDB cursor.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoCursor.__cpctor",
									"type": {
										"text": "const void(ref const(MongoCursor) p)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "MongoCursor",
													"qualifiedName": "vibe.db.mongo.cursor.MongoCursor",
													"name": "MongoCursor",
													"moduleName": "vibe.db.mongo.cursor",
													"attributes": [
														"ref"
													]
												},
												"name": "p"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "__cpctor"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns true if there are more documents for this cursor.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoCursor.empty",
									"type": {
										"text": "bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "empty"
								}
							],
							[
								{
									"ddoc": "\n\t\tIterates over all remaining documents.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoCursor.opApply",
									"type": {
										"text": "int(int delegate(ref Bson obj) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Bson",
																"qualifiedName": "vibe.data.bson.Bson",
																"name": "Bson",
																"moduleName": "vibe.data.bson",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								}
							],
							[
								{
									"ddoc": "\n\t\tIterates over all remaining documents.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoCursor.opApply",
									"type": {
										"text": "int(int delegate(ref uint idx, ref Bson obj) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "uint",
																"qualifiedName": "uint",
																"name": "uint",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Bson",
																"qualifiedName": "vibe.data.bson.Bson",
																"name": "Bson",
																"moduleName": "vibe.data.bson",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoCursor.opAssign",
									"type": {
										"text": "ref MongoCursor(MongoCursor p)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoCursor",
											"qualifiedName": "vibe.db.mongo.cursor.MongoCursor",
											"name": "MongoCursor",
											"moduleName": "vibe.db.mongo.cursor"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "MongoCursor",
													"qualifiedName": "vibe.db.mongo.cursor.MongoCursor",
													"name": "MongoCursor",
													"moduleName": "vibe.db.mongo.cursor",
													"attributes": []
												},
												"name": "p"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "opAssign"
								}
							]
						]
					},
					"nestedName": "MongoCursor",
					"name": "MongoCursor"
				}
			]
		]
	},
	"name": "vibe.db.mongo.cursor"
},
"vibe.http.auth.basic_auth": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\auth\\basic_auth.d",
	"ddoc": "\n\tImplements HTTP Basic Auth.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "addBasicAuth",
					"type": {
						"text": "void(HttpRequest req, string user, string password)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpRequest",
									"qualifiedName": "vibe.http.common.HttpRequest",
									"name": "HttpRequest",
									"moduleName": "vibe.http.common",
									"attributes": []
								},
								"name": "req"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "user"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "password"
							}
						],
						"attributes": []
					},
					"name": "addBasicAuth"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "performBasicAuth",
					"type": {
						"text": "void delegate(HttpServerRequest req, HttpServerResponse res)(string realm, bool delegate(string user, string name) pwcheck)",
						"typeClass": "function",
						"returnType": {
							"typeClass": "delegate",
							"returnType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "void",
								"qualifiedName": "void",
								"name": "void",
								"moduleName": ""
							},
							"parameters": [
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerRequest",
										"qualifiedName": "vibe.http.server.HttpServerRequest",
										"name": "HttpServerRequest",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "req"
								},
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerResponse",
										"qualifiedName": "vibe.http.server.HttpServerResponse",
										"name": "HttpServerResponse",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "res"
								}
							]
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "realm"
							},
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											},
											"name": "user"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											},
											"name": "name"
										}
									],
									"attributes": []
								},
								"name": "pwcheck"
							}
						],
						"attributes": []
					},
					"name": "performBasicAuth"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "performBasicAuth",
					"type": {
						"text": "string(HttpServerRequest req, HttpServerResponse res, string realm, bool delegate(string user, string name) pwcheck)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerRequest",
									"qualifiedName": "vibe.http.server.HttpServerRequest",
									"name": "HttpServerRequest",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "req"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerResponse",
									"qualifiedName": "vibe.http.server.HttpServerResponse",
									"name": "HttpServerResponse",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "res"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "realm"
							},
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											},
											"name": "user"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											},
											"name": "name"
										}
									],
									"attributes": []
								},
								"name": "pwcheck"
							}
						],
						"attributes": []
					},
					"name": "performBasicAuth"
				}
			]
		]
	},
	"name": "vibe.http.auth.basic_auth"
},
"vibe.inet.mimetypes": {
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\mimetypes.d",
	"ddoc": "\n\tMaps file name extensions to standard mime types.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tReturns the standard mime type for the extension of the specified file name.\n\n\tAny unknown file extension will map to \"application/octet-stream\".\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "getMimeTypeForFile",
					"type": {
						"text": "string(string filename)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "filename"
							}
						],
						"attributes": []
					},
					"name": "getMimeTypeForFile"
				}
			],
			[
				{
					"ddoc": "\n\tReturns true for a selected but incomplete list of mime-types that are describing a compressed\n\tformat.\n\n\tThis function is useful for avoiding redundant compression.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isCompressedFormat",
					"type": {
						"text": "bool(string mimetype)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "mimetype"
							}
						],
						"attributes": []
					},
					"name": "isCompressedFormat"
				}
			]
		]
	},
	"name": "vibe.inet.mimetypes"
},
"vibe.stream.counting": {
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\counting.d",
	"ddoc": "\n\tWrapper streams which count the number of bytes or limit the stream based on the number of\n\ttransferred bytes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\tWraps an existing input stream, counting the bytes that are written.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "CountingInputStream.this",
									"type": {
										"text": "CountingInputStream(InputStream stream)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "CountingInputStream",
											"qualifiedName": "vibe.stream.counting.CountingInputStream",
											"name": "CountingInputStream",
											"moduleName": "vibe.stream.counting"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.bytesRead",
									"type": {
										"text": "const @property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "bytesRead"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.dataAvailableForRead",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dataAvailableForRead"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.empty",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.leastSize",
									"type": {
										"text": "@property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.peek",
									"type": {
										"text": "const(ubyte)[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"const"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": []
									},
									"name": "peek"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "CountingInputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "InputStream",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "CountingInputStream"
				}
			],
			[
				{
					"ddoc": "\n\tWraps an existing output stream, counting the bytes that are written.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "CountingOutputStream.this",
									"type": {
										"text": "CountingOutputStream(OutputStream stream)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "CountingOutputStream",
											"qualifiedName": "vibe.stream.counting.CountingOutputStream",
											"name": "CountingOutputStream",
											"moduleName": "vibe.stream.counting"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "OutputStream",
													"qualifiedName": "vibe.stream.stream.OutputStream",
													"name": "OutputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingOutputStream.bytesWritten",
									"type": {
										"text": "const @property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "bytesWritten"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingOutputStream.finalize",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingOutputStream.flush",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingOutputStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingOutputStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "CountingOutputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "CountingOutputStream"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "LimitException.this",
									"type": {
										"text": "LimitException(string message, ulong limit, Throwable next = null, string file = __FILE__, int line = __LINE__)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "LimitException",
											"qualifiedName": "vibe.stream.counting.LimitException",
											"name": "LimitException",
											"moduleName": "vibe.stream.counting"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "message"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "limit"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Throwable",
													"qualifiedName": "Throwable",
													"name": "Throwable",
													"moduleName": "",
													"attributes": []
												},
												"name": "next"
											},
											{
												"defaultValue": "__FILE__",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "file"
											},
											{
												"defaultValue": "__LINE__",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "line"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitException.limit",
									"type": {
										"text": "const @property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "limit"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Exception",
						"typeClass": "primitive",
						"nestedName": "Exception",
						"qualifiedName": "Exception",
						"name": "Exception",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "LimitException",
					"name": "LimitException"
				}
			],
			[
				{
					"ddoc": "\n\tWraps an existing stream, limiting the amount of data that can be read.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"ddoc": " Constructs a limited stream from an existing input stream.\n\n\t\tParams:\n\t\t\tstream: the input stream to be wrapped\n\t\t\tbyte_limit: the maximum number of bytes readable from the constructed stream\n\t\t\tsilent_limit: if set, the stream will behave exactly like the original stream, but\n\t\t\t\twill throw an exception as soon as the limit is reached.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "LimitedInputStream.this",
									"type": {
										"text": "LimitedInputStream(InputStream stream, ulong byte_limit, bool silent_limit = false)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "LimitedInputStream",
											"qualifiedName": "vibe.stream.counting.LimitedInputStream",
											"name": "LimitedInputStream",
											"moduleName": "vibe.stream.counting"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "byte_limit"
											},
											{
												"defaultValue": "false",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "silent_limit"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.dataAvailableForRead",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dataAvailableForRead"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.empty",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.leastSize",
									"type": {
										"text": "@property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "LimitedInputStream.onSizeLimitReached",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "onSizeLimitReached"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.peek",
									"type": {
										"text": "const(ubyte)[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"const"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": []
									},
									"name": "peek"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.sourceStream",
									"type": {
										"text": "inout @property inout(InputStream)()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "InputStream",
											"qualifiedName": "vibe.stream.stream.InputStream",
											"name": "InputStream",
											"moduleName": "vibe.stream.stream"
										},
										"parameters": [],
										"attributes": [
											"inout",
											"@property"
										]
									},
									"name": "sourceStream"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "LimitedInputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "InputStream",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "LimitedInputStream"
				}
			]
		]
	},
	"name": "vibe.stream.counting"
},
"vibe.vibe": {
	"kind": "module",
	"file": "..\\source\\vibe\\vibe.d",
	"ddoc": "\n\tCentral include for every vibe.d based application.\n\n\tThis file provides the majority of the vibe API through a single import. Note that typical\n\tvibe.d applications will import 'vibe.d' instead to also get an implicit application entry\n\tpoint.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
	},
	"name": "vibe.vibe"
},
"vibe.utils.array": {
	"kind": "module",
	"file": "..\\source\\vibe\\utils\\array.d",
	"ddoc": "\n\tUtiltiy functions for array processing\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"structs": [
							[
								{
									"kind": "struct",
									"protection": "public",
									"members": {
										"constructors": [
											[
												{
													"kind": "constructor",
													"nestedName": "AllocAppender(ArrayType : E[],E).AllocAppender.this",
													"type": {
														"text": "(Allocator alloc)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "",
															"qualifiedName": "",
															"name": "constructor",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "Allocator",
																	"qualifiedName": "vibe.utils.memory.Allocator",
																	"name": "Allocator",
																	"moduleName": "vibe.utils.memory",
																	"attributes": []
																},
																"name": "alloc"
															}
														],
														"attributes": []
													},
													"name": "this"
												}
											]
										],
										"aliases": [
											[
												{
													"kind": "alias",
													"nestedName": "AllocAppender(ArrayType : E[],E).AllocAppender.ElemType",
													"name": "ElemType"
												}
											]
										],
										"functions": [
											[
												{
													"kind": "function",
													"nestedName": "AllocAppender(ArrayType : E[],E).AllocAppender.data",
													"type": {
														"text": "ArrayType()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "ArrayType",
															"qualifiedName": "ArrayType",
															"name": "ArrayType",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": []
													},
													"name": "data"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "AllocAppender(ArrayType : E[],E).AllocAppender.grow",
													"type": {
														"text": "void(size_t min_free)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "size_t",
																	"qualifiedName": "size_t",
																	"name": "size_t",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "min_free"
															}
														],
														"attributes": []
													},
													"name": "grow"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "AllocAppender(ArrayType : E[],E).AllocAppender.put",
													"type": {
														"text": "void(E el)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "E",
																	"qualifiedName": "E",
																	"name": "E",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "el"
															}
														],
														"attributes": []
													},
													"name": "put"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "AllocAppender(ArrayType : E[],E).AllocAppender.put",
													"type": {
														"text": "void(ArrayType arr)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "ArrayType",
																	"qualifiedName": "ArrayType",
																	"name": "ArrayType",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "arr"
															}
														],
														"attributes": []
													},
													"name": "put"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "AllocAppender(ArrayType : E[],E).AllocAppender.reserve",
													"type": {
														"text": "void(size_t amt)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "size_t",
																	"qualifiedName": "size_t",
																	"name": "size_t",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "amt"
															}
														],
														"attributes": []
													},
													"name": "reserve"
												}
											]
										],
										"variables": [
											[
												{
													"kind": "variable",
													"nestedName": "AllocAppender(ArrayType : E[],E).AllocAppender.m_alloc",
													"type": {
														"kind": "type",
														"text": "Allocator",
														"typeClass": "primitive",
														"nestedName": "Allocator",
														"qualifiedName": "vibe.utils.memory.Allocator",
														"name": "Allocator",
														"moduleName": "vibe.utils.memory",
														"attributes": []
													},
													"name": "m_alloc"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "AllocAppender(ArrayType : E[],E).AllocAppender.m_data",
													"type": {
														"kind": "type",
														"text": "ElemType[]",
														"typeClass": "array",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "ElemType",
															"qualifiedName": "ElemType",
															"name": "ElemType",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "m_data"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "AllocAppender(ArrayType : E[],E).AllocAppender.m_remaining",
													"type": {
														"kind": "type",
														"text": "ElemType[]",
														"typeClass": "array",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "ElemType",
															"qualifiedName": "ElemType",
															"name": "ElemType",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "m_remaining"
												}
											]
										]
									},
									"nestedName": "AllocAppender(ArrayType : E[],E).AllocAppender",
									"name": "AllocAppender"
								}
							]
						]
					},
					"nestedName": "AllocAppender(ArrayType : E[],E)",
					"name": "AllocAppender(ArrayType : E[],E)"
				}
			]
		],
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"classes": [
							[
								{
									"kind": "class",
									"protection": "public",
									"members": {
										"constructors": [
											[
												{
													"kind": "constructor",
													"nestedName": "FixedAppender(ArrayType : E[],uint NELEM,E).FixedAppender.this",
													"type": {
														"text": "()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "",
															"qualifiedName": "",
															"name": "constructor",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": []
													},
													"name": "this"
												}
											]
										],
										"aliases": [
											[
												{
													"kind": "alias",
													"nestedName": "FixedAppender(ArrayType : E[],uint NELEM,E).FixedAppender.ElemType",
													"name": "ElemType"
												}
											]
										],
										"functions": [
											[
												{
													"kind": "function",
													"nestedName": "FixedAppender(ArrayType : E[],uint NELEM,E).FixedAppender.data",
													"type": {
														"text": "ArrayType()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "ArrayType",
															"qualifiedName": "ArrayType",
															"name": "ArrayType",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": []
													},
													"name": "data"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "FixedAppender(ArrayType : E[],uint NELEM,E).FixedAppender.put",
													"type": {
														"text": "void(E el)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "E",
																	"qualifiedName": "E",
																	"name": "E",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "el"
															}
														],
														"attributes": []
													},
													"name": "put"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "FixedAppender(ArrayType : E[],uint NELEM,E).FixedAppender.put",
													"type": {
														"text": "void(ArrayType arr)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "ArrayType",
																	"qualifiedName": "ArrayType",
																	"name": "ArrayType",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "arr"
															}
														],
														"attributes": []
													},
													"name": "put"
												}
											]
										],
										"variables": [
											[
												{
													"kind": "variable",
													"nestedName": "FixedAppender(ArrayType : E[],uint NELEM,E).FixedAppender.m_data",
													"type": {
														"kind": "type",
														"keyType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "NELEM",
															"qualifiedName": "NELEM",
															"name": "NELEM",
															"moduleName": ""
														},
														"text": "ElemType[NELEM]",
														"typeClass": "associative array",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "ElemType",
															"qualifiedName": "ElemType",
															"name": "ElemType",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "m_data"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "FixedAppender(ArrayType : E[],uint NELEM,E).FixedAppender.m_remaining",
													"type": {
														"kind": "type",
														"text": "ElemType[]",
														"typeClass": "array",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "ElemType",
															"qualifiedName": "ElemType",
															"name": "ElemType",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "m_remaining"
												}
											]
										]
									},
									"base": {
										"kind": "type",
										"text": "Object",
										"typeClass": "primitive",
										"nestedName": "Object",
										"qualifiedName": "Object",
										"name": "Object",
										"moduleName": "",
										"attributes": []
									},
									"nestedName": "FixedAppender(ArrayType : E[],uint NELEM,E).FixedAppender",
									"name": "FixedAppender"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "FixedAppender(ArrayType : E[],uint NELEM,E)",
					"name": "FixedAppender(ArrayType : E[],uint NELEM,E)"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"templateName": "removeFromArray(T)",
					"nestedName": "removeFromArray",
					"type": {
						"text": "void(ref T[] array, T item)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "T",
										"qualifiedName": "T",
										"name": "T",
										"moduleName": ""
									},
									"attributes": [
										"ref"
									]
								},
								"name": "array"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "item"
							}
						],
						"attributes": []
					},
					"name": "removeFromArray"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "removeFromArrayIdx(T)",
					"nestedName": "removeFromArrayIdx",
					"type": {
						"text": "void(ref T[] array, size_t idx)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "T",
										"qualifiedName": "T",
										"name": "T",
										"moduleName": ""
									},
									"attributes": [
										"ref"
									]
								},
								"name": "array"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "size_t",
									"qualifiedName": "size_t",
									"name": "size_t",
									"moduleName": "",
									"attributes": []
								},
								"name": "idx"
							}
						],
						"attributes": []
					},
					"name": "removeFromArrayIdx"
				}
			]
		]
	},
	"name": "vibe.utils.array"
},
"vibe.stream.zlib": {
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\zlib.d",
	"ddoc": "\n\tZlib input/output streams\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\tTakes an input stream that contains data in deflate compressed format and outputs the\n\tuncompressed data.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "DeflateInputStream.this",
									"type": {
										"text": "DeflateInputStream(InputStream dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "DeflateInputStream",
											"qualifiedName": "vibe.stream.zlib.DeflateInputStream",
											"name": "DeflateInputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "ZlibInputStream",
						"typeClass": "primitive",
						"nestedName": "ZlibInputStream",
						"qualifiedName": "vibe.stream.zlib.ZlibInputStream",
						"name": "ZlibInputStream",
						"moduleName": "vibe.stream.zlib",
						"attributes": []
					},
					"nestedName": "DeflateInputStream",
					"name": "DeflateInputStream"
				}
			],
			[
				{
					"ddoc": "\n\tWrites any data compressed in deflate format to the specified output stream.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "DeflateOutputStream.this",
									"type": {
										"text": "DeflateOutputStream(OutputStream dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "DeflateOutputStream",
											"qualifiedName": "vibe.stream.zlib.DeflateOutputStream",
											"name": "DeflateOutputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "OutputStream",
													"qualifiedName": "vibe.stream.stream.OutputStream",
													"name": "OutputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "ZlibOutputStream",
						"typeClass": "primitive",
						"nestedName": "ZlibOutputStream",
						"qualifiedName": "vibe.stream.zlib.ZlibOutputStream",
						"name": "ZlibOutputStream",
						"moduleName": "vibe.stream.zlib",
						"attributes": []
					},
					"nestedName": "DeflateOutputStream",
					"name": "DeflateOutputStream"
				}
			],
			[
				{
					"ddoc": "\n\tTakes an input stream that contains data in gzip compressed format and outputs the\n\tuncompressed data.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "GzipInputStream.this",
									"type": {
										"text": "GzipInputStream(InputStream dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "GzipInputStream",
											"qualifiedName": "vibe.stream.zlib.GzipInputStream",
											"name": "GzipInputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "ZlibInputStream",
						"typeClass": "primitive",
						"nestedName": "ZlibInputStream",
						"qualifiedName": "vibe.stream.zlib.ZlibInputStream",
						"name": "ZlibInputStream",
						"moduleName": "vibe.stream.zlib",
						"attributes": []
					},
					"nestedName": "GzipInputStream",
					"name": "GzipInputStream"
				}
			],
			[
				{
					"ddoc": "\n\tWrites any data compressed in gzip format to the specified output stream.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "GzipOutputStream.this",
									"type": {
										"text": "GzipOutputStream(OutputStream dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "GzipOutputStream",
											"qualifiedName": "vibe.stream.zlib.GzipOutputStream",
											"name": "GzipOutputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "OutputStream",
													"qualifiedName": "vibe.stream.stream.OutputStream",
													"name": "OutputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "ZlibOutputStream",
						"typeClass": "primitive",
						"nestedName": "ZlibOutputStream",
						"qualifiedName": "vibe.stream.zlib.ZlibOutputStream",
						"name": "ZlibOutputStream",
						"moduleName": "vibe.stream.zlib",
						"attributes": []
					},
					"nestedName": "GzipOutputStream",
					"name": "GzipOutputStream"
				}
			],
			[
				{
					"ddoc": "\n\tGeneric zlib input stream.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "ZlibInputStream.this",
									"type": {
										"text": "ZlibInputStream(InputStream src, HeaderFormat type)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ZlibInputStream",
											"qualifiedName": "vibe.stream.zlib.ZlibInputStream",
											"name": "ZlibInputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "src"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HeaderFormat",
													"qualifiedName": "HeaderFormat",
													"name": "HeaderFormat",
													"moduleName": "",
													"attributes": []
												},
												"name": "type"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibInputStream.dataAvailableForRead",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dataAvailableForRead"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibInputStream.empty",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibInputStream.leastSize",
									"type": {
										"text": "@property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibInputStream.peek",
									"type": {
										"text": "const(ubyte)[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"const"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": []
									},
									"name": "peek"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibInputStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "ZlibInputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "InputStream",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "ZlibInputStream"
				}
			],
			[
				{
					"ddoc": "\n\tGeneric zlib output stream.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "ZlibOutputStream.this",
									"type": {
										"text": "ZlibOutputStream(OutputStream dst, HeaderFormat type)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ZlibOutputStream",
											"qualifiedName": "vibe.stream.zlib.ZlibOutputStream",
											"name": "ZlibOutputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "OutputStream",
													"qualifiedName": "vibe.stream.stream.OutputStream",
													"name": "OutputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "dst"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HeaderFormat",
													"qualifiedName": "HeaderFormat",
													"name": "HeaderFormat",
													"moduleName": "",
													"attributes": []
												},
												"name": "type"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibOutputStream.finalize",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibOutputStream.flush",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibOutputStream.write",
									"type": {
										"text": "void(const(ubyte[]) data, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibOutputStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "ZlibOutputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "ZlibOutputStream"
				}
			]
		]
	},
	"name": "vibe.stream.zlib"
},
"vibe.crypto.passwordhash": {
	"kind": "module",
	"file": "..\\source\\vibe\\crypto\\passwordhash.d",
	"ddoc": "\n\tPassword hashing routines\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "generateSimplePasswordHash",
					"type": {
						"text": "string(string password)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "password"
							}
						],
						"attributes": []
					},
					"name": "generateSimplePasswordHash"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "testSimplePasswordHash",
					"type": {
						"text": "bool(string hashstring, string password)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "hashstring"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "password"
							}
						],
						"attributes": []
					},
					"name": "testSimplePasswordHash"
				}
			]
		]
	},
	"name": "vibe.crypto.passwordhash"
},
"vibe.data.json": {
	"kind": "module",
	"file": "..\\source\\vibe\\data\\json.d",
	"ddoc": "\n\tJSON serialization and value handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"ddoc": "\n\n\n\tRepresents a single JSON value.\n\n\tJSON values can have one of the types defined in the JSON.Type enum. They\n\tbehave mostly like values in ECMA script in the way that you can\n\ttransparently perform operations on them. However, strict typechecking is\n\tdone, so that operations between differently typed JSON values will throw\n\tan exception. Additionally, an explicit cast or using get!() or to!() is\n\trequired to convert a JSON value to the corresponding static D type.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(typeof(null))",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "typeof",
														"qualifiedName": "typeof",
														"name": "typeof",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "null",
																"qualifiedName": "null",
																"name": "null",
																"moduleName": "",
																"attributes": []
															}
														}
													],
													"attributes": []
												}
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(bool v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(int v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(long v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(double v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(string v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(Json[] v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(Json[string] v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"keyType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"typeClass": "associative array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"enums": [
							[
								{
									"ddoc": " Represents the run time type of a JSON value.\n\t\n",
									"kind": "enum",
									"protection": "public",
									"members": [
										{
											"ddoc": " A non-existent value in a JSON object\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Undefined",
											"name": "Undefined"
										},
										{
											"ddoc": " Null value\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Null",
											"name": "Null"
										},
										{
											"ddoc": " Boolean value\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Bool",
											"name": "Bool"
										},
										{
											"ddoc": " 64-bit integer value\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Int",
											"name": "Int"
										},
										{
											"ddoc": " 64-bit floating point value\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Float",
											"name": "Float"
										},
										{
											"ddoc": " UTF-8 string\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.String",
											"name": "String"
										},
										{
											"ddoc": " Array of JSON values\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Array",
											"name": "Array"
										},
										{
											"ddoc": " JSON object aka. dictionary from string to Json\n",
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Object",
											"name": "Object"
										}
									],
									"nestedName": "Json.Type",
									"name": "Type",
									"baseType": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									}
								}
							]
						],
						"functions": [
							[
								{
									"ddoc": " New JSON value of Type.Array\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.EmptyArray",
									"type": {
										"text": "@property Json()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "EmptyArray"
								}
							],
							[
								{
									"ddoc": " New JSON value of Type.Object\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.EmptyObject",
									"type": {
										"text": "@property Json()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "EmptyObject"
								}
							],
							[
								{
									"ddoc": " New JSON value of Type.Undefined\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.Undefined",
									"type": {
										"text": "@property Json()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "Undefined"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "checkType(T)",
									"nestedName": "Json.checkType",
									"type": {
										"text": "const void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "checkType"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns the number of entries of string, array or object typed JSON values.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.length",
									"type": {
										"text": "const @property uint()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "length"
								}
							],
							[
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "int(int delegate(ref Json obj) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "const int(int delegate(ref const(Json) obj) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"modifiers": [
																	"const"
																],
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "int(int delegate(ref uint idx, ref Json obj) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "uint",
																"qualifiedName": "uint",
																"name": "uint",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "const int(int delegate(ref uint idx, ref const(Json) obj) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "uint",
																"qualifiedName": "uint",
																"name": "uint",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"modifiers": [
																	"const"
																],
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "int(int delegate(ref string idx, ref Json obj) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "const int(int delegate(ref string idx, ref const(Json) obj) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"modifiers": [
																	"const"
																],
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opApply"
								}
							],
							[
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "ref Json(Json v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "void(typeof(null))",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "typeof",
														"qualifiedName": "typeof",
														"name": "typeof",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "null",
																"qualifiedName": "null",
																"name": "null",
																"moduleName": "",
																"attributes": []
															}
														}
													],
													"attributes": []
												}
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "bool(bool v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "int(int v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "long(long v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "long",
											"qualifiedName": "long",
											"name": "long",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "double(double v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "double",
											"qualifiedName": "double",
											"name": "double",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "string(string v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "Json[](Json[] v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "Json",
												"qualifiedName": "vibe.data.json.Json",
												"name": "Json",
												"moduleName": "vibe.data.json"
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "Json[string](Json[string] v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"keyType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": ""
											},
											"typeClass": "associative array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "Json",
												"qualifiedName": "vibe.data.json.Json",
												"name": "Json",
												"moduleName": "vibe.data.json"
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"keyType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"typeClass": "associative array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								}
							],
							[
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "const Json(ref const(Json) other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op) if (op == \"~\")",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "Json(Json other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": []
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opOpAssign(string op) if (op == \"+\" || op == \"-\" || op == \"*\" || op == \"/\" || op == \"%\")",
									"nestedName": "Json.opOpAssign",
									"type": {
										"text": "void(Json other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": []
									},
									"name": "opOpAssign"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "const Json(bool other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "const Json(long other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "const Json(double other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "const Json(string other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "Json(Json[] other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": []
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op)",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "const Json(bool other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinaryRight"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op)",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "const Json(long other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinaryRight"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op)",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "const Json(double other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinaryRight"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op) if (op == \"~\")",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "const Json(string other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinaryRight"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op) if (op == \"in\")",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "inout inout(Json)*(string other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "pointer",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"inout"
												],
												"typeClass": "primitive",
												"nestedName": "Json",
												"qualifiedName": "vibe.data.json.Json",
												"name": "Json",
												"moduleName": "vibe.data.json"
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opBinaryRight"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op)",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "Json(Json[] other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": []
									},
									"name": "opBinaryRight"
								}
							],
							[
								{
									"ddoc": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n",
									"kind": "function",
									"templateName": "opCast(T)",
									"nestedName": "Json.opCast",
									"type": {
										"text": "inout inout(T)()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"inout"
										]
									},
									"name": "opCast"
								},
								{
									"kind": "function",
									"ddoc": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n",
									"templateName": "get(T)",
									"nestedName": "Json.get",
									"type": {
										"text": "inout inout(T)()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"inout"
										]
									},
									"name": "get"
								},
								{
									"kind": "function",
									"ddoc": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n",
									"templateName": "opt(T)",
									"nestedName": "Json.opt",
									"type": {
										"text": "const const(T)(const(T) def = T.init)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"const"
											],
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"defaultValue": "T.init",
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "def"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opt"
								},
								{
									"kind": "function",
									"ddoc": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n",
									"templateName": "opt(T)",
									"nestedName": "Json.opt",
									"type": {
										"text": "T(T def = T.init)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"defaultValue": "T.init",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "def"
											}
										],
										"attributes": []
									},
									"name": "opt"
								}
							],
							[
								{
									"ddoc": "\n\t\tCompares two JSON values.\n\n\t\tIf the types of the two values differ, the value with the smaller type\n\t\tid is considered the smaller value. This differs from ECMA script, which\n\t\tperforms a type conversion before comparing the values.\n\n\t\tJSON values of type Object cannot be compared and will throw an\n\t\texception.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opCmp",
									"type": {
										"text": "const int(ref const(Json) other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opCmp"
								}
							],
							[
								{
									"kind": "function",
									"ddoc": "\n\t\tAllows to access existing fields of a JSON object using dot syntax.\n\t\n",
									"templateName": "opDispatch(string prop)",
									"nestedName": "Json.opDispatch",
									"type": {
										"text": "const const(Json)()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"const"
											],
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "opDispatch"
								},
								{
									"kind": "function",
									"ddoc": "\n\t\tAllows to access existing fields of a JSON object using dot syntax.\n\t\n",
									"templateName": "opDispatch(string prop)",
									"nestedName": "Json.opDispatch",
									"type": {
										"text": "Json()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "opDispatch"
								}
							],
							[
								{
									"ddoc": "\n\t\tCompares two JSON values for equality.\n\n\t\tIf the two values have different types, they are considered unequal.\n\t\tThis differs with ECMA script, which performs a type conversion before\n\t\tcomparing the values.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(ref const(Json) other)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								},
								{
									"ddoc": "\n\t\tCompares two JSON values for equality.\n\n\t\tIf the two values have different types, they are considered unequal.\n\t\tThis differs with ECMA script, which performs a type conversion before\n\t\tcomparing the values.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(typeof(null))",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "typeof",
														"qualifiedName": "typeof",
														"name": "typeof",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "null",
																"qualifiedName": "null",
																"name": "null",
																"moduleName": "",
																"attributes": []
															}
														}
													],
													"attributes": []
												}
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(bool v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(long v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(double v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(string v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"ddoc": "\n\t\tAllows direct indexing of array typed JSON values.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opIndex",
									"type": {
										"text": "inout ref inout(Json)(uint idx)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "idx"
											}
										],
										"attributes": [
											"inout",
											"ref"
										]
									},
									"name": "opIndex"
								}
							],
							[
								{
									"ddoc": "\n\t\tAllows direct indexing of object typed JSON values using a string as\n\t\tthe key.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opIndex",
									"type": {
										"text": "const const(Json)(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"const"
											],
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opIndex"
								},
								{
									"ddoc": "\n\t\tAllows direct indexing of object typed JSON values using a string as\n\t\tthe key.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opIndex",
									"type": {
										"text": "ref Json(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "opIndex"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns a slice of a JSON array.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opSlice",
									"type": {
										"text": "inout inout(Json[])()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "Json",
												"qualifiedName": "vibe.data.json.Json",
												"name": "Json",
												"moduleName": "vibe.data.json"
											}
										},
										"parameters": [],
										"attributes": [
											"inout"
										]
									},
									"name": "opSlice"
								}
							],
							[
								{
									"ddoc": "\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opSlice",
									"type": {
										"text": "inout inout(Json[])(uint from, uint to)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "Json",
												"qualifiedName": "vibe.data.json.Json",
												"name": "Json",
												"moduleName": "vibe.data.json"
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "from"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "to"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opSlice"
								}
							],
							[
								{
									"ddoc": "\n\t\tPerforms unary operations on the JSON value.\n\n\t\tThe following operations are supported for each type:\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD ~)\n\t\t\t$(DT Int)    $(DD +, -, ++, --)\n\t\t\t$(DT Float)  $(DD +, -, ++, --)\n\t\t\t$(DT String) $(DD none)\n\t\t\t$(DT Array)  $(DD none)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opUnary(string op)",
									"nestedName": "Json.opUnary",
									"type": {
										"text": "const Json()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "opUnary"
								}
							],
							[
								{
									"kind": "function",
									"ddoc": "\n\t\tConverts the JSON value to the corresponding D type - types are converted as neccessary.\n\t\n",
									"templateName": "to(T)",
									"nestedName": "Json.to",
									"type": {
										"text": "inout inout(T)()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"inout"
										]
									},
									"name": "to"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns the JSON object as a string.\n\n\t\tFor large JSON values use toJSON() instead as this function will store the whole string\n\t\tin memory, whereas toJSON() writes it out bit for bit.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.toString",
									"type": {
										"text": "const string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							],
							[
								{
									"ddoc": "\n\t\tThe current type id of this JSON object.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.type",
									"type": {
										"text": "const @property Type()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Type",
											"qualifiedName": "Type",
											"name": "Type",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "type"
								}
							],
							[
								{
									"kind": "function",
									"ddoc": "\n\t\tReturns the type id corresponding to the given D type.\n\t\n",
									"templateName": "typeId(T)",
									"nestedName": "Json.typeId",
									"type": {
										"text": "Type()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Type",
											"qualifiedName": "Type",
											"name": "Type",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "typeId"
								}
							]
						]
					},
					"nestedName": "Json",
					"name": "Json"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tDeserializes a JSON value into the destination variable.\n\n\tThe same types as for serializeToJson() are supported and handled inversely.\n",
					"kind": "function",
					"templateName": "deserializeJson(T)",
					"nestedName": "deserializeJson",
					"type": {
						"text": "void(ref T dst, Json src)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "src"
							}
						],
						"attributes": []
					},
					"name": "deserializeJson"
				}
			],
			[
				{
					"ddoc": "\n\n\n\tParses the given range as a JSON string and returns the corresponding Json object.\n\n\tThe range is shrunk during parsing, leaving any remaining text that is now part of\n\tthe JSON contents.\n\n\tThrows an Exception if any parsing error occured.\n",
					"kind": "function",
					"templateName": "parseJson(R) if (is(R == string))",
					"nestedName": "parseJson",
					"type": {
						"text": "Json(ref R range, int* line = null)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Json",
							"qualifiedName": "vibe.data.json.Json",
							"name": "Json",
							"moduleName": "vibe.data.json"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "range"
							},
							{
								"defaultValue": "null",
								"type": {
									"kind": "type",
									"typeClass": "pointer",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "line"
							}
						],
						"attributes": []
					},
					"name": "parseJson"
				}
			],
			[
				{
					"ddoc": "\n\tParses the given JSON string and returns the corresponding Json object.\n\n\tThrows an Exception if any parsing error occurs.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "parseJsonString",
					"type": {
						"text": "Json(string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Json",
							"qualifiedName": "vibe.data.json.Json",
							"name": "Json",
							"moduleName": "vibe.data.json"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "parseJsonString"
				}
			],
			[
				{
					"ddoc": "\n\tSerializes the given value to JSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Json)            $(DD Used as-is)\n\t\t$(DT null)            $(DD Converted to Bson.Type.Null)\n\t\t$(DT bool)            $(DD Converted to Bson.Type.Bool)\n\t\t$(DT float, double)   $(DD Converted to Bson.Type.Double)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Bson.Type.Int)\n\t\t$(DT string)          $(DD Converted to Bson.Type.String)\n\t\t$(DT T[])             $(DD Converted to Bson.Type.Array)\n\t\t$(DT T[string])       $(DD Converted to Bson.Type.Object)\n\t\t$(DT struct)          $(DD Converted to Bson.Type.Object)\n\t\t$(DT class)           $(DD Converted to Bson.Type.Object or Bson.Type.Null)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall fields of a struct/class are recursively serialized using the same rules.\n",
					"kind": "function",
					"templateName": "serializeToJson(T)",
					"nestedName": "serializeToJson",
					"type": {
						"text": "Json(T value)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Json",
							"qualifiedName": "vibe.data.json.Json",
							"name": "Json",
							"moduleName": "vibe.data.json"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "value"
							}
						],
						"attributes": []
					},
					"name": "serializeToJson"
				}
			],
			[
				{
					"ddoc": "\n\tWrites the given JSON object as a JSON string into the destination range.\n\n\tThe basic version will not output any whitespace and thus minizime the size of the string.\n\n\ttoPrettyJSON() in the other hand will add newlines and indents to make the output human\n\treadable.\n",
					"kind": "function",
					"templateName": "toJson(R)",
					"nestedName": "toJson",
					"type": {
						"text": "void(ref R dst, in Json json)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": [
										"in"
									]
								},
								"name": "json"
							}
						],
						"attributes": []
					},
					"name": "toJson"
				},
				{
					"ddoc": "\n\tWrites the given JSON object as a JSON string into the destination range.\n\n\tThe basic version will not output any whitespace and thus minizime the size of the string.\n\n\ttoPrettyJSON() in the other hand will add newlines and indents to make the output human\n\treadable.\n",
					"kind": "function",
					"templateName": "toPrettyJson(R)",
					"nestedName": "toPrettyJson",
					"type": {
						"text": "void(ref R dst, in Json json, int level = 0)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": [
										"in"
									]
								},
								"name": "json"
							},
							{
								"defaultValue": "0",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "level"
							}
						],
						"attributes": []
					},
					"name": "toPrettyJson"
				}
			]
		]
	},
	"name": "vibe.data.json"
},
"vibe.http.form": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\form.d",
	"ddoc": "\n\tContains HTTP form parsing and construction routines.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
	"members": {
		"structs": [
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FilePart.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FilePart.opEquals",
									"type": {
										"text": "const bool(const(FilePart) p)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "FilePart",
													"qualifiedName": "vibe.http.form.FilePart",
													"name": "FilePart",
													"moduleName": "vibe.http.form",
													"attributes": []
												},
												"name": "p"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "FilePart.filename",
									"type": {
										"kind": "type",
										"text": "PathEntry",
										"typeClass": "primitive",
										"nestedName": "PathEntry",
										"qualifiedName": "vibe.inet.url.PathEntry",
										"name": "PathEntry",
										"moduleName": "vibe.inet.url",
										"attributes": []
									},
									"name": "filename"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "FilePart.headers",
									"type": {
										"kind": "type",
										"text": "StrMapCI",
										"typeClass": "primitive",
										"nestedName": "StrMapCI",
										"qualifiedName": "vibe.http.common.StrMapCI",
										"name": "StrMapCI",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "headers"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "FilePart.tempPath",
									"type": {
										"kind": "type",
										"text": "Path",
										"typeClass": "primitive",
										"nestedName": "Path",
										"qualifiedName": "vibe.inet.url.Path",
										"name": "Path",
										"moduleName": "vibe.inet.url",
										"attributes": []
									},
									"name": "tempPath"
								}
							]
						]
					},
					"nestedName": "FilePart",
					"name": "FilePart"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tParses the form given by 'content_type' and 'body_reader'.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "parseFormData",
					"type": {
						"text": "bool(ref string[string] fields, ref FilePart[string] files, string content_type, InputStream body_reader)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"keyType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"typeClass": "associative array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"attributes": [
										"ref"
									]
								},
								"name": "fields"
							},
							{
								"type": {
									"kind": "type",
									"keyType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"typeClass": "associative array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "FilePart",
										"qualifiedName": "vibe.http.form.FilePart",
										"name": "FilePart",
										"moduleName": "vibe.http.form"
									},
									"attributes": [
										"ref"
									]
								},
								"name": "files"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "content_type"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "InputStream",
									"qualifiedName": "vibe.stream.stream.InputStream",
									"name": "InputStream",
									"moduleName": "vibe.stream.stream",
									"attributes": []
								},
								"name": "body_reader"
							}
						],
						"attributes": []
					},
					"name": "parseFormData"
				}
			],
			[
				{
					"ddoc": "\n\tParses a url encoded form (query string format) and puts the key/value pairs into params.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "parseUrlEncodedForm",
					"type": {
						"text": "void(string str, ref string[string] params)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							},
							{
								"type": {
									"kind": "type",
									"keyType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"typeClass": "associative array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"attributes": [
										"ref"
									]
								},
								"name": "params"
							}
						],
						"attributes": []
					},
					"name": "parseUrlEncodedForm"
				}
			]
		]
	},
	"name": "vibe.http.form"
},
"vibe.inet.urltransfer": {
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\urltransfer.d",
	"ddoc": "\n\tDownloading and uploading of data from/to URLs.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tDownloads a file from the specified URL.\n\n\tAny redirects will be followed until the actual file resource is reached or if the redirection\n\tlimit of 10 is reached. Note that only HTTP(S) is currently supported.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "download",
					"type": {
						"text": "InputStream(string url_, HttpClient client = null)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "url_"
							},
							{
								"defaultValue": "null",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpClient",
									"qualifiedName": "vibe.http.client.HttpClient",
									"name": "HttpClient",
									"moduleName": "vibe.http.client",
									"attributes": []
								},
								"name": "client"
							}
						],
						"attributes": []
					},
					"name": "download"
				},
				{
					"ddoc": "\n\tDownloads a file from the specified URL.\n\n\tAny redirects will be followed until the actual file resource is reached or if the redirection\n\tlimit of 10 is reached. Note that only HTTP(S) is currently supported.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "download",
					"type": {
						"text": "void(string url, string filename)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "url"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "filename"
							}
						],
						"attributes": []
					},
					"name": "download"
				}
			]
		]
	},
	"name": "vibe.inet.urltransfer"
},
"vibe.appmain": {
	"kind": "module",
	"file": "..\\source\\vibe\\appmain.d",
	"ddoc": "\n\tProvides vibe based applications with a central program entry point.\n\n\tThis module is included automatically through the import 'vibe.d'. It will provide a default\n\tapplication entry point which parses command line arguments, reads the global vibe configuration\n\tfile, and starts the event loop.\n\n\tThe application itself then just has to initialize itself from within a 'static this' module\n\tconstructor and perform the appropriate calls to listen for connections or other operations.\n\n\tIf you want to provide your own main() function, you have to import 'vibe.vibe' instead of\n\t'vibe.d'. Be sure to call start() at the end of your main function in this case. Also beware\n\tthat any global configuration is not applied in this case and features such as priviledge\n\tlowering are not in place.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tThe predefined vibe.d application entry point.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "main",
					"type": {
						"text": "int(string[] args)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "int",
							"qualifiedName": "int",
							"name": "int",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "main"
				}
			]
		]
	},
	"name": "vibe.appmain"
},
"vibe.db.mongo.mongo": {
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\mongo.d",
	"ddoc": "\n\tMongoDB and MongoCollection classes and connections.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tConnects to a MongoDB instance.\n\n\tExamples:\n\t---\n\tauto db = connectMongoDB(\"127.0.0.1\");\n\tauto users = db[\"users\"];\n\tusers.insert(BSON(\"peter\"));\n\t---\n\n \tA mongodb URL can also be used as specified by http://www.mongodb.org/display/DOCS/Connections\n    ---\n    auto db = connectMongoDB(\"mongodb://localhost/?slaveOk=true\");\n    ---\n\n \tThrows: an exception if a mongodb:// URL is given and the URL cannot be parsed.\n \tAn exception will not be thrown if called with a hostname and port.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "connectMongoDB",
					"type": {
						"text": "MongoDB(string host, ushort port = cast(ushort)27017)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "MongoDB",
							"qualifiedName": "vibe.db.mongo.db.MongoDB",
							"name": "MongoDB",
							"moduleName": "vibe.db.mongo.db"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "host"
							},
							{
								"defaultValue": "cast(ushort",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							}
						],
						"attributes": []
					},
					"name": "connectMongoDB"
				}
			]
		]
	},
	"name": "vibe.db.mongo.mongo"
},
"vibe.stream.memory": {
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\memory.d",
	"ddoc": "\n\tIn-memory streams\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "MemoryOutputStream.this",
									"type": {
										"text": "MemoryOutputStream(Allocator alloc = defaultAllocator())",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MemoryOutputStream",
											"qualifiedName": "vibe.stream.memory.MemoryOutputStream",
											"name": "MemoryOutputStream",
											"moduleName": "vibe.stream.memory"
										},
										"parameters": [
											{
												"defaultValue": "defaultAllocator(",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Allocator",
													"qualifiedName": "vibe.utils.memory.Allocator",
													"name": "Allocator",
													"moduleName": "vibe.utils.memory",
													"attributes": []
												},
												"name": "alloc"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemoryOutputStream.data",
									"type": {
										"text": "@property ubyte[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "data"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemoryOutputStream.finalize",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemoryOutputStream.flush",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemoryOutputStream.reserve",
									"type": {
										"text": "void(uint nbytes)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "reserve"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemoryOutputStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemoryOutputStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MemoryOutputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "MemoryOutputStream"
				}
			]
		]
	},
	"name": "vibe.stream.memory"
},
"vibe.inet.url": {
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\url.d",
	"ddoc": "\n\tURL parsing routines.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"ddoc": "\n\tRepresents an absolute or relative file system path.\n\n\tThis struct allows to do safe operations on paths, such as concatenation and sub paths. Checks\n\tare done to disallow invalid operations such as concatenating two absolute paths. It also\n\tvalidates path strings and allows for easy checking of malicious relative paths.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Path.this",
									"type": {
										"text": "ref Path(string pathstr)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "pathstr"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Path.this",
									"type": {
										"text": "ref Path(immutable(PathEntry)[] nodes, bool absolute)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"modifiers": [
															"immutable"
														],
														"typeClass": "primitive",
														"nestedName": "PathEntry",
														"qualifiedName": "vibe.inet.url.PathEntry",
														"name": "PathEntry",
														"moduleName": "vibe.inet.url"
													},
													"attributes": []
												},
												"name": "nodes"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "absolute"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Path.this",
									"type": {
										"text": "ref Path(PathEntry entry)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "entry"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.absolute",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "absolute"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.empty",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.endsWithSlash",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "endsWithSlash"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.endsWithSlash",
									"type": {
										"text": "@property void(bool v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "endsWithSlash"
								}
							],
							[
								{
									"ddoc": " Determines if this path goes outside of its base path (i.e. begins with '..').\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.external",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "external"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.head",
									"type": {
										"text": "const @property PathEntry()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "PathEntry",
											"qualifiedName": "vibe.inet.url.PathEntry",
											"name": "PathEntry",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "head"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.length",
									"type": {
										"text": "const @property uint()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "length"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.nodes",
									"type": {
										"text": "const @property immutable(PathEntry)[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"immutable"
												],
												"typeClass": "primitive",
												"nestedName": "PathEntry",
												"qualifiedName": "vibe.inet.url.PathEntry",
												"name": "PathEntry",
												"moduleName": "vibe.inet.url"
											}
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "nodes"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.normalize",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "normalize"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinary(string OP) if (OP == \"~\")",
									"nestedName": "Path.opBinary",
									"type": {
										"text": "const Path(const Path rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"const"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinary(string OP) if (OP == \"~\")",
									"nestedName": "Path.opBinary",
									"type": {
										"text": "const Path(string rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinary(string OP) if (OP == \"~\")",
									"nestedName": "Path.opBinary",
									"type": {
										"text": "const Path(PathEntry rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.opCmp",
									"type": {
										"text": "const int(ref const(Path) rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"ref"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opCmp"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opDollar(int dim) if (dim == 0)",
									"nestedName": "Path.opDollar",
									"type": {
										"text": "const size_t()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "opDollar"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.opEquals",
									"type": {
										"text": "const bool(ref const(Path) rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"ref"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.opIndex",
									"type": {
										"text": "const PathEntry(uint idx)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "PathEntry",
											"qualifiedName": "vibe.inet.url.PathEntry",
											"name": "PathEntry",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "idx"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opIndex"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opOpAssign(string OP) if (OP == \"~\")",
									"nestedName": "Path.opOpAssign",
									"type": {
										"text": "void(string rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": []
									},
									"name": "opOpAssign"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opOpAssign(string OP) if (OP == \"~\")",
									"nestedName": "Path.opOpAssign",
									"type": {
										"text": "void(PathEntry rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": []
									},
									"name": "opOpAssign"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opOpAssign(string OP) if (OP == \"~\")",
									"nestedName": "Path.opOpAssign",
									"type": {
										"text": "void(Path rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": []
									},
									"name": "opOpAssign"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.opSlice",
									"type": {
										"text": "const Path(uint start, uint end)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "start"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "end"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opSlice"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.parentPath",
									"type": {
										"text": "const @property Path()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "parentPath"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.relativeTo",
									"type": {
										"text": "const Path(const(Path) parentPath)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "parentPath"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "relativeTo"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.startsWith",
									"type": {
										"text": "const bool(const(Path) rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "startsWith"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.toNativeString",
									"type": {
										"text": "const string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toNativeString"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.toString",
									"type": {
										"text": "const string(bool in_url = false)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"defaultValue": "false",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "in_url"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							]
						]
					},
					"nestedName": "Path",
					"name": "Path"
				}
			],
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "PathEntry.this",
									"type": {
										"text": "ref PathEntry(string str)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "PathEntry",
											"qualifiedName": "vibe.inet.url.PathEntry",
											"name": "PathEntry",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "str"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PathEntry.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinary(string OP) if (OP == \"~\")",
									"nestedName": "PathEntry.opBinary",
									"type": {
										"text": "const Path(PathEntry rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PathEntry.opCmp",
									"type": {
										"text": "const int(ref const(PathEntry) rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"ref"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opCmp"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PathEntry.opCmp",
									"type": {
										"text": "const int(string rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opCmp"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PathEntry.opEquals",
									"type": {
										"text": "const bool(ref const(PathEntry) rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"ref"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PathEntry.opEquals",
									"type": {
										"text": "const bool(string rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PathEntry.toString",
									"type": {
										"text": "const string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							]
						]
					},
					"nestedName": "PathEntry",
					"name": "PathEntry"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a URL decomposed into its components.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Url.this",
									"type": {
										"text": "ref Url(string schema, string host, ushort port, Path path)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Url",
											"qualifiedName": "vibe.inet.url.Url",
											"name": "Url",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "schema"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "host"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "path"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.anchor",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "anchor"
								}
							],
							[
								{
									"ddoc": " The host part of the URL\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.host",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "host"
								},
								{
									"ddoc": " The host part of the URL\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.host",
									"type": {
										"text": "@property void(string v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "host"
								}
							],
							[
								{
									"ddoc": " The path part plus query string and anchor\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.localURI",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "localURI"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.localURI",
									"type": {
										"text": "@property void(string str)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "str"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "localURI"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinary(string OP) if (OP == \"~\")",
									"nestedName": "Url.opBinary",
									"type": {
										"text": "const Url(Path rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Url",
											"qualifiedName": "vibe.inet.url.Url",
											"name": "Url",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinary(string OP) if (OP == \"~\")",
									"nestedName": "Url.opBinary",
									"type": {
										"text": "const Url(PathEntry rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Url",
											"qualifiedName": "vibe.inet.url.Url",
											"name": "Url",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.opCmp",
									"type": {
										"text": "const int(ref const(Url) rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Url",
													"qualifiedName": "vibe.inet.url.Url",
													"name": "Url",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"ref"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opCmp"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.opEquals",
									"type": {
										"text": "const bool(ref const(Url) rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Url",
													"qualifiedName": "vibe.inet.url.Url",
													"name": "Url",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"ref"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opOpAssign(string OP) if (OP == \"~\")",
									"nestedName": "Url.opOpAssign",
									"type": {
										"text": "void(Path rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": []
									},
									"name": "opOpAssign"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opOpAssign(string OP) if (OP == \"~\")",
									"nestedName": "Url.opOpAssign",
									"type": {
										"text": "void(PathEntry rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": []
									},
									"name": "opOpAssign"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.parentUrl",
									"type": {
										"text": "const @property Url()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Url",
											"qualifiedName": "vibe.inet.url.Url",
											"name": "Url",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "parentUrl"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.parse",
									"type": {
										"text": "Url(string str)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Url",
											"qualifiedName": "vibe.inet.url.Url",
											"name": "Url",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "str"
											}
										],
										"attributes": []
									},
									"name": "parse"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.password",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "password"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.password",
									"type": {
										"text": "@property void(string v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "password"
								}
							],
							[
								{
									"ddoc": " The path part of the URL\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.pathString",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "pathString"
								},
								{
									"ddoc": " The path part of the URL\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.path",
									"type": {
										"text": "const @property Path()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "path"
								},
								{
									"ddoc": " The path part of the URL\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.path",
									"type": {
										"text": "@property void(Path p)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "p"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "path"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.port",
									"type": {
										"text": "const @property ushort()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ushort",
											"qualifiedName": "ushort",
											"name": "ushort",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "port"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.port",
									"type": {
										"text": "@property void(ushort v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "port"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.queryString",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "queryString"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.queryString",
									"type": {
										"text": "@property void(string v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "queryString"
								}
							],
							[
								{
									"ddoc": " The schema/protocol part of the URL\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.schema",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "schema"
								},
								{
									"ddoc": " The schema/protocol part of the URL\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.schema",
									"type": {
										"text": "@property void(string v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "schema"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.startsWith",
									"type": {
										"text": "const bool(const(Url) rhs)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Url",
													"qualifiedName": "vibe.inet.url.Url",
													"name": "Url",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "startsWith"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.toString",
									"type": {
										"text": "const string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.username",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "username"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.username",
									"type": {
										"text": "@property void(string v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "username"
								}
							]
						]
					},
					"nestedName": "Url",
					"name": "Url"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": " Joins two path strings. subpath must be relative.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "joinPath",
					"type": {
						"text": "string(string basepath, string subpath)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "basepath"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "subpath"
							}
						],
						"attributes": []
					},
					"name": "joinPath"
				}
			],
			[
				{
					"ddoc": " Splits up a path string into its elements/folders\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "splitPath",
					"type": {
						"text": "PathEntry[](string path)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "PathEntry",
								"qualifiedName": "vibe.inet.url.PathEntry",
								"name": "PathEntry",
								"moduleName": "vibe.inet.url"
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "path"
							}
						],
						"attributes": []
					},
					"name": "splitPath"
				}
			]
		]
	},
	"name": "vibe.inet.url"
},
"vibe.mail.smtp": {
	"kind": "module",
	"file": "..\\source\\vibe\\mail\\smtp.d",
	"ddoc": "\n\tSMTP client implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpAuthType.None",
							"name": "None"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpAuthType.Plain",
							"name": "Plain"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpAuthType.Login",
							"name": "Login"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpAuthType.CramMd5",
							"name": "CramMd5"
						}
					],
					"nestedName": "SmtpAuthType",
					"name": "SmtpAuthType",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpConnectionType.Plain",
							"name": "Plain"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpConnectionType.SSL",
							"name": "SSL"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpConnectionType.StartTLS",
							"name": "StartTLS"
						}
					],
					"nestedName": "SmtpConnectionType",
					"name": "SmtpConnectionType",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus._Success",
							"name": "_Success"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.SystemStatus",
							"name": "SystemStatus"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.HelpMessage",
							"name": "HelpMessage"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.ServiceReady",
							"name": "ServiceReady"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.ServiceClosing",
							"name": "ServiceClosing"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.Success",
							"name": "Success"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.Forwarding",
							"name": "Forwarding"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.ServerAuthReady",
							"name": "ServerAuthReady"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.StartMailInput",
							"name": "StartMailInput"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.ServiceUnavailable",
							"name": "ServiceUnavailable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.MailboxTemporarilyUnavailable",
							"name": "MailboxTemporarilyUnavailable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.ProcessingError",
							"name": "ProcessingError"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.OutOfDiskSpace",
							"name": "OutOfDiskSpace"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.CommandUnrecognized",
							"name": "CommandUnrecognized"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.InvalidParameters",
							"name": "InvalidParameters"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.CommandNotImplemented",
							"name": "CommandNotImplemented"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.BadCommandSequence",
							"name": "BadCommandSequence"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.CommandParameterNotImplemented",
							"name": "CommandParameterNotImplemented"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.DomainAcceptsNoMail",
							"name": "DomainAcceptsNoMail"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.AccessDenied",
							"name": "AccessDenied"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.MailboxUnavailable",
							"name": "MailboxUnavailable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.UserNotLocal",
							"name": "UserNotLocal"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.ExceededStorageAllocation",
							"name": "ExceededStorageAllocation"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.MailboxNameNotAllowed",
							"name": "MailboxNameNotAllowed"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.TransactionFailed",
							"name": "TransactionFailed"
						}
					],
					"nestedName": "SmtpStatus",
					"name": "SmtpStatus",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Mail.bodyText",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "bodyText"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Mail.headers",
									"type": {
										"kind": "type",
										"text": "StrMapCI",
										"typeClass": "primitive",
										"nestedName": "StrMapCI",
										"qualifiedName": "vibe.http.common.StrMapCI",
										"name": "StrMapCI",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "headers"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Mail",
					"name": "Mail"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "SmtpClientSettings.this",
									"type": {
										"text": "SmtpClientSettings()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SmtpClientSettings",
											"qualifiedName": "vibe.mail.smtp.SmtpClientSettings",
											"name": "SmtpClientSettings",
											"moduleName": "vibe.mail.smtp"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "SmtpClientSettings.this",
									"type": {
										"text": "SmtpClientSettings(string host, ushort port)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SmtpClientSettings",
											"qualifiedName": "vibe.mail.smtp.SmtpClientSettings",
											"name": "SmtpClientSettings",
											"moduleName": "vibe.mail.smtp"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "host"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.authType",
									"type": {
										"kind": "type",
										"text": "SmtpAuthType",
										"typeClass": "primitive",
										"nestedName": "SmtpAuthType",
										"qualifiedName": "vibe.mail.smtp.SmtpAuthType",
										"name": "SmtpAuthType",
										"moduleName": "vibe.mail.smtp",
										"attributes": []
									},
									"name": "authType"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.connectionType",
									"type": {
										"kind": "type",
										"text": "SmtpConnectionType",
										"typeClass": "primitive",
										"nestedName": "SmtpConnectionType",
										"qualifiedName": "vibe.mail.smtp.SmtpConnectionType",
										"name": "SmtpConnectionType",
										"moduleName": "vibe.mail.smtp",
										"attributes": []
									},
									"name": "connectionType"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.host",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "host"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.localname",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "localname"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.password",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "password"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.port",
									"type": {
										"kind": "type",
										"text": "ushort",
										"typeClass": "primitive",
										"nestedName": "ushort",
										"qualifiedName": "ushort",
										"name": "ushort",
										"moduleName": "",
										"attributes": []
									},
									"name": "port"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.useTLS",
									"type": {
										"kind": "type",
										"text": "bool",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": "",
										"attributes": []
									},
									"name": "useTLS"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.username",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "username"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "SmtpClientSettings",
					"name": "SmtpClientSettings"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "sendMail",
					"type": {
						"text": "void(SmtpClientSettings settings, Mail mail)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "SmtpClientSettings",
									"qualifiedName": "vibe.mail.smtp.SmtpClientSettings",
									"name": "SmtpClientSettings",
									"moduleName": "vibe.mail.smtp",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Mail",
									"qualifiedName": "vibe.mail.smtp.Mail",
									"name": "Mail",
									"moduleName": "vibe.mail.smtp",
									"attributes": []
								},
								"name": "mail"
							}
						],
						"attributes": []
					},
					"name": "sendMail"
				}
			]
		]
	},
	"name": "vibe.mail.smtp"
},
"vibe.stream.ssl": {
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\ssl.d",
	"ddoc": "\n\tSSL/TLS stream implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SslStreamState.Connecting",
							"name": "Connecting"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SslStreamState.Accepting",
							"name": "Accepting"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SslStreamState.Connected",
							"name": "Connected"
						}
					],
					"nestedName": "SslStreamState",
					"name": "SslStreamState",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "SslStream.this",
									"type": {
										"text": "SslStream(Stream underlying, SslContext ctx, SslStreamState state)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SslStream",
											"qualifiedName": "vibe.stream.ssl.SslStream",
											"name": "SslStream",
											"moduleName": "vibe.stream.ssl"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Stream",
													"qualifiedName": "vibe.stream.stream.Stream",
													"name": "Stream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "underlying"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "SslContext",
													"qualifiedName": "vibe.crypto.ssl.SslContext",
													"name": "SslContext",
													"moduleName": "vibe.crypto.ssl",
													"attributes": []
												},
												"name": "ctx"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "SslStreamState",
													"qualifiedName": "vibe.stream.ssl.SslStreamState",
													"name": "SslStreamState",
													"moduleName": "vibe.stream.ssl",
													"attributes": []
												},
												"name": "state"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SslStream.dataAvailableForRead",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dataAvailableForRead"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SslStream.empty",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SslStream.finalize",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SslStream.flush",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SslStream.leastSize",
									"type": {
										"text": "@property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SslStream.peek",
									"type": {
										"text": "const(ubyte)[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"const"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": []
									},
									"name": "peek"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SslStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SslStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes_, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes_"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SslStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "SslStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "Stream",
							"typeClass": "primitive",
							"nestedName": "Stream",
							"qualifiedName": "vibe.stream.stream.Stream",
							"name": "Stream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "SslStream"
				}
			]
		]
	},
	"name": "vibe.stream.ssl"
},
"vibe.templ.utils": {
	"kind": "module",
	"file": "..\\source\\vibe\\templ\\utils.d",
	"ddoc": "\n\tUtility functions for dealing with templates.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"templates": [
			[
				{
					"ddoc": " When mixed in, makes all ALIASES available in the local scope\n",
					"kind": "template",
					"protection": "public",
					"members": {
					},
					"nestedName": "localAliases(int i,ALIASES...)",
					"name": "localAliases(int i,ALIASES...)"
				}
			],
			[
				{
					"ddoc": " When mixed in, makes all ALIASES available in the local scope. Note that there must be a\n Variant[] args__ available that matches TYPES_AND_NAMES\n",
					"kind": "template",
					"protection": "public",
					"members": {
					},
					"nestedName": "localAliasesCompat(int i,TYPES_AND_NAMES...)",
					"name": "localAliasesCompat(int i,TYPES_AND_NAMES...)"
				}
			]
		],
		"structs": [
			[
				{
					"ddoc": "\n\tMakes the variable aliases passed to one of the injectors of the inject!() template accessible\n\tto the local function.\n\n\tExamples:\n\t\t---\n\t\tvoid authInjector(alias Next, Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\tstring userinfo;\n\t\t\t// TODO: fill userinfo with content, throw an Unauthorized HTTP error etc.\n\t\t\tNext!(Vars, userinfo)(req, res);\n\t\t}\n\n\t\tvoid somethingInjector(alias Next, Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\t// access the userinfo variable:\n\t\t\tif( InjectedParams!Aliases.userinfo.length == 0 ) return;\n\n\t\t\t// it's also possible to declare a pseudo-\n\t\t\t// variable like this to access the parameters:\n\t\t\tInjectedParams!Aliases params;\n\t\t\tif( params.userinfo == \"peter\" )\n\t\t\t\tthrow Exception(\"Not allowed!\")\n\n\t\t\tNext!(Vars)(req, res);\n\t\t}\n\t\t---\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"structs": [
							[
								{
									"kind": "struct",
									"protection": "public",
									"members": {
									},
									"nestedName": "InjectedParams(Aliases).InjectedParams",
									"name": "InjectedParams"
								}
							]
						]
					},
					"nestedName": "InjectedParams(Aliases)",
					"name": "InjectedParams(Aliases)"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tAllows to pass additional variables to a function that renders a templated page.\n\n\tThis function is useful if you need to support additional layers of functionality that should\n\tbe available to your views, such as authentication. This function allows to define variables\n\tthat should be usable from templates using so called \"injectors\". Each injector is a template\n\tfunction that can add its own parameters.\n\n\tIf you should need explicit access to one of the parameters of an upstream injector, you can use\n\tthe InjectedParams!() template.\n\n\tNOTE: this function requires at least DMD 2.060, as it suffers from DMD BUG 2962.\n\n\tExamples:\n\n\t\tThe following example will render the template \"home.dt\" and make the variables 'userinfo',\n\t\t'something_else' and 'message' available. Before the 'page' function is called,\n\t\t'authInjector' and 'somethingInjector' can process the request and decide what to do.\n\n\t\t---\n\t\tvoid authInjector(alias Next, Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\tstring userinfo;\n\t\t\t// TODO: fill userinfo with content, throw an Unauthorized HTTP error etc.\n\t\t\tNext!(Vars, userinfo)(req, res);\n\t\t}\n\n\t\tvoid somethingInjector(alias Next, Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\tstring something_else;\n\t\t\tNext!(Vars, something_else)(req, res);\n\t\t}\n\n\t\tvoid page(Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\tstring message = \"Welcome to the example page!\"\n\t\t\tres.render!(\"home.dt\", Aliases, message);\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto router = new UrlRouter;\n\t\t\trouter.get(\"/\", inject!(page, authInjector, somethingInjector));\n\t\t}\n\t\t---\n",
					"kind": "function",
					"templateName": "inject(alias Page,Injectors...)",
					"nestedName": "inject",
					"type": {
						"text": "@property ()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "",
							"qualifiedName": "",
							"name": "constructor",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": [
							"@property"
						]
					},
					"name": "inject"
				}
			]
		]
	},
	"name": "vibe.templ.utils"
},
"vibe.utils.memory": {
	"kind": "module",
	"file": "..\\source\\vibe\\utils\\memory.d",
	"ddoc": "\n\tUtiltiy functions for memory management\n\n\tNote that this module currently is a big sand box for testing allocation related stuff.\n\tNothing here, including the interfaces, is final but rather a lot of experimentation.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"templates": [
			[
				{
					"kind": "template",
					"protection": "public",
					"members": {
					},
					"nestedName": "AllocSize(T)",
					"name": "AllocSize(T)"
				}
			],
			[
				{
					"kind": "template",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"templateName": "alloc(ARGS...)",
									"nestedName": "FreeListObjectAlloc(T,bool USE_GC = true,bool INIT = true).alloc",
									"type": {
										"text": "TR(ARGS args)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "TR",
											"qualifiedName": "TR",
											"name": "TR",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ARGS",
													"qualifiedName": "ARGS",
													"name": "ARGS",
													"moduleName": "",
													"attributes": []
												},
												"name": "args"
											}
										],
										"attributes": []
									},
									"name": "alloc"
								}
							],
							[
								{
									"kind": "function",
									"nestedName": "FreeListObjectAlloc(T,bool USE_GC = true,bool INIT = true).free",
									"type": {
										"text": "void(TR obj)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "TR",
													"qualifiedName": "TR",
													"name": "TR",
													"moduleName": "",
													"attributes": []
												},
												"name": "obj"
											}
										],
										"attributes": []
									},
									"name": "free"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"nestedName": "FreeListObjectAlloc(T,bool USE_GC = true,bool INIT = true).ElemSize",
									"name": "ElemSize"
								}
							]
						]
					},
					"nestedName": "FreeListObjectAlloc(T,bool USE_GC = true,bool INIT = true)",
					"name": "FreeListObjectAlloc(T,bool USE_GC = true,bool INIT = true)"
				}
			]
		],
		"structs": [
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"structs": [
							[
								{
									"kind": "struct",
									"protection": "public",
									"members": {
										"functions": [
											[
												{
													"kind": "function",
													"nestedName": "FreeListRef(T,bool INIT = true).FreeListRef.clear",
													"type": {
														"text": "void()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": []
													},
													"name": "clear"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "FreeListRef(T,bool INIT = true).FreeListRef.get",
													"type": {
														"text": "inout inout(TR)()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"modifiers": [
																"inout"
															],
															"typeClass": "primitive",
															"nestedName": "TR",
															"qualifiedName": "TR",
															"name": "TR",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": [
															"inout"
														]
													},
													"name": "get"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "FreeListRef(T,bool INIT = true).FreeListRef.opAssign",
													"type": {
														"text": "void(FreeListRef other)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "FreeListRef",
																	"qualifiedName": "FreeListRef",
																	"name": "FreeListRef",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "other"
															}
														],
														"attributes": []
													},
													"name": "opAssign"
												}
											],
											[
												{
													"kind": "function",
													"templateName": "opCall(ARGS...)",
													"nestedName": "FreeListRef(T,bool INIT = true).FreeListRef.opCall",
													"type": {
														"text": "FreeListRef(ARGS args)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "FreeListRef",
															"qualifiedName": "FreeListRef",
															"name": "FreeListRef",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "primitive",
																	"nestedName": "ARGS",
																	"qualifiedName": "ARGS",
																	"name": "ARGS",
																	"moduleName": "",
																	"attributes": []
																},
																"name": "args"
															}
														],
														"attributes": []
													},
													"name": "opCall"
												}
											],
											[
												{
													"kind": "function",
													"nestedName": "FreeListRef(T,bool INIT = true).FreeListRef.refCount",
													"type": {
														"text": "int()",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "int",
															"qualifiedName": "int",
															"name": "int",
															"moduleName": ""
														},
														"parameters": [],
														"attributes": []
													},
													"name": "refCount"
												}
											]
										],
										"variables": [
											[
												{
													"kind": "variable",
													"nestedName": "FreeListRef(T,bool INIT = true).FreeListRef.ElemSize",
													"name": "ElemSize"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "FreeListRef(T,bool INIT = true).FreeListRef.m_magic",
													"type": {
														"kind": "type",
														"text": "size_t",
														"typeClass": "primitive",
														"nestedName": "size_t",
														"qualifiedName": "size_t",
														"name": "size_t",
														"moduleName": "",
														"attributes": []
													},
													"name": "m_magic"
												}
											],
											[
												{
													"kind": "variable",
													"nestedName": "FreeListRef(T,bool INIT = true).FreeListRef.m_object",
													"type": {
														"kind": "type",
														"text": "TR",
														"typeClass": "primitive",
														"nestedName": "TR",
														"qualifiedName": "TR",
														"name": "TR",
														"moduleName": "",
														"attributes": []
													},
													"name": "m_object"
												}
											]
										]
									},
									"nestedName": "FreeListRef(T,bool INIT = true).FreeListRef",
									"name": "FreeListRef"
								}
							]
						]
					},
					"nestedName": "FreeListRef(T,bool INIT = true)",
					"name": "FreeListRef(T,bool INIT = true)"
				}
			]
		],
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "AutoFreeListAllocator.this",
									"type": {
										"text": "AutoFreeListAllocator(Allocator base_allocator)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "AutoFreeListAllocator",
											"qualifiedName": "vibe.utils.memory.AutoFreeListAllocator",
											"name": "AutoFreeListAllocator",
											"moduleName": "vibe.utils.memory"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Allocator",
													"qualifiedName": "vibe.utils.memory.Allocator",
													"name": "Allocator",
													"moduleName": "vibe.utils.memory",
													"attributes": []
												},
												"name": "base_allocator"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "AutoFreeListAllocator.alloc",
									"type": {
										"text": "void[](uint sz)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "sz"
											}
										],
										"attributes": []
									},
									"name": "alloc"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "AutoFreeListAllocator.free",
									"type": {
										"text": "void(void[] data)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											}
										],
										"attributes": []
									},
									"name": "free"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "AutoFreeListAllocator.realloc",
									"type": {
										"text": "void[](void[] data, uint sz)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "sz"
											}
										],
										"attributes": []
									},
									"name": "realloc"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "AutoFreeListAllocator",
					"interfaces": [
						{
							"kind": "type",
							"text": "Allocator",
							"typeClass": "primitive",
							"nestedName": "Allocator",
							"qualifiedName": "vibe.utils.memory.Allocator",
							"name": "Allocator",
							"moduleName": "vibe.utils.memory",
							"attributes": []
						}
					],
					"name": "AutoFreeListAllocator"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "DebugAllocator.this",
									"type": {
										"text": "DebugAllocator(Allocator base_allocator)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "DebugAllocator",
											"qualifiedName": "vibe.utils.memory.DebugAllocator",
											"name": "DebugAllocator",
											"moduleName": "vibe.utils.memory"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Allocator",
													"qualifiedName": "vibe.utils.memory.Allocator",
													"name": "Allocator",
													"moduleName": "vibe.utils.memory",
													"attributes": []
												},
												"name": "base_allocator"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "DebugAllocator.alloc",
									"type": {
										"text": "void[](uint sz)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "sz"
											}
										],
										"attributes": []
									},
									"name": "alloc"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "DebugAllocator.allocatedBlockCount",
									"type": {
										"text": "const @property uint()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "allocatedBlockCount"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "DebugAllocator.bytesAllocated",
									"type": {
										"text": "const @property uint()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "bytesAllocated"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "DebugAllocator.free",
									"type": {
										"text": "void(void[] mem)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "mem"
											}
										],
										"attributes": []
									},
									"name": "free"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "DebugAllocator.maxBytesAllocated",
									"type": {
										"text": "const @property uint()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "maxBytesAllocated"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "DebugAllocator.realloc",
									"type": {
										"text": "void[](void[] mem, uint new_size)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "mem"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "new_size"
											}
										],
										"attributes": []
									},
									"name": "realloc"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "DebugAllocator",
					"interfaces": [
						{
							"kind": "type",
							"text": "Allocator",
							"typeClass": "primitive",
							"nestedName": "Allocator",
							"qualifiedName": "vibe.utils.memory.Allocator",
							"name": "Allocator",
							"moduleName": "vibe.utils.memory",
							"attributes": []
						}
					],
					"name": "DebugAllocator"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "FreeListAlloc.this",
									"type": {
										"text": "FreeListAlloc(uint elem_size, Allocator base_allocator)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "FreeListAlloc",
											"qualifiedName": "vibe.utils.memory.FreeListAlloc",
											"name": "FreeListAlloc",
											"moduleName": "vibe.utils.memory"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "elem_size"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Allocator",
													"qualifiedName": "vibe.utils.memory.Allocator",
													"name": "Allocator",
													"moduleName": "vibe.utils.memory",
													"attributes": []
												},
												"name": "base_allocator"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FreeListAlloc.alloc",
									"type": {
										"text": "void[](uint sz)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "sz"
											}
										],
										"attributes": []
									},
									"name": "alloc"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FreeListAlloc.elementSize",
									"type": {
										"text": "const @property uint()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "elementSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FreeListAlloc.free",
									"type": {
										"text": "void(void[] mem)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "mem"
											}
										],
										"attributes": []
									},
									"name": "free"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FreeListAlloc.realloc",
									"type": {
										"text": "void[](void[] mem, uint sz)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "mem"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "sz"
											}
										],
										"attributes": []
									},
									"name": "realloc"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "FreeListAlloc",
					"interfaces": [
						{
							"kind": "type",
							"text": "Allocator",
							"typeClass": "primitive",
							"nestedName": "Allocator",
							"qualifiedName": "vibe.utils.memory.Allocator",
							"name": "Allocator",
							"moduleName": "vibe.utils.memory",
							"attributes": []
						}
					],
					"name": "FreeListAlloc"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "GCAllocator.alloc",
									"type": {
										"text": "void[](uint sz)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "sz"
											}
										],
										"attributes": []
									},
									"name": "alloc"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "GCAllocator.free",
									"type": {
										"text": "void(void[] mem)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "mem"
											}
										],
										"attributes": []
									},
									"name": "free"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "GCAllocator.realloc",
									"type": {
										"text": "void[](void[] mem, uint new_size)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "mem"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "new_size"
											}
										],
										"attributes": []
									},
									"name": "realloc"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "GCAllocator",
					"interfaces": [
						{
							"kind": "type",
							"text": "Allocator",
							"typeClass": "primitive",
							"nestedName": "Allocator",
							"qualifiedName": "vibe.utils.memory.Allocator",
							"name": "Allocator",
							"moduleName": "vibe.utils.memory",
							"attributes": []
						}
					],
					"name": "GCAllocator"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MallocAllocator.alloc",
									"type": {
										"text": "void[](uint sz)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "sz"
											}
										],
										"attributes": []
									},
									"name": "alloc"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MallocAllocator.free",
									"type": {
										"text": "void(void[] mem)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "mem"
											}
										],
										"attributes": []
									},
									"name": "free"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MallocAllocator.realloc",
									"type": {
										"text": "void[](void[] mem, uint new_size)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "mem"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "new_size"
											}
										],
										"attributes": []
									},
									"name": "realloc"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MallocAllocator",
					"interfaces": [
						{
							"kind": "type",
							"text": "Allocator",
							"typeClass": "primitive",
							"nestedName": "Allocator",
							"qualifiedName": "vibe.utils.memory.Allocator",
							"name": "Allocator",
							"moduleName": "vibe.utils.memory",
							"attributes": []
						}
					],
					"name": "MallocAllocator"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "PoolAllocator.this",
									"type": {
										"text": "PoolAllocator(uint pool_size, Allocator base)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "PoolAllocator",
											"qualifiedName": "vibe.utils.memory.PoolAllocator",
											"name": "PoolAllocator",
											"moduleName": "vibe.utils.memory"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "pool_size"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Allocator",
													"qualifiedName": "vibe.utils.memory.Allocator",
													"name": "Allocator",
													"moduleName": "vibe.utils.memory",
													"attributes": []
												},
												"name": "base"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"structs": [
							[
								{
									"kind": "struct",
									"protection": "public",
									"members": {
										"variables": [
											[
												{
													"kind": "variable",
													"protection": "public",
													"nestedName": "PoolAllocator.Destructor.destructor",
													"type": {
														"text": "void function(void*)",
														"typeClass": "function",
														"returnType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"parameters": [
															{
																"type": {
																	"kind": "type",
																	"typeClass": "pointer",
																	"elementType": {
																		"kind": "type",
																		"typeClass": "primitive",
																		"nestedName": "void",
																		"qualifiedName": "void",
																		"name": "void",
																		"moduleName": ""
																	},
																	"attributes": []
																}
															}
														],
														"attributes": []
													},
													"name": "destructor"
												}
											],
											[
												{
													"kind": "variable",
													"protection": "public",
													"nestedName": "PoolAllocator.Destructor.next",
													"type": {
														"kind": "type",
														"text": "Destructor*",
														"typeClass": "pointer",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "Destructor",
															"qualifiedName": "Destructor",
															"name": "Destructor",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "next"
												}
											],
											[
												{
													"kind": "variable",
													"protection": "public",
													"nestedName": "PoolAllocator.Destructor.object",
													"type": {
														"kind": "type",
														"text": "void*",
														"typeClass": "pointer",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "object"
												}
											]
										]
									},
									"nestedName": "PoolAllocator.Destructor",
									"name": "Destructor"
								}
							],
							[
								{
									"kind": "struct",
									"protection": "public",
									"members": {
										"variables": [
											[
												{
													"kind": "variable",
													"protection": "public",
													"nestedName": "PoolAllocator.Pool.data",
													"type": {
														"kind": "type",
														"text": "void[]",
														"typeClass": "array",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "data"
												}
											],
											[
												{
													"kind": "variable",
													"protection": "public",
													"nestedName": "PoolAllocator.Pool.next",
													"type": {
														"kind": "type",
														"text": "Pool*",
														"typeClass": "pointer",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "Pool",
															"qualifiedName": "Pool",
															"name": "Pool",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "next"
												}
											],
											[
												{
													"kind": "variable",
													"protection": "public",
													"nestedName": "PoolAllocator.Pool.remaining",
													"type": {
														"kind": "type",
														"text": "void[]",
														"typeClass": "array",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "void",
															"qualifiedName": "void",
															"name": "void",
															"moduleName": ""
														},
														"attributes": []
													},
													"name": "remaining"
												}
											]
										]
									},
									"nestedName": "PoolAllocator.Pool",
									"name": "Pool"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PoolAllocator.alloc",
									"type": {
										"text": "void[](uint sz)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "sz"
											}
										],
										"attributes": []
									},
									"name": "alloc"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "destroy(T)",
									"nestedName": "PoolAllocator.destroy",
									"type": {
										"text": "(void* ptr)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "",
											"qualifiedName": "",
											"name": "constructor",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "ptr"
											}
										],
										"attributes": []
									},
									"name": "destroy"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PoolAllocator.free",
									"type": {
										"text": "void(void[] mem)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "mem"
											}
										],
										"attributes": []
									},
									"name": "free"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PoolAllocator.freeAll",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "freeAll"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PoolAllocator.realloc",
									"type": {
										"text": "void[](void[] arr, uint newsize)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "arr"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "newsize"
											}
										],
										"attributes": []
									},
									"name": "realloc"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PoolAllocator.reset",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "reset"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "PoolAllocator",
					"interfaces": [
						{
							"kind": "type",
							"text": "Allocator",
							"typeClass": "primitive",
							"nestedName": "Allocator",
							"qualifiedName": "vibe.utils.memory.Allocator",
							"name": "Allocator",
							"moduleName": "vibe.utils.memory",
							"attributes": []
						}
					],
					"name": "PoolAllocator"
				}
			]
		],
		"interfaces": [
			[
				{
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Allocator.alloc",
									"type": {
										"text": "void[](uint sz)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "sz"
											}
										],
										"attributes": []
									},
									"name": "alloc"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Allocator.free",
									"type": {
										"text": "void(void[] mem)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "mem"
											}
										],
										"attributes": []
									},
									"name": "free"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Allocator.realloc",
									"type": {
										"text": "void[](void[] mem, uint new_sz)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "void",
												"qualifiedName": "void",
												"name": "void",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "mem"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "new_sz"
											}
										],
										"attributes": []
									},
									"name": "realloc"
								}
							]
						]
					},
					"nestedName": "Allocator",
					"name": "Allocator"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"templateName": "allocArray(T,bool MANAGED = true)",
					"nestedName": "allocArray",
					"type": {
						"text": "T[](Allocator allocator, size_t n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "T",
								"qualifiedName": "T",
								"name": "T",
								"moduleName": ""
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Allocator",
									"qualifiedName": "vibe.utils.memory.Allocator",
									"name": "Allocator",
									"moduleName": "vibe.utils.memory",
									"attributes": []
								},
								"name": "allocator"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "size_t",
									"qualifiedName": "size_t",
									"name": "size_t",
									"moduleName": "",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "allocArray"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "allocObject(T,bool MANAGED = true,ARGS...)",
					"nestedName": "allocObject",
					"type": {
						"text": "(Allocator allocator, ARGS args)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "",
							"qualifiedName": "",
							"name": "constructor",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Allocator",
									"qualifiedName": "vibe.utils.memory.Allocator",
									"name": "Allocator",
									"moduleName": "vibe.utils.memory",
									"attributes": []
								},
								"name": "allocator"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ARGS",
									"qualifiedName": "ARGS",
									"name": "ARGS",
									"moduleName": "",
									"attributes": []
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "allocObject"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "defaultAllocator",
					"type": {
						"text": "Allocator()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Allocator",
							"qualifiedName": "vibe.utils.memory.Allocator",
							"name": "Allocator",
							"moduleName": "vibe.utils.memory"
						},
						"parameters": [],
						"attributes": []
					},
					"name": "defaultAllocator"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "manualAllocator",
					"type": {
						"text": "Allocator()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Allocator",
							"qualifiedName": "vibe.utils.memory.Allocator",
							"name": "Allocator",
							"moduleName": "vibe.utils.memory"
						},
						"parameters": [],
						"attributes": []
					},
					"name": "manualAllocator"
				}
			]
		]
	},
	"name": "vibe.utils.memory"
},
"vibe.http.status": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\status.d",
	"ddoc": "\n\tList of all standard HTTP status codes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n",
	"members": {
		"enums": [
			[
				{
					"ddoc": "\n\tDefinitions of all standard HTTP status codes.\n",
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Continue",
							"name": "Continue"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.SwitchingProtocols",
							"name": "SwitchingProtocols"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.OK",
							"name": "OK"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Created",
							"name": "Created"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Accepted",
							"name": "Accepted"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NonAuthoritativeInformation",
							"name": "NonAuthoritativeInformation"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NoContent",
							"name": "NoContent"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.ResetContent",
							"name": "ResetContent"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.PartialContent",
							"name": "PartialContent"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.MultipleChoices",
							"name": "MultipleChoices"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.MovedPermanently",
							"name": "MovedPermanently"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Found",
							"name": "Found"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.SeeOther",
							"name": "SeeOther"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NotModified",
							"name": "NotModified"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.UseProxy",
							"name": "UseProxy"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.TemporaryRedirect",
							"name": "TemporaryRedirect"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.BadRequest",
							"name": "BadRequest"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Unauthorized",
							"name": "Unauthorized"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.PaymentRequired",
							"name": "PaymentRequired"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Forbidden",
							"name": "Forbidden"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NotFound",
							"name": "NotFound"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.MethodNotAllowed",
							"name": "MethodNotAllowed"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NotAcceptable",
							"name": "NotAcceptable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.ProxyAuthenticationRequired",
							"name": "ProxyAuthenticationRequired"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.RequestTimeout",
							"name": "RequestTimeout"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Conflict",
							"name": "Conflict"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Gone",
							"name": "Gone"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.LengthRequired",
							"name": "LengthRequired"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.PreconditionFailed",
							"name": "PreconditionFailed"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.RequestEntityTooLarge",
							"name": "RequestEntityTooLarge"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.RequestURITooLarge",
							"name": "RequestURITooLarge"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.UnsupportedMediaType",
							"name": "UnsupportedMediaType"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Requestedrangenotsatisfiable",
							"name": "Requestedrangenotsatisfiable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.ExpectationFailed",
							"name": "ExpectationFailed"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.InternalServerError",
							"name": "InternalServerError"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NotImplemented",
							"name": "NotImplemented"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.BadGateway",
							"name": "BadGateway"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.ServiceUnavailable",
							"name": "ServiceUnavailable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.GatewayTimeout",
							"name": "GatewayTimeout"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.HTTPVersionNotSupported",
							"name": "HTTPVersionNotSupported"
						}
					],
					"nestedName": "HttpStatus",
					"name": "HttpStatus",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tReturns a standard text description of the specified HTTP status code.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "httpStatusText",
					"type": {
						"text": "string(int code)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "code"
							}
						],
						"attributes": []
					},
					"name": "httpStatusText"
				}
			],
			[
				{
					"ddoc": "\n\tDetermines if the given status code justifies closing the connection (e.g. evil big request bodies)\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "justifiesConnectionClose",
					"type": {
						"text": "bool(int status)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "status"
							}
						],
						"attributes": []
					},
					"name": "justifiesConnectionClose"
				}
			]
		]
	},
	"name": "vibe.http.status"
},
"vibe.http.websockets": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\websockets.d",
	"ddoc": "\n\tWebSocket support and fallbacks for older browsers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FrameOpcode.Continuation",
							"name": "Continuation"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FrameOpcode.Text",
							"name": "Text"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FrameOpcode.Binary",
							"name": "Binary"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FrameOpcode.Close",
							"name": "Close"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FrameOpcode.Ping",
							"name": "Ping"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FrameOpcode.Pong",
							"name": "Pong"
						}
					],
					"nestedName": "FrameOpcode",
					"name": "FrameOpcode",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"structs": [
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Frame.readFrame",
									"type": {
										"text": "Frame(InputStream stream)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Frame",
											"qualifiedName": "vibe.http.websockets.Frame",
											"name": "Frame",
											"moduleName": "vibe.http.websockets"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											}
										],
										"attributes": []
									},
									"name": "readFrame"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Frame.writeFrame",
									"type": {
										"text": "void(OutputStream stream)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "OutputStream",
													"qualifiedName": "vibe.stream.stream.OutputStream",
													"name": "OutputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											}
										],
										"attributes": []
									},
									"name": "writeFrame"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Frame.fin",
									"type": {
										"kind": "type",
										"text": "bool",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": "",
										"attributes": []
									},
									"name": "fin"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Frame.opcode",
									"type": {
										"kind": "type",
										"text": "FrameOpcode",
										"typeClass": "primitive",
										"nestedName": "FrameOpcode",
										"qualifiedName": "vibe.http.websockets.FrameOpcode",
										"name": "FrameOpcode",
										"moduleName": "vibe.http.websockets",
										"attributes": []
									},
									"name": "opcode"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Frame.payload",
									"type": {
										"kind": "type",
										"text": "ubyte[]",
										"typeClass": "array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ubyte",
											"qualifiedName": "ubyte",
											"name": "ubyte",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "payload"
								}
							]
						]
					},
					"nestedName": "Frame",
					"name": "Frame"
				}
			]
		],
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "IncommingWebSocketMessage.this",
									"type": {
										"text": "IncommingWebSocketMessage(Stream conn)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "IncommingWebSocketMessage",
											"qualifiedName": "vibe.http.websockets.IncommingWebSocketMessage",
											"name": "IncommingWebSocketMessage",
											"moduleName": "vibe.http.websockets"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Stream",
													"qualifiedName": "vibe.stream.stream.Stream",
													"name": "Stream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "conn"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "IncommingWebSocketMessage.dataAvailableForRead",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dataAvailableForRead"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "IncommingWebSocketMessage.empty",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "IncommingWebSocketMessage.leastSize",
									"type": {
										"text": "const @property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "IncommingWebSocketMessage.peek",
									"type": {
										"text": "const(ubyte)[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"const"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": []
									},
									"name": "peek"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "IncommingWebSocketMessage.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "IncommingWebSocketMessage",
					"interfaces": [
						{
							"kind": "type",
							"text": "InputStream",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "IncommingWebSocketMessage"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "OutgoingWebSocketMessage.this",
									"type": {
										"text": "OutgoingWebSocketMessage(Stream conn)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "OutgoingWebSocketMessage",
											"qualifiedName": "vibe.http.websockets.OutgoingWebSocketMessage",
											"name": "OutgoingWebSocketMessage",
											"moduleName": "vibe.http.websockets"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Stream",
													"qualifiedName": "vibe.stream.stream.Stream",
													"name": "Stream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "conn"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "OutgoingWebSocketMessage.finalize",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "OutgoingWebSocketMessage.flush",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "OutgoingWebSocketMessage.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "OutgoingWebSocketMessage.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "OutgoingWebSocketMessage",
					"interfaces": [
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "OutgoingWebSocketMessage"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "WebSocket.this",
									"type": {
										"text": "WebSocket(Stream conn)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "WebSocket",
											"qualifiedName": "vibe.http.websockets.WebSocket",
											"name": "WebSocket",
											"moduleName": "vibe.http.websockets"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Stream",
													"qualifiedName": "vibe.stream.stream.Stream",
													"name": "Stream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "conn"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "WebSocket.connected",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "connected"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "WebSocket.dataAvailableForRead",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dataAvailableForRead"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "WebSocket.receive",
									"type": {
										"text": "ubyte[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": []
									},
									"name": "receive"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "WebSocket.receive",
									"type": {
										"text": "void(void delegate(IncommingWebSocketMessage) receiver)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "IncommingWebSocketMessage",
																"qualifiedName": "vibe.http.websockets.IncommingWebSocketMessage",
																"name": "IncommingWebSocketMessage",
																"moduleName": "vibe.http.websockets",
																"attributes": []
															}
														}
													],
													"attributes": []
												},
												"name": "receiver"
											}
										],
										"attributes": []
									},
									"name": "receive"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "WebSocket.send",
									"type": {
										"text": "void(ubyte[] data)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											}
										],
										"attributes": []
									},
									"name": "send"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "WebSocket.send",
									"type": {
										"text": "void(void delegate(OutgoingWebSocketMessage) sender)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "OutgoingWebSocketMessage",
																"qualifiedName": "vibe.http.websockets.OutgoingWebSocketMessage",
																"name": "OutgoingWebSocketMessage",
																"moduleName": "vibe.http.websockets",
																"attributes": []
															}
														}
													],
													"attributes": []
												},
												"name": "sender"
											}
										],
										"attributes": []
									},
									"name": "send"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "WebSocket",
					"name": "WebSocket"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "handleWebSockets",
					"type": {
						"text": "void delegate(HttpServerRequest req, HttpServerResponse res)(void delegate(WebSocket) onHandshake)",
						"typeClass": "function",
						"returnType": {
							"typeClass": "delegate",
							"returnType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "void",
								"qualifiedName": "void",
								"name": "void",
								"moduleName": ""
							},
							"parameters": [
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerRequest",
										"qualifiedName": "vibe.http.server.HttpServerRequest",
										"name": "HttpServerRequest",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "req"
								},
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerResponse",
										"qualifiedName": "vibe.http.server.HttpServerResponse",
										"name": "HttpServerResponse",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "res"
								}
							]
						},
						"parameters": [
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "WebSocket",
												"qualifiedName": "vibe.http.websockets.WebSocket",
												"name": "WebSocket",
												"moduleName": "vibe.http.websockets",
												"attributes": []
											}
										}
									],
									"attributes": []
								},
								"name": "onHandshake"
							}
						],
						"attributes": []
					},
					"name": "handleWebSockets"
				}
			]
		]
	},
	"name": "vibe.http.websockets"
},
"vibe.http.proxy": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\proxy.d",
	"ddoc": "\n\tHTTP (reverse) proxy implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tTransparently forwards all requests to the proxy to a destination_host.\n\n\tYou can use the hostName field in the 'settings' to combine multiple internal HTTP servers\n\tinto one public web server with multiple virtual hosts.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttpReverseProxy",
					"type": {
						"text": "void(HttpServerSettings settings, string destination_host, ushort destination_port)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "destination_host"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "destination_port"
							}
						],
						"attributes": []
					},
					"name": "listenHttpReverseProxy"
				}
			],
			[
				{
					"ddoc": "\n\tReturns a HTTP request handler that forwards any request to the specified host/port.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "reverseProxyRequest",
					"type": {
						"text": "void delegate(HttpServerRequest req, HttpServerResponse res)(string destination_host, ushort destination_port)",
						"typeClass": "function",
						"returnType": {
							"typeClass": "delegate",
							"returnType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "void",
								"qualifiedName": "void",
								"name": "void",
								"moduleName": ""
							},
							"parameters": [
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerRequest",
										"qualifiedName": "vibe.http.server.HttpServerRequest",
										"name": "HttpServerRequest",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "req"
								},
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerResponse",
										"qualifiedName": "vibe.http.server.HttpServerResponse",
										"name": "HttpServerResponse",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "res"
								}
							]
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "destination_host"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "destination_port"
							}
						],
						"attributes": []
					},
					"name": "reverseProxyRequest"
				}
			]
		]
	},
	"name": "vibe.http.proxy"
},
"vibe.core.net": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\net.d",
	"ddoc": "\n\tTCP/UDP connection and server handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
	"members": {
		"structs": [
			[
				{
					"ddoc": "\n\tRepresents a network/socket address.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Family (AF_) of the socket address.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "NetworkAddress.family",
									"type": {
										"text": "const @property ushort()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ushort",
											"qualifiedName": "ushort",
											"name": "ushort",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "family"
								},
								{
									"ddoc": " Family (AF_) of the socket address.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "NetworkAddress.family",
									"type": {
										"text": "@property void(ushort val)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "val"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "family"
								}
							],
							[
								{
									"ddoc": " The port in host byte order.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "NetworkAddress.port",
									"type": {
										"text": "const @property ushort()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ushort",
											"qualifiedName": "ushort",
											"name": "ushort",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "port"
								},
								{
									"ddoc": " The port in host byte order.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "NetworkAddress.port",
									"type": {
										"text": "@property void(ushort val)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "val"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "port"
								}
							],
							[
								{
									"ddoc": " A pointer to a sockaddr struct suitable for passing to socket functions.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "NetworkAddress.sockAddr",
									"type": {
										"text": "inout @property inout(sockaddr)*()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "pointer",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"inout"
												],
												"typeClass": "primitive",
												"nestedName": "sockaddr",
												"qualifiedName": "sockaddr",
												"name": "sockaddr",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": [
											"inout",
											"@property"
										]
									},
									"name": "sockAddr"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "NetworkAddress.sockAddrInet4",
									"type": {
										"text": "inout @property inout(sockaddr_in)*()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "pointer",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"inout"
												],
												"typeClass": "primitive",
												"nestedName": "sockaddr_in",
												"qualifiedName": "sockaddr_in",
												"name": "sockaddr_in",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": [
											"inout",
											"@property"
										]
									},
									"name": "sockAddrInet4"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "NetworkAddress.sockAddrInet6",
									"type": {
										"text": "inout @property inout(sockaddr_in6)*()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "pointer",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"inout"
												],
												"typeClass": "primitive",
												"nestedName": "sockaddr_in6",
												"qualifiedName": "sockaddr_in6",
												"name": "sockaddr_in6",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": [
											"inout",
											"@property"
										]
									},
									"name": "sockAddrInet6"
								}
							],
							[
								{
									"ddoc": " Size of the sockaddr struct that is returned by sockAddr().\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "NetworkAddress.sockAddrLen",
									"type": {
										"text": "const @property int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "sockAddrLen"
								}
							]
						]
					},
					"nestedName": "NetworkAddress",
					"name": "NetworkAddress"
				}
			]
		],
		"interfaces": [
			[
				{
					"ddoc": "\n\tRepresents a single TCP connection.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Actively closes the connection.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.close",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "close"
								}
							],
							[
								{
									"ddoc": " The current connection status\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.connected",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "connected"
								}
							],
							[
								{
									"ddoc": " Returns the IP address of the connected peer.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.peerAddress",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "peerAddress"
								}
							],
							[
								{
									"ddoc": " Controls the read time out after which the connection is closed automatically\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.readTimeout",
									"type": {
										"text": "@property void(Duration duration)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Duration",
													"qualifiedName": "Duration",
													"name": "Duration",
													"moduleName": "",
													"attributes": []
												},
												"name": "duration"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "readTimeout"
								},
								{
									"ddoc": " Controls the read time out after which the connection is closed automatically\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.readTimeout",
									"type": {
										"text": "const @property Duration()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Duration",
											"qualifiedName": "Duration",
											"name": "Duration",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "readTimeout"
								}
							],
							[
								{
									"ddoc": " Used to disable Nagle's algorithm\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.tcpNoDelay",
									"type": {
										"text": "@property void(bool enabled)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "enabled"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "tcpNoDelay"
								},
								{
									"ddoc": " Used to disable Nagle's algorithm\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.tcpNoDelay",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "tcpNoDelay"
								}
							],
							[
								{
									"ddoc": " Sets a timeout until data has to be availabe for read. Returns false on timeout.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.waitForData",
									"type": {
										"text": "bool(Duration timeout)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Duration",
													"qualifiedName": "Duration",
													"name": "Duration",
													"moduleName": "",
													"attributes": []
												},
												"name": "timeout"
											}
										],
										"attributes": []
									},
									"name": "waitForData"
								}
							]
						]
					},
					"nestedName": "TcpConnection",
					"interfaces": [
						{
							"kind": "type",
							"text": "Stream",
							"typeClass": "primitive",
							"nestedName": "Stream",
							"qualifiedName": "vibe.stream.stream.Stream",
							"name": "Stream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						},
						{
							"kind": "type",
							"text": "EventedObject",
							"typeClass": "primitive",
							"nestedName": "EventedObject",
							"qualifiedName": "vibe.core.driver.EventedObject",
							"name": "EventedObject",
							"moduleName": "vibe.core.driver",
							"attributes": []
						}
					],
					"name": "TcpConnection"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a bound and possibly 'connected' UDP socket.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Returns the address to which the UDP socket is bound.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UdpConnection.bindAddress",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "bindAddress"
								}
							],
							[
								{
									"ddoc": " Determines if the socket is allowed to send to broadcast addresses.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UdpConnection.canBroadcast",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "canBroadcast"
								},
								{
									"ddoc": " Determines if the socket is allowed to send to broadcast addresses.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UdpConnection.canBroadcast",
									"type": {
										"text": "@property void(bool val)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "val"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "canBroadcast"
								}
							],
							[
								{
									"ddoc": " Locks the UDP connection to a certain peer.\n\n\t\tOnce connected, the UdpConnection can only communicate with the specified peer.\n\t\tOtherwise communication with any reachable peer is possible.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UdpConnection.connect",
									"type": {
										"text": "void(string host, ushort port)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "host"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "connect"
								}
							],
							[
								{
									"ddoc": " Receives a single packet.\n\n\t\tIf a buffer is given, it must be large enough to hold the full packet.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UdpConnection.recv",
									"type": {
										"text": "ubyte[](ubyte[] buf = null, NetworkAddress* peer_address = null)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "buf"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "NetworkAddress",
														"qualifiedName": "vibe.core.net.NetworkAddress",
														"name": "NetworkAddress",
														"moduleName": "vibe.core.net"
													},
													"attributes": []
												},
												"name": "peer_address"
											}
										],
										"attributes": []
									},
									"name": "recv"
								}
							],
							[
								{
									"ddoc": " Sends a single packet.\n\n\t\tIf peer_address is given, the packet is send to that address. Otherwise the packet\n\t\twill be sent to the address specified by a call to connect().\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UdpConnection.send",
									"type": {
										"text": "void(const(ubyte[]) data, const(NetworkAddress*) peer_address = null)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "NetworkAddress",
														"qualifiedName": "vibe.core.net.NetworkAddress",
														"name": "NetworkAddress",
														"moduleName": "vibe.core.net"
													},
													"attributes": []
												},
												"name": "peer_address"
											}
										],
										"attributes": []
									},
									"name": "send"
								}
							]
						]
					},
					"nestedName": "UdpConnection",
					"interfaces": [
						{
							"kind": "type",
							"text": "EventedObject",
							"typeClass": "primitive",
							"nestedName": "EventedObject",
							"qualifiedName": "vibe.core.driver.EventedObject",
							"name": "EventedObject",
							"moduleName": "vibe.core.driver",
							"attributes": []
						}
					],
					"name": "UdpConnection"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tEstablishes a connection to the given host/port.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "connectTcp",
					"type": {
						"text": "TcpConnection(string host, ushort port)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "TcpConnection",
							"qualifiedName": "vibe.core.net.TcpConnection",
							"name": "TcpConnection",
							"moduleName": "vibe.core.net"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "host"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							}
						],
						"attributes": []
					},
					"name": "connectTcp"
				}
			],
			[
				{
					"ddoc": "\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcpS",
					"type": {
						"text": "void(ushort port, void function(TcpConnection stream) connection_callback)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeClass": "function",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.net.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.net",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							}
						],
						"attributes": []
					},
					"name": "listenTcpS"
				},
				{
					"ddoc": "\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcpS",
					"type": {
						"text": "void(ushort port, void function(TcpConnection stream) connection_callback, string address)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeClass": "function",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.net.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.net",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "address"
							}
						],
						"attributes": []
					},
					"name": "listenTcpS"
				},
				{
					"ddoc": "\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcp",
					"type": {
						"text": "void(ushort port, void delegate(TcpConnection stream) connection_callback)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.net.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.net",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							}
						],
						"attributes": []
					},
					"name": "listenTcp"
				},
				{
					"ddoc": "\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcp",
					"type": {
						"text": "void(ushort port, void delegate(TcpConnection stream) connection_callback, string address)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.net.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.net",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "address"
							}
						],
						"attributes": []
					},
					"name": "listenTcp"
				}
			],
			[
				{
					"ddoc": "\n\tCreates a bound UDP socket suitable for sending and receiving packets.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenUdp",
					"type": {
						"text": "UdpConnection(ushort port, string bind_address = \"0.0.0.0\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "UdpConnection",
							"qualifiedName": "vibe.core.net.UdpConnection",
							"name": "UdpConnection",
							"moduleName": "vibe.core.net"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"defaultValue": "0.0.0.0\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "bind_address"
							}
						],
						"attributes": []
					},
					"name": "listenUdp"
				}
			],
			[
				{
					"ddoc": "\n\tResolves the given host name/IP address string.\n\n\tSetting use_dns to false will only allow IP address strings but also guarantees\n\tthat the call will not block.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "resolveHost",
					"type": {
						"text": "NetworkAddress(string host, ushort address_family = cast(ushort)0, bool use_dns = true)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "NetworkAddress",
							"qualifiedName": "vibe.core.net.NetworkAddress",
							"name": "NetworkAddress",
							"moduleName": "vibe.core.net"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "host"
							},
							{
								"defaultValue": "cast(ushort",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "address_family"
							}
						],
						"attributes": []
					},
					"name": "resolveHost"
				}
			]
		]
	},
	"name": "vibe.core.net"
},
"vibe.db.mongo.collection": {
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\collection.d",
	"ddoc": "\n\tMongoCollection class\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"ddoc": "\n\tRepresents a single collection inside a MongoDB.\n\n\tAll methods take arbitrary types for Bson arguments. serializeToBson() is implicitly called on\n\tthem before they are send to the database. The following example shows some possible ways\n\tto specify objects.\n\n\tExamples:\n\n\t---\n\tMongoDB db = connectMongoDB(\"127.0.0.1\");\n\tMongoCollection users = m_db[\"myapp.users\"];\n\n\t// canonical version using a Bson object\n\tusers.insert(Bson([\"name\": Bson(\"admin\"), \"password\": Bson(\"secret\")]));\n\n\t// short version using a string[string] AA that is automatically\n\t// serialized to Bson\n\tusers.insert([\"name\": \"admin\", \"password\": \"secret\"]);\n\n\t// BSON specific types are also serialized automatically\n\tBsonObjectId uid = ...;\n\tBson usr = users.find([\"_id\": uid]);\n\n\t// JSON is another possibility\n\tJson jusr = parseJson(\"{\\\"name\\\": \\\"admin\\\", \\\"password\\\": \\\"secret\\\"}\");\n\tusers.insert(jusr);\n\t---\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "MongoCollection.this",
									"type": {
										"text": "ref MongoCollection(MongoDB db, string collection_name)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoCollection",
											"qualifiedName": "vibe.db.mongo.collection.MongoCollection",
											"name": "MongoCollection",
											"moduleName": "vibe.db.mongo.collection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "MongoDB",
													"qualifiedName": "vibe.db.mongo.db.MongoDB",
													"name": "MongoDB",
													"moduleName": "vibe.db.mongo.db",
													"attributes": []
												},
												"name": "db"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"ddoc": "\n\t\tCounts the results of the specified query expression.\n\n\t\tThrows Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{count%28%29}})\n\t\n",
									"kind": "function",
									"templateName": "count(T)",
									"nestedName": "MongoCollection.count",
									"type": {
										"text": "ulong(T query)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "query"
											}
										],
										"attributes": []
									},
									"name": "count"
								}
							],
							[
								{
									"ddoc": "\n\t\tQueries the collection for existing documents.\n\n\t\tIf no arguments are passed to find(), all documents of the collection will be returned.\n\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t\n",
									"kind": "function",
									"templateName": "find(T,U)",
									"nestedName": "MongoCollection.find",
									"type": {
										"text": "MongoCursor(T query, U returnFieldSelector, QueryFlags flags = QueryFlags.None, int num_skip = 0, int num_docs_per_chunk = 0)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoCursor",
											"qualifiedName": "vibe.db.mongo.cursor.MongoCursor",
											"name": "MongoCursor",
											"moduleName": "vibe.db.mongo.cursor"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "query"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "U",
													"qualifiedName": "U",
													"name": "U",
													"moduleName": "",
													"attributes": []
												},
												"name": "returnFieldSelector"
											},
											{
												"defaultValue": "QueryFlags.None",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "QueryFlags",
													"qualifiedName": "vibe.db.mongo.connection.QueryFlags",
													"name": "QueryFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											},
											{
												"defaultValue": "0",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "num_skip"
											},
											{
												"defaultValue": "0",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "num_docs_per_chunk"
											}
										],
										"attributes": []
									},
									"name": "find"
								},
								{
									"ddoc": "\n\t\tQueries the collection for existing documents.\n\n\t\tIf no arguments are passed to find(), all documents of the collection will be returned.\n\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t\n",
									"kind": "function",
									"templateName": "find(T)",
									"nestedName": "MongoCollection.find",
									"type": {
										"text": "MongoCursor(T query)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoCursor",
											"qualifiedName": "vibe.db.mongo.cursor.MongoCursor",
											"name": "MongoCursor",
											"moduleName": "vibe.db.mongo.cursor"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "query"
											}
										],
										"attributes": []
									},
									"name": "find"
								},
								{
									"ddoc": "\n\t\tQueries the collection for existing documents.\n\n\t\tIf no arguments are passed to find(), all documents of the collection will be returned.\n\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t\n",
									"kind": "function",
									"templateName": "find()",
									"nestedName": "MongoCollection.find",
									"type": {
										"text": "MongoCursor()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoCursor",
											"qualifiedName": "vibe.db.mongo.cursor.MongoCursor",
											"name": "MongoCursor",
											"moduleName": "vibe.db.mongo.cursor"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "find"
								}
							],
							[
								{
									"ddoc": "\n\t\tCombines a modify and find operation to a single atomic operation.\n\n\t\tThrows Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/findAndModify+Command)\n\t\n",
									"kind": "function",
									"templateName": "findAndModify(T,U,V)",
									"nestedName": "MongoCollection.findAndModify",
									"type": {
										"text": "Bson(T query, U update, V returnFieldSelector = null)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "query"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "U",
													"qualifiedName": "U",
													"name": "U",
													"moduleName": "",
													"attributes": []
												},
												"name": "update"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "V",
													"qualifiedName": "V",
													"name": "V",
													"moduleName": "",
													"attributes": []
												},
												"name": "returnFieldSelector"
											}
										],
										"attributes": []
									},
									"name": "findAndModify"
								}
							],
							[
								{
									"ddoc": "\n\t\tQueries the collection for existing documents.\n\n\t\tReturns: the first match or null\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t\n",
									"kind": "function",
									"templateName": "findOne(T,U = typeof(null))",
									"nestedName": "MongoCollection.findOne",
									"type": {
										"text": "Bson(T query, U returnFieldSelector = null, QueryFlags flags = QueryFlags.None)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "query"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "U",
													"qualifiedName": "U",
													"name": "U",
													"moduleName": "",
													"attributes": []
												},
												"name": "returnFieldSelector"
											},
											{
												"defaultValue": "QueryFlags.None",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "QueryFlags",
													"qualifiedName": "vibe.db.mongo.connection.QueryFlags",
													"name": "QueryFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											}
										],
										"attributes": []
									},
									"name": "findOne"
								}
							],
							[
								{
									"ddoc": "\n\t\tInserts new documents into the collection.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Inserting)\n\t\n",
									"kind": "function",
									"templateName": "insert(T)",
									"nestedName": "MongoCollection.insert",
									"type": {
										"text": "void(T document_or_documents, InsertFlags flags = InsertFlags.None)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "document_or_documents"
											},
											{
												"defaultValue": "InsertFlags.None",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InsertFlags",
													"qualifiedName": "vibe.db.mongo.connection.InsertFlags",
													"name": "InsertFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											}
										],
										"attributes": []
									},
									"name": "insert"
								}
							],
							[
								{
									"ddoc": "\n\t\tRemoves documents from the collection.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Removing)\n\t\n",
									"kind": "function",
									"templateName": "remove(T)",
									"nestedName": "MongoCollection.remove",
									"type": {
										"text": "void(T selector, DeleteFlags flags = DeleteFlags.None)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "selector"
											},
											{
												"defaultValue": "DeleteFlags.None",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "DeleteFlags",
													"qualifiedName": "vibe.db.mongo.connection.DeleteFlags",
													"name": "DeleteFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											}
										],
										"attributes": []
									},
									"name": "remove"
								}
							],
							[
								{
									"ddoc": "\n\t\tPerforms an update operation on documents matching 'selector', updating them with 'update'.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Updating)\n\t\n",
									"kind": "function",
									"templateName": "update(T,U)",
									"nestedName": "MongoCollection.update",
									"type": {
										"text": "void(T selector, U update, UpdateFlags flags = UpdateFlags.None)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "selector"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "U",
													"qualifiedName": "U",
													"name": "U",
													"moduleName": "",
													"attributes": []
												},
												"name": "update"
											},
											{
												"defaultValue": "UpdateFlags.None",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "UpdateFlags",
													"qualifiedName": "vibe.db.mongo.connection.UpdateFlags",
													"name": "UpdateFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											}
										],
										"attributes": []
									},
									"name": "update"
								}
							]
						]
					},
					"nestedName": "MongoCollection",
					"name": "MongoCollection"
				}
			]
		]
	},
	"name": "vibe.db.mongo.collection"
},
"vibe.http.client": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\client.d",
	"ddoc": "\n\tA simple HTTP/1.1 client implementation.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpClient.this",
									"type": {
										"text": "HttpClient()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpClient",
											"qualifiedName": "vibe.http.client.HttpClient",
											"name": "HttpClient",
											"moduleName": "vibe.http.client"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClient.acquire",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "acquire"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClient.connect",
									"type": {
										"text": "void(string server, ushort port = cast(ushort)80, bool ssl = false)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "server"
											},
											{
												"defaultValue": "cast(ushort",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "connect"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClient.disconnect",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "disconnect"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClient.isOwner",
									"type": {
										"text": "bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "isOwner"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClient.release",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "release"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClient.request",
									"type": {
										"text": "HttpClientResponse(scope void delegate(HttpClientRequest req) requester)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpClientResponse",
											"qualifiedName": "vibe.http.client.HttpClientResponse",
											"name": "HttpClientResponse",
											"moduleName": "vibe.http.client"
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpClientRequest",
																"qualifiedName": "vibe.http.client.HttpClientRequest",
																"name": "HttpClientRequest",
																"moduleName": "vibe.http.client",
																"attributes": []
															},
															"name": "req"
														}
													],
													"attributes": [
														"scope"
													]
												},
												"name": "requester"
											}
										],
										"attributes": []
									},
									"name": "request"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpClient.MaxHttpHeaderLineLength",
									"type": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									},
									"name": "MaxHttpHeaderLineLength"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpClient",
					"interfaces": [
						{
							"kind": "type",
							"text": "EventedObject",
							"typeClass": "primitive",
							"nestedName": "EventedObject",
							"qualifiedName": "vibe.core.driver.EventedObject",
							"name": "EventedObject",
							"moduleName": "vibe.core.driver",
							"attributes": []
						}
					],
					"name": "HttpClient"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientRequest.bodyWriter",
									"type": {
										"text": "@property OutputStream()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "OutputStream",
											"qualifiedName": "vibe.stream.stream.OutputStream",
											"name": "OutputStream",
											"moduleName": "vibe.stream.stream"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "bodyWriter"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientRequest.writeBody",
									"type": {
										"text": "void(InputStream data, ulong length)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "data"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "length"
											}
										],
										"attributes": []
									},
									"name": "writeBody"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientRequest.writeBody",
									"type": {
										"text": "void(ubyte[] data, string content_type = null)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "content_type"
											}
										],
										"attributes": []
									},
									"name": "writeBody"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientRequest.writeBody",
									"type": {
										"text": "void(string[string] form)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"keyType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"typeClass": "associative array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "form"
											}
										],
										"attributes": []
									},
									"name": "writeBody"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "writeJsonBody(T)",
									"nestedName": "HttpClientRequest.writeJsonBody",
									"type": {
										"text": "void(T data)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "data"
											}
										],
										"attributes": []
									},
									"name": "writeJsonBody"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientRequest.writePart",
									"type": {
										"text": "void(MultiPart part)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "MultiPart",
													"qualifiedName": "vibe.http.common.MultiPart",
													"name": "MultiPart",
													"moduleName": "vibe.http.common",
													"attributes": []
												},
												"name": "part"
											}
										],
										"attributes": []
									},
									"name": "writePart"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "HttpRequest",
						"typeClass": "primitive",
						"nestedName": "HttpRequest",
						"qualifiedName": "vibe.http.common.HttpRequest",
						"name": "HttpRequest",
						"moduleName": "vibe.http.common",
						"attributes": []
					},
					"nestedName": "HttpClientRequest",
					"name": "HttpClientRequest"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientResponse.readJson",
									"type": {
										"text": "Json()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "readJson"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpClientResponse.bodyReader",
									"type": {
										"kind": "type",
										"text": "vibe.stream.stream.InputStream",
										"typeClass": "primitive",
										"nestedName": "InputStream",
										"qualifiedName": "vibe.stream.stream.InputStream",
										"name": "InputStream",
										"moduleName": "vibe.stream.stream",
										"attributes": []
									},
									"name": "bodyReader"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "HttpResponse",
						"typeClass": "primitive",
						"nestedName": "HttpResponse",
						"qualifiedName": "vibe.http.common.HttpResponse",
						"name": "HttpResponse",
						"moduleName": "vibe.http.common",
						"attributes": []
					},
					"nestedName": "HttpClientResponse",
					"name": "HttpClientResponse"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tReturns a HttpClient proxy that is connected to the specified host.\n\n\tInternally, a connection pool is used to reuse already existing connections.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "connectHttp",
					"type": {
						"text": "LockedConnection!(HttpClient)(string host, ushort port = cast(ushort)0, bool ssl = false)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "LockedConnection",
							"templateArgs": "(HttpClient)",
							"qualifiedName": "LockedConnection",
							"name": "LockedConnection",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "host"
							},
							{
								"defaultValue": "cast(ushort",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							}
						],
						"attributes": []
					},
					"name": "connectHttp"
				}
			],
			[
				{
					"ddoc": "\n\n\n\tPerforms a HTTP request on the specified URL.\n\n\tThe 'requester' parameter allows to customize the request and to specify the request body for\n\tnon-GET requests.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "requestHttp",
					"type": {
						"text": "HttpClientResponse(string url, scope void delegate(HttpClientRequest req) requester = null)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "HttpClientResponse",
							"qualifiedName": "vibe.http.client.HttpClientResponse",
							"name": "HttpClientResponse",
							"moduleName": "vibe.http.client"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "url"
							},
							{
								"defaultValue": "null",
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpClientRequest",
												"qualifiedName": "vibe.http.client.HttpClientRequest",
												"name": "HttpClientRequest",
												"moduleName": "vibe.http.client",
												"attributes": []
											},
											"name": "req"
										}
									],
									"attributes": [
										"scope"
									]
								},
								"name": "requester"
							}
						],
						"attributes": []
					},
					"name": "requestHttp"
				},
				{
					"ddoc": "\n\n\n\tPerforms a HTTP request on the specified URL.\n\n\tThe 'requester' parameter allows to customize the request and to specify the request body for\n\tnon-GET requests.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "requestHttp",
					"type": {
						"text": "HttpClientResponse(Url url, scope void delegate(HttpClientRequest req) requester = null)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "HttpClientResponse",
							"qualifiedName": "vibe.http.client.HttpClientResponse",
							"name": "HttpClientResponse",
							"moduleName": "vibe.http.client"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Url",
									"qualifiedName": "vibe.inet.url.Url",
									"name": "Url",
									"moduleName": "vibe.inet.url",
									"attributes": []
								},
								"name": "url"
							},
							{
								"defaultValue": "null",
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpClientRequest",
												"qualifiedName": "vibe.http.client.HttpClientRequest",
												"name": "HttpClientRequest",
												"moduleName": "vibe.http.client",
												"attributes": []
											},
											"name": "req"
										}
									],
									"attributes": [
										"scope"
									]
								},
								"name": "requester"
							}
						],
						"attributes": []
					},
					"name": "requestHttp"
				}
			]
		]
	},
	"name": "vibe.http.client"
},
"vibe.http.common": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\common.d",
	"ddoc": "\n\tCommon classes for HTTP clients and servers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpMethod.GET",
							"name": "GET"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpMethod.HEAD",
							"name": "HEAD"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpMethod.PUT",
							"name": "PUT"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpMethod.POST",
							"name": "POST"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpMethod.PATCH",
							"name": "PATCH"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpMethod.DELETE",
							"name": "DELETE"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpMethod.OPTIONS",
							"name": "OPTIONS"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpMethod.TRACE",
							"name": "TRACE"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpMethod.CONNECT",
							"name": "CONNECT"
						}
					],
					"nestedName": "HttpMethod",
					"name": "HttpMethod",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpVersion.HTTP_1_0",
							"name": "HTTP_1_0"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpVersion.HTTP_1_1",
							"name": "HTTP_1_1"
						}
					],
					"nestedName": "HttpVersion",
					"name": "HttpVersion",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"structs": [
			[
				{
					"ddoc": "\n\tBehaves like string[string] but case does not matter for the key.\n\n\tThis kind of map is used for MIME headers (e.g. for HTTP), where the case of the key strings\n\tdoes not matter.\n\n\tNote that despite case not being relevant for matching keyse, iterating over the map will yield\n\tthe original case of the key that was put in.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.dup",
									"type": {
										"text": "const @property StrMapCI()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "StrMapCI",
											"qualifiedName": "vibe.http.common.StrMapCI",
											"name": "StrMapCI",
											"moduleName": "vibe.http.common"
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "dup"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.length",
									"type": {
										"text": "const @property uint()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "length"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.opApply",
									"type": {
										"text": "int(int delegate(ref string key, ref string val) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "key"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "val"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.opApply",
									"type": {
										"text": "int(int delegate(ref string name) del)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "name"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinaryRight(string op) if (op == \"in\")",
									"nestedName": "StrMapCI.opBinaryRight",
									"type": {
										"text": "inout inout(string)*(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "pointer",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"inout"
												],
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opBinaryRight"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinaryRight(string op) if (op == \"!in\")",
									"nestedName": "StrMapCI.opBinaryRight",
									"type": {
										"text": "inout bool(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opBinaryRight"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.opIndex",
									"type": {
										"text": "string(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "opIndex"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.opIndexAssign",
									"type": {
										"text": "string(string val, string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "val"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "opIndexAssign"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.remove",
									"type": {
										"text": "void(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "remove"
								}
							]
						]
					},
					"nestedName": "StrMapCI",
					"name": "StrMapCI"
				}
			]
		],
		"classes": [
			[
				{
					"ddoc": "\n\tTakes an input stream that contains data in HTTP chunked format and outputs the raw data.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "ChunkedInputStream.this",
									"type": {
										"text": "ChunkedInputStream(InputStream stream)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ChunkedInputStream",
											"qualifiedName": "vibe.http.common.ChunkedInputStream",
											"name": "ChunkedInputStream",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedInputStream.dataAvailableForRead",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dataAvailableForRead"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedInputStream.empty",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedInputStream.leastSize",
									"type": {
										"text": "const @property ulong()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedInputStream.peek",
									"type": {
										"text": "const(ubyte)[]()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"const"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": []
									},
									"name": "peek"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedInputStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "ChunkedInputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "InputStream",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "ChunkedInputStream"
				}
			],
			[
				{
					"ddoc": "\n\tOutputs data to an output stream in HTTP chunked format.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "ChunkedOutputStream.this",
									"type": {
										"text": "ChunkedOutputStream(OutputStream stream)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ChunkedOutputStream",
											"qualifiedName": "vibe.http.common.ChunkedOutputStream",
											"name": "ChunkedOutputStream",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "OutputStream",
													"qualifiedName": "vibe.stream.stream.OutputStream",
													"name": "OutputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedOutputStream.finalize",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedOutputStream.flush",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedOutputStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedOutputStream.write",
									"type": {
										"text": "void(InputStream data, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "ChunkedOutputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "ChunkedOutputStream"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.domain",
									"type": {
										"text": "@property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "domain"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.expires",
									"type": {
										"text": "@property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "expires"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.isHttpOnly",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "isHttpOnly"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.isSecure",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "isSecure"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.maxAge",
									"type": {
										"text": "@property long()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "long",
											"qualifiedName": "long",
											"name": "long",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "maxAge"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.path",
									"type": {
										"text": "@property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "path"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setDomain",
									"type": {
										"text": "Cookie(string domain)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "domain"
											}
										],
										"attributes": []
									},
									"name": "setDomain"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setExpire",
									"type": {
										"text": "Cookie(string expires)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "expires"
											}
										],
										"attributes": []
									},
									"name": "setExpire"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setHttpOnly",
									"type": {
										"text": "Cookie(bool enabled)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "enabled"
											}
										],
										"attributes": []
									},
									"name": "setHttpOnly"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setMaxAge",
									"type": {
										"text": "Cookie(long maxAge)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "maxAge"
											}
										],
										"attributes": []
									},
									"name": "setMaxAge"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setPath",
									"type": {
										"text": "Cookie(string path)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											}
										],
										"attributes": []
									},
									"name": "setPath"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setSecure",
									"type": {
										"text": "Cookie(bool enabled)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "enabled"
											}
										],
										"attributes": []
									},
									"name": "setSecure"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setValue",
									"type": {
										"text": "Cookie(string value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "setValue"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.value",
									"type": {
										"text": "@property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "value"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Cookie",
					"name": "Cookie"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents an HTTP request made to a server.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "protected",
									"nestedName": "HttpRequest.this",
									"type": {
										"text": "HttpRequest(Stream conn)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpRequest",
											"qualifiedName": "vibe.http.common.HttpRequest",
											"name": "HttpRequest",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Stream",
													"qualifiedName": "vibe.stream.stream.Stream",
													"name": "Stream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "conn"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "protected",
									"nestedName": "HttpRequest.this",
									"type": {
										"text": "HttpRequest()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpRequest",
											"qualifiedName": "vibe.http.common.HttpRequest",
											"name": "HttpRequest",
											"moduleName": "vibe.http.common"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpRequest.host",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "host"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpRequest.host",
									"type": {
										"text": "@property void(string v)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "host"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpRequest.persistent",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "persistent"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpRequest.headers",
									"type": {
										"kind": "type",
										"text": "StrMapCI",
										"typeClass": "primitive",
										"nestedName": "StrMapCI",
										"qualifiedName": "vibe.http.common.StrMapCI",
										"name": "StrMapCI",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "headers"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpRequest.httpVersion",
									"type": {
										"kind": "type",
										"text": "HttpVersion",
										"typeClass": "primitive",
										"nestedName": "HttpVersion",
										"qualifiedName": "vibe.http.common.HttpVersion",
										"name": "HttpVersion",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "httpVersion"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "protected",
									"nestedName": "HttpRequest.m_conn",
									"type": {
										"kind": "type",
										"text": "vibe.stream.stream.Stream",
										"typeClass": "primitive",
										"nestedName": "Stream",
										"qualifiedName": "vibe.stream.stream.Stream",
										"name": "Stream",
										"moduleName": "vibe.stream.stream",
										"attributes": []
									},
									"name": "m_conn"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpRequest.method",
									"type": {
										"kind": "type",
										"text": "HttpMethod",
										"typeClass": "primitive",
										"nestedName": "HttpMethod",
										"qualifiedName": "vibe.http.common.HttpMethod",
										"name": "HttpMethod",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "method"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpRequest.url",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "url"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpRequest",
					"name": "HttpRequest"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents the HTTP response from the server back to the client.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpResponse.contentType",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "contentType"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpResponse.contentType",
									"type": {
										"text": "@property void(string ct)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "ct"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "contentType"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpResponse.cookies",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "Cookie[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"attributes": []
									},
									"name": "cookies"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpResponse.headers",
									"type": {
										"kind": "type",
										"text": "StrMapCI",
										"typeClass": "primitive",
										"nestedName": "StrMapCI",
										"qualifiedName": "vibe.http.common.StrMapCI",
										"name": "StrMapCI",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "headers"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpResponse.httpVersion",
									"type": {
										"kind": "type",
										"text": "HttpVersion",
										"typeClass": "primitive",
										"nestedName": "HttpVersion",
										"qualifiedName": "vibe.http.common.HttpVersion",
										"name": "HttpVersion",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "httpVersion"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpResponse.statusCode",
									"type": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									},
									"name": "statusCode"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpResponse.statusPhrase",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "statusPhrase"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpResponse",
					"name": "HttpResponse"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MultiPart.contentType",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "contentType"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MultiPart.form",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "string[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "form"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MultiPart.stream",
									"type": {
										"kind": "type",
										"text": "vibe.stream.stream.InputStream",
										"typeClass": "primitive",
										"nestedName": "InputStream",
										"qualifiedName": "vibe.stream.stream.InputStream",
										"name": "InputStream",
										"moduleName": "vibe.stream.stream",
										"attributes": []
									},
									"name": "stream"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MultiPart",
					"name": "MultiPart"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "getHttpVersionString",
					"type": {
						"text": "string(HttpVersion ver)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpVersion",
									"qualifiedName": "vibe.http.common.HttpVersion",
									"name": "HttpVersion",
									"moduleName": "vibe.http.common",
									"attributes": []
								},
								"name": "ver"
							}
						],
						"attributes": []
					},
					"name": "getHttpVersionString"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "httpMethodFromString",
					"type": {
						"text": "HttpMethod(string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "HttpMethod",
							"qualifiedName": "vibe.http.common.HttpMethod",
							"name": "HttpMethod",
							"moduleName": "vibe.http.common"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "httpMethodFromString"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "httpMethodString",
					"type": {
						"text": "string(HttpMethod m)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpMethod",
									"qualifiedName": "vibe.http.common.HttpMethod",
									"name": "HttpMethod",
									"moduleName": "vibe.http.common",
									"attributes": []
								},
								"name": "m"
							}
						],
						"attributes": []
					},
					"name": "httpMethodString"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "parseHttpVersion",
					"type": {
						"text": "HttpVersion(ref string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "HttpVersion",
							"qualifiedName": "vibe.http.common.HttpVersion",
							"name": "HttpVersion",
							"moduleName": "vibe.http.common"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "parseHttpVersion"
				}
			]
		]
	},
	"name": "vibe.http.common"
},
"vibe.core.drivers.winrt": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\drivers\\winrt.d",
	"ddoc": "\n\tWinRT driver implementation\n\n\tCopyright: © 2012 Sönke Ludwig\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
	"members": {
	},
	"name": "vibe.core.drivers.winrt"
},
"vibe.core.drivers.libevent2": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\drivers\\libevent2.d",
	"ddoc": "\n\tlibevent based driver\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
	"members": {
		"aliases": [
			[
				{
					"kind": "alias",
					"protection": "public",
					"nestedName": "EWOULDBLOCK",
					"name": "EWOULDBLOCK"
				}
			]
		],
		"structs": [
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"aliases": [
							[
								{
									"kind": "alias",
									"protection": "public",
									"nestedName": "LevCondition.Alloc",
									"name": "Alloc"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LevCondition.__cpctor",
									"type": {
										"text": "const void(ref const(LevCondition) p)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "LevCondition",
													"qualifiedName": "vibe.core.drivers.libevent2.LevCondition",
													"name": "LevCondition",
													"moduleName": "vibe.core.drivers.libevent2",
													"attributes": [
														"ref"
													]
												},
												"name": "p"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "__cpctor"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LevCondition.opAssign",
									"type": {
										"text": "ref LevCondition(LevCondition p)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "LevCondition",
											"qualifiedName": "vibe.core.drivers.libevent2.LevCondition",
											"name": "LevCondition",
											"moduleName": "vibe.core.drivers.libevent2"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "LevCondition",
													"qualifiedName": "vibe.core.drivers.libevent2.LevCondition",
													"name": "LevCondition",
													"moduleName": "vibe.core.drivers.libevent2",
													"attributes": []
												},
												"name": "p"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "opAssign"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "LevCondition.cond",
									"type": {
										"kind": "type",
										"text": "FreeListRef!(Condition)",
										"typeClass": "primitive",
										"nestedName": "FreeListRef",
										"templateArgs": "(Condition)",
										"qualifiedName": "FreeListRef",
										"name": "FreeListRef",
										"moduleName": "",
										"attributes": []
									},
									"name": "cond"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "LevCondition.mutex",
									"type": {
										"kind": "type",
										"text": "LevMutex*",
										"typeClass": "pointer",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "LevMutex",
											"qualifiedName": "vibe.core.drivers.libevent2.LevMutex",
											"name": "LevMutex",
											"moduleName": "vibe.core.drivers.libevent2"
										},
										"attributes": []
									},
									"name": "mutex"
								}
							]
						]
					},
					"nestedName": "LevCondition",
					"name": "LevCondition"
				}
			],
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"aliases": [
							[
								{
									"kind": "alias",
									"protection": "public",
									"nestedName": "LevMutex.Alloc",
									"name": "Alloc"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LevMutex.__cpctor",
									"type": {
										"text": "const void(ref const(LevMutex) p)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "LevMutex",
													"qualifiedName": "vibe.core.drivers.libevent2.LevMutex",
													"name": "LevMutex",
													"moduleName": "vibe.core.drivers.libevent2",
													"attributes": [
														"ref"
													]
												},
												"name": "p"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "__cpctor"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LevMutex.opAssign",
									"type": {
										"text": "ref LevMutex(LevMutex p)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "LevMutex",
											"qualifiedName": "vibe.core.drivers.libevent2.LevMutex",
											"name": "LevMutex",
											"moduleName": "vibe.core.drivers.libevent2"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "LevMutex",
													"qualifiedName": "vibe.core.drivers.libevent2.LevMutex",
													"name": "LevMutex",
													"moduleName": "vibe.core.drivers.libevent2",
													"attributes": []
												},
												"name": "p"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "opAssign"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "LevMutex.mutex",
									"type": {
										"kind": "type",
										"text": "FreeListRef!(Mutex)",
										"typeClass": "primitive",
										"nestedName": "FreeListRef",
										"templateArgs": "(Mutex)",
										"qualifiedName": "FreeListRef",
										"name": "FreeListRef",
										"moduleName": "",
										"attributes": []
									},
									"name": "mutex"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "LevMutex.rwmutex",
									"type": {
										"kind": "type",
										"text": "FreeListRef!(ReadWriteMutex)",
										"typeClass": "primitive",
										"nestedName": "FreeListRef",
										"templateArgs": "(ReadWriteMutex)",
										"qualifiedName": "FreeListRef",
										"name": "FreeListRef",
										"moduleName": "",
										"attributes": []
									},
									"name": "rwmutex"
								}
							]
						]
					},
					"nestedName": "LevMutex",
					"name": "LevMutex"
				}
			]
		],
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Libevent2Driver.this",
									"type": {
										"text": "Libevent2Driver(DriverCore core)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Libevent2Driver",
											"qualifiedName": "vibe.core.drivers.libevent2.Libevent2Driver",
											"name": "Libevent2Driver",
											"moduleName": "vibe.core.drivers.libevent2"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "DriverCore",
													"qualifiedName": "vibe.core.driver.DriverCore",
													"name": "DriverCore",
													"moduleName": "vibe.core.driver",
													"attributes": []
												},
												"name": "core"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"structs": [
							[
								{
									"kind": "struct",
									"protection": "public",
									"members": {
										"variables": [
											[
												{
													"kind": "variable",
													"protection": "public",
													"nestedName": "Libevent2Driver.DnsLookupInfo.addr",
													"type": {
														"kind": "type",
														"text": "NetworkAddress*",
														"typeClass": "pointer",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "NetworkAddress",
															"qualifiedName": "vibe.core.net.NetworkAddress",
															"name": "NetworkAddress",
															"moduleName": "vibe.core.net"
														},
														"attributes": []
													},
													"name": "addr"
												}
											],
											[
												{
													"kind": "variable",
													"protection": "public",
													"nestedName": "Libevent2Driver.DnsLookupInfo.core",
													"type": {
														"kind": "type",
														"text": "vibe.core.driver.DriverCore",
														"typeClass": "primitive",
														"nestedName": "DriverCore",
														"qualifiedName": "vibe.core.driver.DriverCore",
														"name": "DriverCore",
														"moduleName": "vibe.core.driver",
														"attributes": []
													},
													"name": "core"
												}
											],
											[
												{
													"kind": "variable",
													"protection": "public",
													"nestedName": "Libevent2Driver.DnsLookupInfo.done",
													"type": {
														"kind": "type",
														"text": "bool",
														"typeClass": "primitive",
														"nestedName": "bool",
														"qualifiedName": "bool",
														"name": "bool",
														"moduleName": "",
														"attributes": []
													},
													"name": "done"
												}
											],
											[
												{
													"kind": "variable",
													"protection": "public",
													"nestedName": "Libevent2Driver.DnsLookupInfo.status",
													"type": {
														"kind": "type",
														"text": "int",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": "",
														"attributes": []
													},
													"name": "status"
												}
											],
											[
												{
													"kind": "variable",
													"protection": "public",
													"nestedName": "Libevent2Driver.DnsLookupInfo.task",
													"type": {
														"kind": "type",
														"text": "vibe.core.driver.Task",
														"typeClass": "primitive",
														"nestedName": "Task",
														"qualifiedName": "vibe.core.driver.Task",
														"name": "Task",
														"moduleName": "vibe.core.driver",
														"attributes": []
													},
													"name": "task"
												}
											]
										]
									},
									"nestedName": "Libevent2Driver.DnsLookupInfo",
									"name": "DnsLookupInfo"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.connectTcp",
									"type": {
										"text": "TcpConnection(string host, ushort port)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "TcpConnection",
											"qualifiedName": "vibe.core.net.TcpConnection",
											"name": "TcpConnection",
											"moduleName": "vibe.core.net"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "host"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "connectTcp"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.createSignal",
									"type": {
										"text": "Libevent2Signal()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Libevent2Signal",
											"qualifiedName": "vibe.core.drivers.libevent2.Libevent2Signal",
											"name": "Libevent2Signal",
											"moduleName": "vibe.core.drivers.libevent2"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "createSignal"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.createTimer",
									"type": {
										"text": "Libevent2Timer(void delegate() callback)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Libevent2Timer",
											"qualifiedName": "vibe.core.drivers.libevent2.Libevent2Timer",
											"name": "Libevent2Timer",
											"moduleName": "vibe.core.drivers.libevent2"
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [],
													"attributes": []
												},
												"name": "callback"
											}
										],
										"attributes": []
									},
									"name": "createTimer"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.dnsEngine",
									"type": {
										"text": "@property evdns_base*()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "pointer",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "evdns_base",
												"qualifiedName": "evdns_base",
												"name": "evdns_base",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dnsEngine"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.eventLoop",
									"type": {
										"text": "@property event_base*()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "pointer",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "event_base",
												"qualifiedName": "event_base",
												"name": "event_base",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "eventLoop"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.exitEventLoop",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "exitEventLoop"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.listenTcp",
									"type": {
										"text": "void(ushort port, void delegate(TcpConnection stream) connection_callback, string address)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											},
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "TcpConnection",
																"qualifiedName": "vibe.core.net.TcpConnection",
																"name": "TcpConnection",
																"moduleName": "vibe.core.net",
																"attributes": []
															},
															"name": "stream"
														}
													],
													"attributes": []
												},
												"name": "connection_callback"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "address"
											}
										],
										"attributes": []
									},
									"name": "listenTcp"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.listenUdp",
									"type": {
										"text": "UdpConnection(ushort port, string bind_address = \"0.0.0.0\")",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UdpConnection",
											"qualifiedName": "vibe.core.net.UdpConnection",
											"name": "UdpConnection",
											"moduleName": "vibe.core.net"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											},
											{
												"defaultValue": "0.0.0.0\"",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "bind_address"
											}
										],
										"attributes": []
									},
									"name": "listenUdp"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.openFile",
									"type": {
										"text": "FileStream(string path, FileMode mode)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "FileStream",
											"qualifiedName": "vibe.core.file.FileStream",
											"name": "FileStream",
											"moduleName": "vibe.core.file"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "FileMode",
													"qualifiedName": "vibe.core.file.FileMode",
													"name": "FileMode",
													"moduleName": "vibe.core.file",
													"attributes": []
												},
												"name": "mode"
											}
										],
										"attributes": []
									},
									"name": "openFile"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.processEvents",
									"type": {
										"text": "int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "processEvents"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.resolveHost",
									"type": {
										"text": "NetworkAddress(string host, ushort family = cast(ushort)0, bool no_dns = false)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "NetworkAddress",
											"qualifiedName": "vibe.core.net.NetworkAddress",
											"name": "NetworkAddress",
											"moduleName": "vibe.core.net"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "host"
											},
											{
												"defaultValue": "cast(ushort",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "family"
											}
										],
										"attributes": []
									},
									"name": "resolveHost"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.runEventLoop",
									"type": {
										"text": "int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "runEventLoop"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Driver.runEventLoopOnce",
									"type": {
										"text": "int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "runEventLoopOnce"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Libevent2Driver",
					"interfaces": [
						{
							"kind": "type",
							"text": "EventDriver",
							"typeClass": "primitive",
							"nestedName": "EventDriver",
							"qualifiedName": "vibe.core.driver.EventDriver",
							"name": "EventDriver",
							"moduleName": "vibe.core.driver",
							"attributes": []
						}
					],
					"name": "Libevent2Driver"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Libevent2Signal.this",
									"type": {
										"text": "Libevent2Signal(Libevent2Driver driver)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Libevent2Signal",
											"qualifiedName": "vibe.core.drivers.libevent2.Libevent2Signal",
											"name": "Libevent2Signal",
											"moduleName": "vibe.core.drivers.libevent2"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Libevent2Driver",
													"qualifiedName": "vibe.core.drivers.libevent2.Libevent2Driver",
													"name": "Libevent2Driver",
													"moduleName": "vibe.core.drivers.libevent2",
													"attributes": []
												},
												"name": "driver"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Signal.acquire",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "acquire"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Signal.emit",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "emit"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Signal.emitCount",
									"type": {
										"text": "const @property int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "emitCount"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Signal.isOwner",
									"type": {
										"text": "bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "isOwner"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Signal.release",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "release"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Signal.wait",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "wait"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Signal.wait",
									"type": {
										"text": "void(int reference_emit_count)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "reference_emit_count"
											}
										],
										"attributes": []
									},
									"name": "wait"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Libevent2Signal",
					"interfaces": [
						{
							"kind": "type",
							"text": "Signal",
							"typeClass": "primitive",
							"nestedName": "Signal",
							"qualifiedName": "vibe.core.signal.Signal",
							"name": "Signal",
							"moduleName": "vibe.core.signal",
							"attributes": []
						}
					],
					"name": "Libevent2Signal"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Libevent2Timer.this",
									"type": {
										"text": "Libevent2Timer(Libevent2Driver driver, void delegate() callback)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Libevent2Timer",
											"qualifiedName": "vibe.core.drivers.libevent2.Libevent2Timer",
											"name": "Libevent2Timer",
											"moduleName": "vibe.core.drivers.libevent2"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Libevent2Driver",
													"qualifiedName": "vibe.core.drivers.libevent2.Libevent2Driver",
													"name": "Libevent2Driver",
													"moduleName": "vibe.core.drivers.libevent2",
													"attributes": []
												},
												"name": "driver"
											},
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [],
													"attributes": []
												},
												"name": "callback"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Timer.acquire",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "acquire"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Timer.isOwner",
									"type": {
										"text": "bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "isOwner"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Timer.pending",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "pending"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Timer.rearm",
									"type": {
										"text": "void(Duration timeout, bool periodic = false)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Duration",
													"qualifiedName": "Duration",
													"name": "Duration",
													"moduleName": "",
													"attributes": []
												},
												"name": "timeout"
											},
											{
												"defaultValue": "false",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "periodic"
											}
										],
										"attributes": []
									},
									"name": "rearm"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Timer.release",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "release"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Timer.stop",
									"type": {
										"text": "nothrow void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"nothrow"
										]
									},
									"name": "stop"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2Timer.wait",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "wait"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Libevent2Timer",
					"interfaces": [
						{
							"kind": "type",
							"text": "Timer",
							"typeClass": "primitive",
							"nestedName": "Timer",
							"qualifiedName": "vibe.core.driver.Timer",
							"name": "Timer",
							"moduleName": "vibe.core.driver",
							"attributes": []
						}
					],
					"name": "Libevent2Timer"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Libevent2UdpConnection.this",
									"type": {
										"text": "Libevent2UdpConnection(NetworkAddress bind_addr, Libevent2Driver driver)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Libevent2UdpConnection",
											"qualifiedName": "vibe.core.drivers.libevent2.Libevent2UdpConnection",
											"name": "Libevent2UdpConnection",
											"moduleName": "vibe.core.drivers.libevent2"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "NetworkAddress",
													"qualifiedName": "vibe.core.net.NetworkAddress",
													"name": "NetworkAddress",
													"moduleName": "vibe.core.net",
													"attributes": []
												},
												"name": "bind_addr"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Libevent2Driver",
													"qualifiedName": "vibe.core.drivers.libevent2.Libevent2Driver",
													"name": "Libevent2Driver",
													"moduleName": "vibe.core.drivers.libevent2",
													"attributes": []
												},
												"name": "driver"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2UdpConnection.acquire",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "acquire"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2UdpConnection.bindAddress",
									"type": {
										"text": "const @property string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "bindAddress"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2UdpConnection.canBroadcast",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "canBroadcast"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2UdpConnection.canBroadcast",
									"type": {
										"text": "@property void(bool val)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "val"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "canBroadcast"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2UdpConnection.connect",
									"type": {
										"text": "void(string host, ushort port)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "host"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "connect"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2UdpConnection.isOwner",
									"type": {
										"text": "bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "isOwner"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2UdpConnection.recv",
									"type": {
										"text": "ubyte[](ubyte[] buf = null, NetworkAddress* peer_address = null)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "buf"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "NetworkAddress",
														"qualifiedName": "vibe.core.net.NetworkAddress",
														"name": "NetworkAddress",
														"moduleName": "vibe.core.net"
													},
													"attributes": []
												},
												"name": "peer_address"
											}
										],
										"attributes": []
									},
									"name": "recv"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2UdpConnection.release",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "release"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Libevent2UdpConnection.send",
									"type": {
										"text": "void(const(ubyte[]) data, const(NetworkAddress*) peer_address = null)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "NetworkAddress",
														"qualifiedName": "vibe.core.net.NetworkAddress",
														"name": "NetworkAddress",
														"moduleName": "vibe.core.net"
													},
													"attributes": []
												},
												"name": "peer_address"
											}
										],
										"attributes": []
									},
									"name": "send"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Libevent2UdpConnection",
					"interfaces": [
						{
							"kind": "type",
							"text": "UdpConnection",
							"typeClass": "primitive",
							"nestedName": "UdpConnection",
							"qualifiedName": "vibe.core.net.UdpConnection",
							"name": "UdpConnection",
							"moduleName": "vibe.core.net",
							"attributes": []
						}
					],
					"name": "Libevent2UdpConnection"
				}
			]
		]
	},
	"name": "vibe.core.drivers.libevent2"
},
"vibe.core.driver": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\driver.d",
	"ddoc": "\n\tContains interfaces and enums for evented I/O drivers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
	"members": {
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "protected",
									"nestedName": "Task.this",
									"type": {
										"text": "Task(void delegate() fun, uint stack_size)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Task",
											"qualifiedName": "vibe.core.driver.Task",
											"name": "Task",
											"moduleName": "vibe.core.driver"
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [],
													"attributes": []
												},
												"name": "fun"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "stack_size"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Task.getThis",
									"type": {
										"text": "Task()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Task",
											"qualifiedName": "vibe.core.driver.Task",
											"name": "Task",
											"moduleName": "vibe.core.driver"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "getThis"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Fiber",
						"typeClass": "primitive",
						"nestedName": "Fiber",
						"qualifiedName": "Fiber",
						"name": "Fiber",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Task",
					"name": "Task"
				}
			]
		],
		"interfaces": [
			[
				{
					"ddoc": "\n\tProvides an event driver with core functions for task/fiber control.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "DriverCore.notifyIdle",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "notifyIdle"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "DriverCore.resumeTask",
									"type": {
										"text": "void(Task f, Exception event_exception = null)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Task",
													"qualifiedName": "vibe.core.driver.Task",
													"name": "Task",
													"moduleName": "vibe.core.driver",
													"attributes": []
												},
												"name": "f"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Exception",
													"qualifiedName": "Exception",
													"name": "Exception",
													"moduleName": "",
													"attributes": []
												},
												"name": "event_exception"
											}
										],
										"attributes": []
									},
									"name": "resumeTask"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "DriverCore.yieldForEvent",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "yieldForEvent"
								}
							]
						]
					},
					"nestedName": "DriverCore",
					"name": "DriverCore"
				}
			],
			[
				{
					"ddoc": "\n\tInterface for all evented I/O implementations\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Establiches a tcp connection on the specified host/port.\n\n\t\t'host' can be a DNS name or an IPv4 or IPv6 address string.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventDriver.connectTcp",
									"type": {
										"text": "TcpConnection(string host, ushort port)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "TcpConnection",
											"qualifiedName": "vibe.core.net.TcpConnection",
											"name": "TcpConnection",
											"moduleName": "vibe.core.net"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "host"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "connectTcp"
								}
							],
							[
								{
									"ddoc": " Creates a new signal (a single-threaded condition variable).\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventDriver.createSignal",
									"type": {
										"text": "Signal()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Signal",
											"qualifiedName": "vibe.core.signal.Signal",
											"name": "Signal",
											"moduleName": "vibe.core.signal"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "createSignal"
								}
							],
							[
								{
									"ddoc": " Creates a new timer.\n\n\t\tThe timer can be started by calling rearm() with a timeout.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventDriver.createTimer",
									"type": {
										"text": "Timer(void delegate() callback)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Timer",
											"qualifiedName": "vibe.core.driver.Timer",
											"name": "Timer",
											"moduleName": "vibe.core.driver"
										},
										"parameters": [
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [],
													"attributes": []
												},
												"name": "callback"
											}
										],
										"attributes": []
									},
									"name": "createTimer"
								}
							],
							[
								{
									"ddoc": " Exits any running event loop.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventDriver.exitEventLoop",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "exitEventLoop"
								}
							],
							[
								{
									"ddoc": " Listens on the specified port and interface for TCP connections.\n\n\t\t'bind_address' must be an IPv4 or IPv6 address string corresponding to a local network\n\t\tinterface.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventDriver.listenTcp",
									"type": {
										"text": "void(ushort port, void delegate(TcpConnection stream) conn_callback, string bind_address)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											},
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "TcpConnection",
																"qualifiedName": "vibe.core.net.TcpConnection",
																"name": "TcpConnection",
																"moduleName": "vibe.core.net",
																"attributes": []
															},
															"name": "stream"
														}
													],
													"attributes": []
												},
												"name": "conn_callback"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "bind_address"
											}
										],
										"attributes": []
									},
									"name": "listenTcp"
								}
							],
							[
								{
									"ddoc": " Creates a new UDP socket and sets the specified address/port as the destination for packets.\n\n\t\tIf a bind port is specified, the socket will be able to receive UDP packets on that port.\n\t\tOtherwise, a random bind port is chosen.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventDriver.listenUdp",
									"type": {
										"text": "UdpConnection(ushort port, string bind_address = \"0.0.0.0\")",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UdpConnection",
											"qualifiedName": "vibe.core.net.UdpConnection",
											"name": "UdpConnection",
											"moduleName": "vibe.core.net"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											},
											{
												"defaultValue": "0.0.0.0\"",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "bind_address"
											}
										],
										"attributes": []
									},
									"name": "listenUdp"
								}
							],
							[
								{
									"ddoc": " Opens a file on disk with the speficied file mode.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventDriver.openFile",
									"type": {
										"text": "FileStream(string path, FileMode mode)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "FileStream",
											"qualifiedName": "vibe.core.file.FileStream",
											"name": "FileStream",
											"moduleName": "vibe.core.file"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "FileMode",
													"qualifiedName": "vibe.core.file.FileMode",
													"name": "FileMode",
													"moduleName": "vibe.core.file",
													"attributes": []
												},
												"name": "mode"
											}
										],
										"attributes": []
									},
									"name": "openFile"
								}
							],
							[
								{
									"ddoc": " Processes all outstanding events if any, does not block.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventDriver.processEvents",
									"type": {
										"text": "int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "processEvents"
								}
							],
							[
								{
									"ddoc": " Resolves the given host name or IP address string.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventDriver.resolveHost",
									"type": {
										"text": "NetworkAddress(string host, ushort family, bool no_dns)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "NetworkAddress",
											"qualifiedName": "vibe.core.net.NetworkAddress",
											"name": "NetworkAddress",
											"moduleName": "vibe.core.net"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "host"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "family"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "no_dns"
											}
										],
										"attributes": []
									},
									"name": "resolveHost"
								}
							],
							[
								{
									"ddoc": " Starts the event loop.\n\n\t\tThe loop will continue to run until either no more event listeners are active or until\n\t\texitEventLoop() is called.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventDriver.runEventLoop",
									"type": {
										"text": "int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "runEventLoop"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "EventDriver.runEventLoopOnce",
									"type": {
										"text": "int()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "runEventLoopOnce"
								}
							]
						]
					},
					"nestedName": "EventDriver",
					"name": "EventDriver"
				}
			],
			[
				{
					"ddoc": "\n\tBase interface for all evented objects.\n\n\tEvented objects are owned by the fiber/task that created them and may only be used inside this\n\tspecific fiber. By using release(), a fiber can drop the ownership of an object so that\n\tanother fiber can gain ownership using acquire(). This way it becomes possible to share\n\tconnections and files across fibers.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Acquires the ownership of an unowned object.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventedObject.acquire",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "acquire"
								}
							],
							[
								{
									"ddoc": " Returns true if the calling fiber owns this object\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventedObject.isOwner",
									"type": {
										"text": "bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "isOwner"
								}
							],
							[
								{
									"ddoc": " Releases the ownership of the object.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "EventedObject.release",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "release"
								}
							]
						]
					},
					"nestedName": "EventedObject",
					"name": "EventedObject"
				}
			],
			[
				{
					"ddoc": "\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Timer.pending",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "pending"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Timer.rearm",
									"type": {
										"text": "void(Duration dur, bool periodic = false)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Duration",
													"qualifiedName": "Duration",
													"name": "Duration",
													"moduleName": "",
													"attributes": []
												},
												"name": "dur"
											},
											{
												"defaultValue": "false",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "periodic"
											}
										],
										"attributes": []
									},
									"name": "rearm"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Timer.stop",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "stop"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Timer.wait",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "wait"
								}
							]
						]
					},
					"nestedName": "Timer",
					"interfaces": [
						{
							"kind": "type",
							"text": "EventedObject",
							"typeClass": "primitive",
							"nestedName": "EventedObject",
							"qualifiedName": "vibe.core.driver.EventedObject",
							"name": "EventedObject",
							"moduleName": "vibe.core.driver",
							"attributes": []
						}
					],
					"name": "Timer"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tReturns the active event driver\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "getEventDriver",
					"type": {
						"text": "EventDriver()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "EventDriver",
							"qualifiedName": "vibe.core.driver.EventDriver",
							"name": "EventDriver",
							"moduleName": "vibe.core.driver"
						},
						"parameters": [],
						"attributes": []
					},
					"name": "getEventDriver"
				}
			]
		]
	},
	"name": "vibe.core.driver"
},
"vibe.crypto.md5": {
	"kind": "module",
	"file": "..\\source\\vibe\\crypto\\md5.d",
	"ddoc": "\n\tMD5 hashing functions.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n",
	"members": {
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "md5",
					"type": {
						"text": "string(const(char[]) str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"modifiers": [
										"const"
									],
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "char",
										"qualifiedName": "char",
										"name": "char",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "md5"
				}
			]
		]
	},
	"name": "vibe.crypto.md5"
},
"vibe.textfilter.markdown": {
	"kind": "module",
	"file": "..\\source\\vibe\\textfilter\\markdown.d",
	"ddoc": "\n\tMarkdown parser implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "BlockType.Plain",
							"name": "Plain"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "BlockType.Text",
							"name": "Text"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "BlockType.Paragraph",
							"name": "Paragraph"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "BlockType.Header",
							"name": "Header"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "BlockType.OList",
							"name": "OList"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "BlockType.UList",
							"name": "UList"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "BlockType.ListItem",
							"name": "ListItem"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "BlockType.Code",
							"name": "Code"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "BlockType.Quote",
							"name": "Quote"
						}
					],
					"nestedName": "BlockType",
					"name": "BlockType",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "IndentType.White",
							"name": "White"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "IndentType.Quote",
							"name": "Quote"
						}
					],
					"nestedName": "IndentType",
					"name": "IndentType",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LineType.Undefined",
							"name": "Undefined"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LineType.Blank",
							"name": "Blank"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LineType.Plain",
							"name": "Plain"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LineType.Hline",
							"name": "Hline"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LineType.AtxHeader",
							"name": "AtxHeader"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LineType.SetextHeader",
							"name": "SetextHeader"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LineType.UList",
							"name": "UList"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LineType.OList",
							"name": "OList"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LineType.HtmlBlock",
							"name": "HtmlBlock"
						}
					],
					"nestedName": "LineType",
					"name": "LineType",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"templateName": "enterBlockQuote(R)",
					"nestedName": "enterBlockQuote",
					"type": {
						"text": "void(ref R dst)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							}
						],
						"attributes": []
					},
					"name": "enterBlockQuote"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "exitBlockQuote(R)",
					"nestedName": "exitBlockQuote",
					"type": {
						"text": "void(ref R dst)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							}
						],
						"attributes": []
					},
					"name": "exitBlockQuote"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "filterMarkdown()",
					"nestedName": "filterMarkdown",
					"type": {
						"text": "string(string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "filterMarkdown"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "filterMarkdown(R)",
					"nestedName": "filterMarkdown",
					"type": {
						"text": "void(ref R dst, string src)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "src"
							}
						],
						"attributes": []
					},
					"name": "filterMarkdown"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "getHtmlTagName",
					"type": {
						"text": "string(string ln)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "ln"
							}
						],
						"attributes": []
					},
					"name": "getHtmlTagName"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "isHtmlBlockCloseLine",
					"type": {
						"text": "bool(string ln)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "ln"
							}
						],
						"attributes": []
					},
					"name": "isHtmlBlockCloseLine"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "isHtmlBlockLine",
					"type": {
						"text": "bool(string ln)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "ln"
							}
						],
						"attributes": []
					},
					"name": "isHtmlBlockLine"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "outputHeaderLine(R)",
					"nestedName": "outputHeaderLine",
					"type": {
						"text": "void(ref R dst, string ln, string hln)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "ln"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "hln"
							}
						],
						"attributes": []
					},
					"name": "outputHeaderLine"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "parseAutoLink",
					"type": {
						"text": "bool(ref string str, ref string url)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "str"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "url"
							}
						],
						"attributes": []
					},
					"name": "parseAutoLink"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "parseHtmlBlockLine",
					"type": {
						"text": "HtmlBlockInfo(string ln)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "HtmlBlockInfo",
							"qualifiedName": "HtmlBlockInfo",
							"name": "HtmlBlockInfo",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "ln"
							}
						],
						"attributes": []
					},
					"name": "parseHtmlBlockLine"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "writeBlock(R)",
					"nestedName": "writeBlock",
					"type": {
						"text": "void(ref R dst, ref const Block block, LinkRef[string] links)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Block",
									"qualifiedName": "vibe.textfilter.markdown.Block",
									"name": "Block",
									"moduleName": "vibe.textfilter.markdown",
									"attributes": [
										"ref",
										"const"
									]
								},
								"name": "block"
							},
							{
								"type": {
									"kind": "type",
									"keyType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"typeClass": "associative array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "LinkRef",
										"qualifiedName": "vibe.textfilter.markdown.LinkRef",
										"name": "LinkRef",
										"moduleName": "vibe.textfilter.markdown"
									},
									"attributes": []
								},
								"name": "links"
							}
						],
						"attributes": []
					},
					"name": "writeBlock"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "writeMarkdownEscaped(R)",
					"nestedName": "writeMarkdownEscaped",
					"type": {
						"text": "void(ref R dst, string ln, in LinkRef[string] linkrefs)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "ln"
							},
							{
								"type": {
									"kind": "type",
									"keyType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"typeClass": "associative array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "LinkRef",
										"qualifiedName": "vibe.textfilter.markdown.LinkRef",
										"name": "LinkRef",
										"moduleName": "vibe.textfilter.markdown"
									},
									"attributes": [
										"in"
									]
								},
								"name": "linkrefs"
							}
						],
						"attributes": []
					},
					"name": "writeMarkdownEscaped"
				}
			]
		]
	},
	"name": "vibe.textfilter.markdown"
},
"vibe.db.mongo.connection": {
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\connection.d",
	"ddoc": "\n\tLow level mongodb protocol.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "DeleteFlags.None",
							"name": "None"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "DeleteFlags.SingleRemove",
							"name": "SingleRemove"
						}
					],
					"nestedName": "DeleteFlags",
					"name": "DeleteFlags",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "InsertFlags.None",
							"name": "None"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "InsertFlags.ContinueOnError",
							"name": "ContinueOnError"
						}
					],
					"nestedName": "InsertFlags",
					"name": "InsertFlags",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.None",
							"name": "None"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.TailableCursor",
							"name": "TailableCursor"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.SlaveOk",
							"name": "SlaveOk"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.OplogReplay",
							"name": "OplogReplay"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.NoCursorTimeout",
							"name": "NoCursorTimeout"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.AwaitData",
							"name": "AwaitData"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.Exhaust",
							"name": "Exhaust"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.Partial",
							"name": "Partial"
						}
					],
					"nestedName": "QueryFlags",
					"name": "QueryFlags",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "ReplyFlags.None",
							"name": "None"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "ReplyFlags.CursorNotFound",
							"name": "CursorNotFound"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "ReplyFlags.QueryFailure",
							"name": "QueryFailure"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "ReplyFlags.ShardConfigStale",
							"name": "ShardConfigStale"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "ReplyFlags.AwaitCapable",
							"name": "AwaitCapable"
						}
					],
					"nestedName": "ReplyFlags",
					"name": "ReplyFlags",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "UpdateFlags.None",
							"name": "None"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "UpdateFlags.Upsert",
							"name": "Upsert"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "UpdateFlags.MultiUpdate",
							"name": "MultiUpdate"
						}
					],
					"nestedName": "UpdateFlags",
					"name": "UpdateFlags",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.connectTimeoutMS",
									"type": {
										"kind": "type",
										"text": "long",
										"typeClass": "primitive",
										"nestedName": "long",
										"qualifiedName": "long",
										"name": "long",
										"moduleName": "",
										"attributes": []
									},
									"name": "connectTimeoutMS"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.database",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "database"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.defQueryFlags",
									"type": {
										"kind": "type",
										"text": "QueryFlags",
										"typeClass": "primitive",
										"nestedName": "QueryFlags",
										"qualifiedName": "vibe.db.mongo.connection.QueryFlags",
										"name": "QueryFlags",
										"moduleName": "vibe.db.mongo.connection",
										"attributes": []
									},
									"name": "defQueryFlags"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.fsync",
									"type": {
										"kind": "type",
										"text": "bool",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": "",
										"attributes": []
									},
									"name": "fsync"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.hosts",
									"type": {
										"kind": "type",
										"text": "MongoHost[]",
										"typeClass": "array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoHost",
											"qualifiedName": "vibe.db.mongo.connection.MongoHost",
											"name": "MongoHost",
											"moduleName": "vibe.db.mongo.connection"
										},
										"attributes": []
									},
									"name": "hosts"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.journal",
									"type": {
										"kind": "type",
										"text": "bool",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": "",
										"attributes": []
									},
									"name": "journal"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.password",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "password"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.replicaSet",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "replicaSet"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.safe",
									"type": {
										"kind": "type",
										"text": "bool",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": "",
										"attributes": []
									},
									"name": "safe"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.socketTimeoutMS",
									"type": {
										"kind": "type",
										"text": "long",
										"typeClass": "primitive",
										"nestedName": "long",
										"qualifiedName": "long",
										"name": "long",
										"moduleName": "",
										"attributes": []
									},
									"name": "socketTimeoutMS"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.username",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "username"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.w",
									"type": {
										"kind": "type",
										"text": "Bson",
										"typeClass": "primitive",
										"nestedName": "Bson",
										"qualifiedName": "vibe.data.bson.Bson",
										"name": "Bson",
										"moduleName": "vibe.data.bson",
										"attributes": []
									},
									"name": "w"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoClientSettings.wTimeoutMS",
									"type": {
										"kind": "type",
										"text": "long",
										"typeClass": "primitive",
										"nestedName": "long",
										"qualifiedName": "long",
										"name": "long",
										"moduleName": "",
										"attributes": []
									},
									"name": "wTimeoutMS"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MongoClientSettings",
					"name": "MongoClientSettings"
				}
			],
			[
				{
					"ddoc": "\n\tProvides low-level mongodb protocol access.\n\n\tNote that a MongoConnection my only be used from one fiber/thread at a time.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "MongoConnection.this",
									"type": {
										"text": "MongoConnection(string server, ushort port = cast(ushort)27017)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoConnection",
											"qualifiedName": "vibe.db.mongo.connection.MongoConnection",
											"name": "MongoConnection",
											"moduleName": "vibe.db.mongo.connection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "server"
											},
											{
												"defaultValue": "cast(ushort",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "MongoConnection.this",
									"type": {
										"text": "MongoConnection(MongoClientSettings cfg)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoConnection",
											"qualifiedName": "vibe.db.mongo.connection.MongoConnection",
											"name": "MongoConnection",
											"moduleName": "vibe.db.mongo.connection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "MongoClientSettings",
													"qualifiedName": "vibe.db.mongo.connection.MongoClientSettings",
													"name": "MongoClientSettings",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "cfg"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.acquire",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "acquire"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.connect",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "connect"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.connected",
									"type": {
										"text": "const @property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "connected"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.delete_",
									"type": {
										"text": "void(string collection_name, DeleteFlags flags, Bson selector)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "DeleteFlags",
													"qualifiedName": "vibe.db.mongo.connection.DeleteFlags",
													"name": "DeleteFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "selector"
											}
										],
										"attributes": []
									},
									"name": "delete_"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.disconnect",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "disconnect"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.getMore",
									"type": {
										"text": "Reply(string collection_name, int nret, long cursor_id)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Reply",
											"qualifiedName": "vibe.db.mongo.connection.Reply",
											"name": "Reply",
											"moduleName": "vibe.db.mongo.connection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "nret"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "cursor_id"
											}
										],
										"attributes": []
									},
									"name": "getMore"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.insert",
									"type": {
										"text": "void(string collection_name, InsertFlags flags, Bson[] documents)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InsertFlags",
													"qualifiedName": "vibe.db.mongo.connection.InsertFlags",
													"name": "InsertFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Bson",
														"qualifiedName": "vibe.data.bson.Bson",
														"name": "Bson",
														"moduleName": "vibe.data.bson"
													},
													"attributes": []
												},
												"name": "documents"
											}
										],
										"attributes": []
									},
									"name": "insert"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.isOwner",
									"type": {
										"text": "bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "isOwner"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.killCursors",
									"type": {
										"text": "void(long[] cursors)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "long",
														"qualifiedName": "long",
														"name": "long",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "cursors"
											}
										],
										"attributes": []
									},
									"name": "killCursors"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.query",
									"type": {
										"text": "Reply(string collection_name, QueryFlags flags, int nskip, int nret, Bson query, Bson returnFieldSelector = (Bson __ctmp1739;\r\n , __ctmp1739).this(null))",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Reply",
											"qualifiedName": "vibe.db.mongo.connection.Reply",
											"name": "Reply",
											"moduleName": "vibe.db.mongo.connection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "QueryFlags",
													"qualifiedName": "vibe.db.mongo.connection.QueryFlags",
													"name": "QueryFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "nskip"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "nret"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "query"
											},
											{
												"defaultValue": "(Bson__ctmp1739;,__ctmp1739",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "returnFieldSelector"
											}
										],
										"attributes": []
									},
									"name": "query"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.release",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "release"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.update",
									"type": {
										"text": "void(string collection_name, UpdateFlags flags, Bson selector, Bson update)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "UpdateFlags",
													"qualifiedName": "vibe.db.mongo.connection.UpdateFlags",
													"name": "UpdateFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "selector"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "update"
											}
										],
										"attributes": []
									},
									"name": "update"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoConnection.defaultPort",
									"type": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									},
									"name": "defaultPort"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MongoConnection",
					"interfaces": [
						{
							"kind": "type",
							"text": "EventedObject",
							"typeClass": "primitive",
							"nestedName": "EventedObject",
							"qualifiedName": "vibe.core.driver.EventedObject",
							"name": "EventedObject",
							"moduleName": "vibe.core.driver",
							"attributes": []
						}
					],
					"name": "MongoConnection"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "MongoHost.this",
									"type": {
										"text": "MongoHost(string hostName, ushort mongoPort)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoHost",
											"qualifiedName": "vibe.db.mongo.connection.MongoHost",
											"name": "MongoHost",
											"moduleName": "vibe.db.mongo.connection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "hostName"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "mongoPort"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoHost.name",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "name"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoHost.port",
									"type": {
										"kind": "type",
										"text": "ushort",
										"typeClass": "primitive",
										"nestedName": "ushort",
										"qualifiedName": "ushort",
										"name": "ushort",
										"moduleName": "",
										"attributes": []
									},
									"name": "port"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MongoHost",
					"name": "MongoHost"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Reply.cursor",
									"type": {
										"kind": "type",
										"text": "long",
										"typeClass": "primitive",
										"nestedName": "long",
										"qualifiedName": "long",
										"name": "long",
										"moduleName": "",
										"attributes": []
									},
									"name": "cursor"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Reply.documents",
									"type": {
										"kind": "type",
										"text": "Bson[]",
										"typeClass": "array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"attributes": []
									},
									"name": "documents"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Reply.firstDocument",
									"type": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									},
									"name": "firstDocument"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Reply.flags",
									"type": {
										"kind": "type",
										"text": "ReplyFlags",
										"typeClass": "primitive",
										"nestedName": "ReplyFlags",
										"qualifiedName": "vibe.db.mongo.connection.ReplyFlags",
										"name": "ReplyFlags",
										"moduleName": "vibe.db.mongo.connection",
										"attributes": []
									},
									"name": "flags"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Reply",
					"name": "Reply"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n Parses the given string as a mongodb URL. Url must be in the form documented at\n $(LINK http://www.mongodb.org/display/DOCS/Connections) which is:\n\n mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n\n Returns: true if the URL was successfully parsed. False if the URL can not be parsed.\n\n If the URL is successfully parsed the MongoClientSettings instance will contain the parsed config.\n If the URL is not successfully parsed the information in the MongoClientSettings instance may be\n incomplete and should not be used.\n \n",
					"kind": "function",
					"protection": "public",
					"nestedName": "parseMongoDBUrl",
					"type": {
						"text": "bool(out MongoClientSettings cfg, string url)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "MongoClientSettings",
									"qualifiedName": "vibe.db.mongo.connection.MongoClientSettings",
									"name": "MongoClientSettings",
									"moduleName": "vibe.db.mongo.connection",
									"attributes": [
										"out"
									]
								},
								"name": "cfg"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "url"
							}
						],
						"attributes": []
					},
					"name": "parseMongoDBUrl"
				}
			]
		]
	},
	"name": "vibe.db.mongo.connection"
},
"vibe.textfilter.html": {
	"kind": "module",
	"file": "..\\source\\vibe\\textfilter\\html.d",
	"ddoc": "\n\tHTML character entity escaping.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"kind": "function",
					"templateName": "filterHtmlAllEscape()",
					"nestedName": "filterHtmlAllEscape",
					"type": {
						"text": "string(string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "filterHtmlAllEscape"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "filterHtmlAllEscape(R)",
					"nestedName": "filterHtmlAllEscape",
					"type": {
						"text": "void(ref R dst, string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "filterHtmlAllEscape"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "filterHtmlAttribEscape(R)",
					"nestedName": "filterHtmlAttribEscape",
					"type": {
						"text": "void(ref R dst, string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "filterHtmlAttribEscape"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "filterHtmlEscape(R)",
					"nestedName": "filterHtmlEscape",
					"type": {
						"text": "void(ref R dst, string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "filterHtmlEscape"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "filterHtmlEscape(R)",
					"nestedName": "filterHtmlEscape",
					"type": {
						"text": "void(ref R dst, dchar ch, bool escape_quotes = false)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "dchar",
									"qualifiedName": "dchar",
									"name": "dchar",
									"moduleName": "",
									"attributes": []
								},
								"name": "ch"
							},
							{
								"defaultValue": "false",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "bool",
									"qualifiedName": "bool",
									"name": "bool",
									"moduleName": "",
									"attributes": []
								},
								"name": "escape_quotes"
							}
						],
						"attributes": []
					},
					"name": "filterHtmlEscape"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "htmlAttribEscape",
					"type": {
						"text": "string(string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "htmlAttribEscape"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "htmlEscape",
					"type": {
						"text": "string(string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "htmlEscape"
				}
			]
		]
	},
	"name": "vibe.textfilter.html"
},
"vibe.d": {
	"kind": "module",
	"file": "..\\source\\vibe\\d.d",
	"ddoc": "\n\tvibe.d is the default module for vibe.d based applications.\n\n\tApplications that import 'vibe.d' will have most of the vibe API available and will be provided\n\twith an implicit application entry point (main). The resulting application parses command line\n\tparameters and reads the global vibe.d configuration (/etc/vibe/vibe.conf).\n\n\tInitialization is done in module constructors (static this), which run just before the event\n\tloop is started by the application entry point.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
	},
	"name": "vibe.d"
},
"vibe.http.dist": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\dist.d",
	"ddoc": "\n\tInterface for the VibeDist load balancer\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tListens for HTTP connections on the spefified load balancer using the given HTTP server settings.\n\n\tThis function is usable as direct replacement of\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttpDist",
					"type": {
						"text": "void(HttpServerSettings settings, void delegate(HttpServerRequest req, HttpServerResponse res) handler, string balancer_address, ushort balancer_port = cast(ushort)11000)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerRequest",
												"qualifiedName": "vibe.http.server.HttpServerRequest",
												"name": "HttpServerRequest",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "req"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerResponse",
												"qualifiedName": "vibe.http.server.HttpServerResponse",
												"name": "HttpServerResponse",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "res"
										}
									],
									"attributes": []
								},
								"name": "handler"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "balancer_address"
							},
							{
								"defaultValue": "cast(ushort",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "balancer_port"
							}
						],
						"attributes": []
					},
					"name": "listenHttpDist"
				}
			]
		]
	},
	"name": "vibe.http.dist"
},
"vibe.core.core": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\core.d",
	"ddoc": "\n\tThis module contains the core functionality of the vibe framework.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tEnables multithreaded worker task processing.\n\n\tThis function will start up a number of worker threads that will process tasks started using\n\trunWorkerTask(). runTask() will still execute tasks on the calling thread.\n\n\tNote that this functionality is experimental right now and is not recommended for general use.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "enableWorkerThreads",
					"type": {
						"text": "void()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "enableWorkerThreads"
				}
			],
			[
				{
					"ddoc": "\n\tStops the currently running event loop.\n\n\tCalling this function will cause the event loop to stop event processing and\n\tthe corresponding call to runEventLoop() will return to its caller.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "exitEventLoop",
					"type": {
						"text": "void()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "exitEventLoop"
				}
			],
			[
				{
					"ddoc": "\n\tReturns a task/fiber specific variable.\n",
					"kind": "function",
					"templateName": "getTaskLocal(T)",
					"nestedName": "getTaskLocal",
					"type": {
						"text": "T(string name)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "T",
							"qualifiedName": "T",
							"name": "T",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "name"
							}
						],
						"attributes": []
					},
					"name": "getTaskLocal"
				}
			],
			[
				{
					"ddoc": "\n\tReturns a task/fiber specific variable.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isTaskLocalSet",
					"type": {
						"text": "bool(string name)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "name"
							}
						],
						"attributes": []
					},
					"name": "isTaskLocalSet"
				}
			],
			[
				{
					"ddoc": "\n\tProcess all pending events without blocking.\n\n\tChecks if events are ready to trigger immediately, and run their callbacks if so.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "processEvents",
					"type": {
						"text": "int()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "int",
							"qualifiedName": "int",
							"name": "int",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "processEvents"
				}
			],
			[
				{
					"ddoc": "\n\tYields execution of this task until an event wakes it up again.\n\n\tBeware that the task will starve if no event wakes it up.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "rawYield",
					"type": {
						"text": "void()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "rawYield"
				}
			],
			[
				{
					"ddoc": "\n\n\n\tStarts the vibe event loop.\n\n\tNote that this function is usually called automatically by the vibe framework. However, if\n\tyou provide your own main() function, you need to call it manually.\n\n\tThe event loop will continue running during the whole life time of the application.\n\tTasks will be started and handled from within the event loop.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "runEventLoop",
					"type": {
						"text": "int()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "int",
							"qualifiedName": "int",
							"name": "int",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "runEventLoop"
				}
			],
			[
				{
					"ddoc": "\n\tRuns a new asynchronous task.\n\n\ttask will be called synchronously from within the vibeRunTask call. It will\n\tcontinue to run until vibeYield() or any of the I/O or wait functions is\n\tcalled.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "runTask",
					"type": {
						"text": "Task(void delegate() task)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Task",
							"qualifiedName": "vibe.core.driver.Task",
							"name": "Task",
							"moduleName": "vibe.core.driver"
						},
						"parameters": [
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [],
									"attributes": []
								},
								"name": "task"
							}
						],
						"attributes": []
					},
					"name": "runTask"
				}
			],
			[
				{
					"ddoc": "\n\tRuns a new asynchronous task in a worker thread.\n\n\tNOTE: the interface of this function will change in the future to ensure that no unprotected\n\tdata is passed between threads!\n\n\tNOTE: You should not use this function yet and it currently behaves just like runTask.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "runWorkerTask",
					"type": {
						"text": "void(void delegate() task)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [],
									"attributes": []
								},
								"name": "task"
							}
						],
						"attributes": []
					},
					"name": "runWorkerTask"
				}
			],
			[
				{
					"ddoc": "\n\tSets a callback that is called whenever no events are left in the event queue.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "setIdleHandler",
					"type": {
						"text": "void(void delegate() del)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [],
									"attributes": []
								},
								"name": "del"
							}
						],
						"attributes": []
					},
					"name": "setIdleHandler"
				}
			],
			[
				{
					"ddoc": "\n\tSets a variable specific to the calling task/fiber.\n",
					"kind": "function",
					"templateName": "setTaskLocal(T)",
					"nestedName": "setTaskLocal",
					"type": {
						"text": "void(string name, T value)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "name"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "value"
							}
						],
						"attributes": []
					},
					"name": "setTaskLocal"
				}
			],
			[
				{
					"ddoc": "\n\tSets the stack size for tasks.\n\n\tThe default stack size is set to 16 KiB, which is sufficient for most tasks. Tuning this value\n\tcan be used to reduce memory usage for great numbers of concurrent tasks or to allow applications\n\twith heavy stack use.\n\n\tNote that this function must be called before any task is started to have an effect.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "setTaskStackSize",
					"type": {
						"text": "void(uint sz)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "uint",
									"qualifiedName": "uint",
									"name": "uint",
									"moduleName": "",
									"attributes": []
								},
								"name": "sz"
							}
						],
						"attributes": []
					},
					"name": "setTaskStackSize"
				}
			],
			[
				{
					"ddoc": "\n\tReturns a new armed timer.\n\n\tParams:\n\t\ttimeout = Determines the minimum amount of time that elapses before the timer fires.\n\t\tcallback = This delegate will be called when the timer fires\n\t\tperiodic = Speficies if the timer fires repeatedly or only once\n\n\tReturns:\n\t\tReturns a Timer object that can be used to identify and modify the timer.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "setTimer",
					"type": {
						"text": "Timer(Duration timeout, void delegate() callback, bool periodic = false)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Timer",
							"qualifiedName": "vibe.core.driver.Timer",
							"name": "Timer",
							"moduleName": "vibe.core.driver"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Duration",
									"qualifiedName": "Duration",
									"name": "Duration",
									"moduleName": "",
									"attributes": []
								},
								"name": "timeout"
							},
							{
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [],
									"attributes": []
								},
								"name": "callback"
							},
							{
								"defaultValue": "false",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "bool",
									"qualifiedName": "bool",
									"name": "bool",
									"moduleName": "",
									"attributes": []
								},
								"name": "periodic"
							}
						],
						"attributes": []
					},
					"name": "setTimer"
				}
			],
			[
				{
					"ddoc": "\n\tSuspends the execution of the calling task for the specified amount of time.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "sleep",
					"type": {
						"text": "void(Duration timeout)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Duration",
									"qualifiedName": "Duration",
									"name": "Duration",
									"moduleName": "",
									"attributes": []
								},
								"name": "timeout"
							}
						],
						"attributes": []
					},
					"name": "sleep"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "start",
					"type": {
						"text": "int()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "int",
							"qualifiedName": "int",
							"name": "int",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "start"
				}
			],
			[
				{
					"ddoc": "\n\tSuspends the execution of the calling task to let other tasks and events be\n\thandled.\n\n\tCalling this function in short intervals is recommended if long CPU\n\tcomputations are carried out by a task. It can also be used in conjunction\n\twith Signals to implement cross-fiber events with no polling.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "yield",
					"type": {
						"text": "void()",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "yield"
				}
			]
		],
		"variables": [
			[
				{
					"ddoc": "\n\tA version string representing the current vibe version\n",
					"kind": "variable",
					"protection": "public",
					"nestedName": "VibeVersionString",
					"type": {
						"kind": "type",
						"text": "string",
						"typeClass": "primitive",
						"nestedName": "string",
						"qualifiedName": "string",
						"name": "string",
						"moduleName": "",
						"attributes": []
					},
					"name": "VibeVersionString"
				}
			]
		]
	},
	"name": "vibe.core.core"
},
"vibe.http.fileserver": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\fileserver.d",
	"ddoc": "\n\tA static HTTP file server.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpFileServerSettings.this",
									"type": {
										"text": "HttpFileServerSettings()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpFileServerSettings",
											"qualifiedName": "vibe.http.fileserver.HttpFileServerSettings",
											"name": "HttpFileServerSettings",
											"moduleName": "vibe.http.fileserver"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpFileServerSettings.this",
									"type": {
										"text": "HttpFileServerSettings(string path_prefix)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpFileServerSettings",
											"qualifiedName": "vibe.http.fileserver.HttpFileServerSettings",
											"name": "HttpFileServerSettings",
											"moduleName": "vibe.http.fileserver"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path_prefix"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpFileServerSettings.failIfNotFound",
									"type": {
										"kind": "type",
										"text": "bool",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": "",
										"attributes": []
									},
									"name": "failIfNotFound"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpFileServerSettings.maxAge",
									"type": {
										"kind": "type",
										"text": "long",
										"typeClass": "primitive",
										"nestedName": "long",
										"qualifiedName": "long",
										"name": "long",
										"moduleName": "",
										"attributes": []
									},
									"name": "maxAge"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpFileServerSettings.serverPathPrefix",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "serverPathPrefix"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpFileServerSettings",
					"name": "HttpFileServerSettings"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "serveStaticFiles",
					"type": {
						"text": "void delegate(HttpServerRequest req, HttpServerResponse res)(string local_path, HttpFileServerSettings settings = null)",
						"typeClass": "function",
						"returnType": {
							"typeClass": "delegate",
							"returnType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "void",
								"qualifiedName": "void",
								"name": "void",
								"moduleName": ""
							},
							"parameters": [
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerRequest",
										"qualifiedName": "vibe.http.server.HttpServerRequest",
										"name": "HttpServerRequest",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "req"
								},
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerResponse",
										"qualifiedName": "vibe.http.server.HttpServerResponse",
										"name": "HttpServerResponse",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "res"
								}
							]
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "local_path"
							},
							{
								"defaultValue": "null",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpFileServerSettings",
									"qualifiedName": "vibe.http.fileserver.HttpFileServerSettings",
									"name": "HttpFileServerSettings",
									"moduleName": "vibe.http.fileserver",
									"attributes": []
								},
								"name": "settings"
							}
						],
						"attributes": []
					},
					"name": "serveStaticFiles"
				}
			]
		]
	},
	"name": "vibe.http.fileserver"
},
"vibe.data.utils": {
	"kind": "module",
	"file": "..\\source\\vibe\\data\\utils.d",
	"ddoc": "\n\tUtility functions for data serialization\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"templates": [
			[
				{
					"kind": "template",
					"protection": "public",
					"members": {
					},
					"nestedName": "isRWPlainField(T,string M)",
					"name": "isRWPlainField(T,string M)"
				}
			]
		],
		"variables": [
			[
				{
					"kind": "variable",
					"templateName": "isRWField(T,string M)",
					"nestedName": "isRWField",
					"name": "isRWField"
				}
			]
		]
	},
	"name": "vibe.data.utils"
},
"vibe.db.redis.redis": {
	"kind": "module",
	"file": "..\\source\\vibe\\db\\redis\\redis.d",
	"members": {
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "RedisClient.this",
									"type": {
										"text": "RedisClient()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisClient",
											"qualifiedName": "vibe.db.redis.redis.RedisClient",
											"name": "RedisClient",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.Zcard",
									"type": {
										"text": "uint(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "Zcard"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "append(T : E[],E)",
									"nestedName": "RedisClient.append",
									"type": {
										"text": "size_t(string key, T suffix)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "suffix"
											}
										],
										"attributes": []
									},
									"name": "append"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "argsToUbyte(ARGS...)",
									"nestedName": "RedisClient.argsToUbyte",
									"type": {
										"text": "ubyte[][](ARGS args)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "array",
												"elementType": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ubyte",
													"qualifiedName": "ubyte",
													"name": "ubyte",
													"moduleName": ""
												}
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ARGS",
													"qualifiedName": "ARGS",
													"name": "ARGS",
													"moduleName": "",
													"attributes": []
												},
												"name": "args"
											}
										],
										"attributes": []
									},
									"name": "argsToUbyte"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.auth",
									"type": {
										"text": "void(string password)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "password"
											}
										],
										"attributes": []
									},
									"name": "auth"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.configResetStat",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "configResetStat"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.connect",
									"type": {
										"text": "void(string host = \"127.0.0.1\", ushort port = cast(ushort)6379)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"defaultValue": "127.0.0.1\"",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "host"
											},
											{
												"defaultValue": "cast(ushort",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "connect"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.dbSize",
									"type": {
										"text": "uint()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "dbSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.decr",
									"type": {
										"text": "int(string key, int value = 1)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"defaultValue": "1",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "decr"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.del",
									"type": {
										"text": "uint(string[] keys...)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "keys..."
											}
										],
										"attributes": []
									},
									"name": "del"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "echo(T : E[],E)",
									"nestedName": "RedisClient.echo",
									"type": {
										"text": "T(T data)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "data"
											}
										],
										"attributes": []
									},
									"name": "echo"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.exists",
									"type": {
										"text": "bool(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "exists"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.expire",
									"type": {
										"text": "bool(string key, uint seconds)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "seconds"
											}
										],
										"attributes": []
									},
									"name": "expire"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.expireAt",
									"type": {
										"text": "bool(string key, long timestamp)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "timestamp"
											}
										],
										"attributes": []
									},
									"name": "expireAt"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.flushAll",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flushAll"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.flushDB",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flushDB"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "get(T : E[],E)",
									"nestedName": "RedisClient.get",
									"type": {
										"text": "T(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "get"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.getBit",
									"type": {
										"text": "bool(string key, uint offset)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "offset"
											}
										],
										"attributes": []
									},
									"name": "getBit"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "getConfig(T : E[],E)",
									"nestedName": "RedisClient.getConfig",
									"type": {
										"text": "T(string parameter)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "parameter"
											}
										],
										"attributes": []
									},
									"name": "getConfig"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "getRange(T : E[],E)",
									"nestedName": "RedisClient.getRange",
									"type": {
										"text": "T(string key, size_t start, size_t end)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "size_t",
													"qualifiedName": "size_t",
													"name": "size_t",
													"moduleName": "",
													"attributes": []
												},
												"name": "start"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "size_t",
													"qualifiedName": "size_t",
													"name": "size_t",
													"moduleName": "",
													"attributes": []
												},
												"name": "end"
											}
										],
										"attributes": []
									},
									"name": "getRange"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "getSet(T : E[],E)",
									"nestedName": "RedisClient.getSet",
									"type": {
										"text": "T(string key, T value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "getSet"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.hdel",
									"type": {
										"text": "uint(string key, string[] fields...)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "fields..."
											}
										],
										"attributes": []
									},
									"name": "hdel"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.hexists",
									"type": {
										"text": "bool(string key, string field)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "field"
											}
										],
										"attributes": []
									},
									"name": "hexists"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "hget(T : E[],E)",
									"nestedName": "RedisClient.hget",
									"type": {
										"text": "T(string key, string field)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "field"
											}
										],
										"attributes": []
									},
									"name": "hget"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.hgetAll",
									"type": {
										"text": "RedisReply(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "hgetAll"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.hincr",
									"type": {
										"text": "int(string key, string field, int value = 1)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "field"
											},
											{
												"defaultValue": "1",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "hincr"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.hkeys",
									"type": {
										"text": "RedisReply(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "hkeys"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.hlen",
									"type": {
										"text": "uint(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "hlen"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.hmget",
									"type": {
										"text": "RedisReply(string key, string[] fields...)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "fields..."
											}
										],
										"attributes": []
									},
									"name": "hmget"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "hmset(ARGS...)",
									"nestedName": "RedisClient.hmset",
									"type": {
										"text": "void(string key, ARGS args)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ARGS",
													"qualifiedName": "ARGS",
													"name": "ARGS",
													"moduleName": "",
													"attributes": []
												},
												"name": "args"
											}
										],
										"attributes": []
									},
									"name": "hmset"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "hmsetNX(ARGS...)",
									"nestedName": "RedisClient.hmsetNX",
									"type": {
										"text": "bool(string key, ARGS args)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ARGS",
													"qualifiedName": "ARGS",
													"name": "ARGS",
													"moduleName": "",
													"attributes": []
												},
												"name": "args"
											}
										],
										"attributes": []
									},
									"name": "hmsetNX"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.hvals",
									"type": {
										"text": "RedisReply(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "hvals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.incr",
									"type": {
										"text": "int(string key, int value = 1)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"defaultValue": "1",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "incr"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.info",
									"type": {
										"text": "string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "info"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.keys",
									"type": {
										"text": "RedisReply(string pattern)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "pattern"
											}
										],
										"attributes": []
									},
									"name": "keys"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.lastSave",
									"type": {
										"text": "long()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "long",
											"qualifiedName": "long",
											"name": "long",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "lastSave"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "lindex(T : E[],E)",
									"nestedName": "RedisClient.lindex",
									"type": {
										"text": "T(string key, size_t index)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "size_t",
													"qualifiedName": "size_t",
													"name": "size_t",
													"moduleName": "",
													"attributes": []
												},
												"name": "index"
											}
										],
										"attributes": []
									},
									"name": "lindex"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "linsertAfter(T1,T2)",
									"nestedName": "RedisClient.linsertAfter",
									"type": {
										"text": "size_t(string key, T1 pivot, T2 value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T1",
													"qualifiedName": "T1",
													"name": "T1",
													"moduleName": "",
													"attributes": []
												},
												"name": "pivot"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T2",
													"qualifiedName": "T2",
													"name": "T2",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "linsertAfter"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "linsertBefore(T1,T2)",
									"nestedName": "RedisClient.linsertBefore",
									"type": {
										"text": "size_t(string key, T1 pivot, T2 value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T1",
													"qualifiedName": "T1",
													"name": "T1",
													"moduleName": "",
													"attributes": []
												},
												"name": "pivot"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T2",
													"qualifiedName": "T2",
													"name": "T2",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "linsertBefore"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.llen",
									"type": {
										"text": "uint(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "llen"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "lpop(T : E[],E)",
									"nestedName": "RedisClient.lpop",
									"type": {
										"text": "T(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "lpop"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "lpop(T : E[],E)",
									"nestedName": "RedisClient.lpop",
									"type": {
										"text": "T(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "lpop"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "lpush(ARGS...)",
									"nestedName": "RedisClient.lpush",
									"type": {
										"text": "size_t(string key, ARGS args)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ARGS",
													"qualifiedName": "ARGS",
													"name": "ARGS",
													"moduleName": "",
													"attributes": []
												},
												"name": "args"
											}
										],
										"attributes": []
									},
									"name": "lpush"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "lpushX(ARGS...)",
									"nestedName": "RedisClient.lpushX",
									"type": {
										"text": "size_t(string key, T value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "lpushX"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.lrange",
									"type": {
										"text": "RedisReply(string key, uint start, uint stop)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "start"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "stop"
											}
										],
										"attributes": []
									},
									"name": "lrange"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "lrem(T : E[],E)",
									"nestedName": "RedisClient.lrem",
									"type": {
										"text": "size_t(string key, size_t count, T value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "size_t",
													"qualifiedName": "size_t",
													"name": "size_t",
													"moduleName": "",
													"attributes": []
												},
												"name": "count"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "lrem"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "lset(T : E[],E)",
									"nestedName": "RedisClient.lset",
									"type": {
										"text": "void(string key, size_t index, T value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "size_t",
													"qualifiedName": "size_t",
													"name": "size_t",
													"moduleName": "",
													"attributes": []
												},
												"name": "index"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "lset"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.ltrim",
									"type": {
										"text": "void(string key, uint start, uint stop)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "start"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "stop"
											}
										],
										"attributes": []
									},
									"name": "ltrim"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.mget",
									"type": {
										"text": "RedisReply(string[] keys)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "keys"
											}
										],
										"attributes": []
									},
									"name": "mget"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.move",
									"type": {
										"text": "bool(string key, string db)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "db"
											}
										],
										"attributes": []
									},
									"name": "move"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "mset(ARGS...)",
									"nestedName": "RedisClient.mset",
									"type": {
										"text": "void(ARGS args)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ARGS",
													"qualifiedName": "ARGS",
													"name": "ARGS",
													"moduleName": "",
													"attributes": []
												},
												"name": "args"
											}
										],
										"attributes": []
									},
									"name": "mset"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "msetNX(ARGS...)",
									"nestedName": "RedisClient.msetNX",
									"type": {
										"text": "bool(ARGS args)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ARGS",
													"qualifiedName": "ARGS",
													"name": "ARGS",
													"moduleName": "",
													"attributes": []
												},
												"name": "args"
											}
										],
										"attributes": []
									},
									"name": "msetNX"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.persists",
									"type": {
										"text": "bool(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "persists"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.ping",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "ping"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.quit",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "quit"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.randomKey",
									"type": {
										"text": "string()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "randomKey"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.rename",
									"type": {
										"text": "void(string key, string newkey)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "newkey"
											}
										],
										"attributes": []
									},
									"name": "rename"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.renameNX",
									"type": {
										"text": "bool(string key, string newkey)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "newkey"
											}
										],
										"attributes": []
									},
									"name": "renameNX"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "request(T = RedisReply)",
									"nestedName": "RedisClient.request",
									"type": {
										"text": "T(string command, in ubyte[][] args...)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "command"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "array",
														"elementType": {
															"kind": "type",
															"typeClass": "primitive",
															"nestedName": "ubyte",
															"qualifiedName": "ubyte",
															"name": "ubyte",
															"moduleName": ""
														}
													},
													"attributes": [
														"in"
													]
												},
												"name": "args..."
											}
										],
										"attributes": []
									},
									"name": "request"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "rpop(T : E[],E)",
									"nestedName": "RedisClient.rpop",
									"type": {
										"text": "T(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "rpop"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "rpoplpush(T : E[],E)",
									"nestedName": "RedisClient.rpoplpush",
									"type": {
										"text": "T(string key, string destination)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "destination"
											}
										],
										"attributes": []
									},
									"name": "rpoplpush"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "sadd(ARGS...)",
									"nestedName": "RedisClient.sadd",
									"type": {
										"text": "size_t(string key, ARGS args)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ARGS",
													"qualifiedName": "ARGS",
													"name": "ARGS",
													"moduleName": "",
													"attributes": []
												},
												"name": "args"
											}
										],
										"attributes": []
									},
									"name": "sadd"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.save",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "save"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.scard",
									"type": {
										"text": "uint(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "scard"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.sdiff",
									"type": {
										"text": "RedisReply(string[] keys...)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "keys..."
											}
										],
										"attributes": []
									},
									"name": "sdiff"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.sdiffStore",
									"type": {
										"text": "uint(string destination, string[] keys...)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "destination"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "keys..."
											}
										],
										"attributes": []
									},
									"name": "sdiffStore"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.select",
									"type": {
										"text": "void(uint db_index)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "db_index"
											}
										],
										"attributes": []
									},
									"name": "select"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "set(T : E[],E)",
									"nestedName": "RedisClient.set",
									"type": {
										"text": "void(string key, T value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "set"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.setBit",
									"type": {
										"text": "bool(string key, uint offset, bool value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "offset"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "setBit"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "setConfig(T : E[],E)",
									"nestedName": "RedisClient.setConfig",
									"type": {
										"text": "void(string parameter, T value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "parameter"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "setConfig"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "setEX(T : E[],E)",
									"nestedName": "RedisClient.setEX",
									"type": {
										"text": "void(string key, size_t seconds, T value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "size_t",
													"qualifiedName": "size_t",
													"name": "size_t",
													"moduleName": "",
													"attributes": []
												},
												"name": "seconds"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "setEX"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "setNX(T : E[],E)",
									"nestedName": "RedisClient.setNX",
									"type": {
										"text": "bool(string key, T value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "setNX"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "setRange(T : E[],E)",
									"nestedName": "RedisClient.setRange",
									"type": {
										"text": "size_t(string key, size_t offset, T value)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "size_t",
													"qualifiedName": "size_t",
													"name": "size_t",
													"moduleName": "",
													"attributes": []
												},
												"name": "offset"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "setRange"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.shutdown",
									"type": {
										"text": "void()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "shutdown"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.sinter",
									"type": {
										"text": "RedisReply(string[] keys)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "keys"
											}
										],
										"attributes": []
									},
									"name": "sinter"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.sinterStore",
									"type": {
										"text": "uint(string destination, string[] keys...)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "destination"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "keys..."
											}
										],
										"attributes": []
									},
									"name": "sinterStore"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "sisMember(T : E[],E)",
									"nestedName": "RedisClient.sisMember",
									"type": {
										"text": "bool(string key, T member)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "member"
											}
										],
										"attributes": []
									},
									"name": "sisMember"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.slaveOf",
									"type": {
										"text": "void(string host, ushort port)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "host"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "slaveOf"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.smembers",
									"type": {
										"text": "bool(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "smembers"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "smove(T : E[],E)",
									"nestedName": "RedisClient.smove",
									"type": {
										"text": "bool(string source, string destination, T member)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "source"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "destination"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "member"
											}
										],
										"attributes": []
									},
									"name": "smove"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "spop(T : E[],E)",
									"nestedName": "RedisClient.spop",
									"type": {
										"text": "T(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "spop"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "srandMember(T : E[],E)",
									"nestedName": "RedisClient.srandMember",
									"type": {
										"text": "T(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "srandMember"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "srem(ARGS...)",
									"nestedName": "RedisClient.srem",
									"type": {
										"text": "size_t(string key, ARGS args)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ARGS",
													"qualifiedName": "ARGS",
													"name": "ARGS",
													"moduleName": "",
													"attributes": []
												},
												"name": "args"
											}
										],
										"attributes": []
									},
									"name": "srem"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.strlen",
									"type": {
										"text": "uint(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "strlen"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.sunion",
									"type": {
										"text": "RedisReply(string[] keys...)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "keys..."
											}
										],
										"attributes": []
									},
									"name": "sunion"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.sunionStore",
									"type": {
										"text": "uint(string[] keys...)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "keys..."
											}
										],
										"attributes": []
									},
									"name": "sunionStore"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.ttl",
									"type": {
										"text": "uint(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "ttl"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.type",
									"type": {
										"text": "string(string key)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "type"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "zadd(ARGS...)",
									"nestedName": "RedisClient.zadd",
									"type": {
										"text": "size_t(string key, ARGS args)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ARGS",
													"qualifiedName": "ARGS",
													"name": "ARGS",
													"moduleName": "",
													"attributes": []
												},
												"name": "args"
											}
										],
										"attributes": []
									},
									"name": "zadd"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.zcount",
									"type": {
										"text": "uint(string key, double min, double max)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "min"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "max"
											}
										],
										"attributes": []
									},
									"name": "zcount"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.zincrby",
									"type": {
										"text": "double(string key, double value, string member)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "double",
											"qualifiedName": "double",
											"name": "double",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "member"
											}
										],
										"attributes": []
									},
									"name": "zincrby"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.zrange",
									"type": {
										"text": "RedisReply(string key, uint start, uint end, bool withScores = false)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "start"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "end"
											},
											{
												"defaultValue": "false",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "withScores"
											}
										],
										"attributes": []
									},
									"name": "zrange"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.zrank",
									"type": {
										"text": "int(string key, string member)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "member"
											}
										],
										"attributes": []
									},
									"name": "zrank"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.zrem",
									"type": {
										"text": "uint(string key, string[] members...)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "members..."
											}
										],
										"attributes": []
									},
									"name": "zrem"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.zremRangeByRank",
									"type": {
										"text": "uint(string key, int start, int stop)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "start"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "stop"
											}
										],
										"attributes": []
									},
									"name": "zremRangeByRank"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.zremRangeByScore",
									"type": {
										"text": "uint(string key, double min, double max)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "min"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "max"
											}
										],
										"attributes": []
									},
									"name": "zremRangeByScore"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.zrevRange",
									"type": {
										"text": "RedisReply(string key, uint start, uint end, bool withScores = false)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "start"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "end"
											},
											{
												"defaultValue": "false",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "withScores"
											}
										],
										"attributes": []
									},
									"name": "zrevRange"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.zrevRangeByScore",
									"type": {
										"text": "RedisReply(string key, double min, double max, bool withScores = false)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "min"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "max"
											},
											{
												"defaultValue": "false",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "withScores"
											}
										],
										"attributes": []
									},
									"name": "zrevRangeByScore"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.zrevRank",
									"type": {
										"text": "int(string key, string member)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "member"
											}
										],
										"attributes": []
									},
									"name": "zrevRank"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisClient.zscore",
									"type": {
										"text": "RedisReply(string key, string member)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "member"
											}
										],
										"attributes": []
									},
									"name": "zscore"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "RedisClient",
					"name": "RedisClient"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "RedisReply.this",
									"type": {
										"text": "RedisReply(TcpConnection conn)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "RedisReply",
											"qualifiedName": "vibe.db.redis.redis.RedisReply",
											"name": "RedisReply",
											"moduleName": "vibe.db.redis.redis"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "TcpConnection",
													"qualifiedName": "vibe.core.net.TcpConnection",
													"name": "TcpConnection",
													"moduleName": "vibe.core.net",
													"attributes": []
												},
												"name": "conn"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "RedisReply.hasNext",
									"type": {
										"text": "@property bool()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "hasNext"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "next(T : E[],E)",
									"nestedName": "RedisReply.next",
									"type": {
										"text": "T()",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "next"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "RedisReply",
					"name": "RedisReply"
				}
			]
		]
	},
	"name": "vibe.db.redis.redis"
},
"vibe.http.router": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\router.d",
	"ddoc": "\n\tPattern based URL router.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\tRoutes HTTP requests based on the request method and URL.\n\n\tRoutes are matched using a special URL match string that supports two forms of placeholders.\n\tThe following example shows how these are used.\n\n\tRegistered routes are matched in the same sequence as initially specified.\n\tMatching ends as soon as a route handler writes a response using res.writeBody()\n\tor similar means. If no route matches or if no route handler writes a response,\n\tthe router will simply not handle the request and the HTTP server may generate\n\ta 404 error.\n\n\t---\n\tvoid addGroup(HttpServerRequest req, HttpServerResponse res)\n\t{\n\t\t// Route variables are accessible via the params map\n\t\tlogInfo(\"Getting group %s for user %s.\", req.params[\"groupname\"], req.params[\"username\"]);\n\t}\n\n\tstatic this()\n\t{\n\t\tauto router = new UrlRouter;\n\t\t// Matches all GET requests for /users/*/groups/* and places\n\t\t// the place holders in req.params as 'username' and 'groupname'.\n\t\trouter.get(\"/users/:username/groups/:groupname\", &addGroup);\n\n\t\t// Natches all requests. This can be useful for authorization and\n\t\t// similar tasks. The auth method will only write a response if the\n\t\t// user is _not_ authorized. Otherwise, the router will fall through\n\t\t// and continue with the following routes.\n\t\trouter.any(\"*\", &auth)\n\n\t\t// Matches a POST request\n\t\trouter.post(\"/users/:username/delete\", &deleteUser)\n\n\t\t// Matches all GET requests in /static/ such as /static/img.png or\n\t\t// /static/styles/sty.css\n\t\trouter.get(\"/static/*\", &serveStaticFiles)\n\n\t\t// Setup a HTTP server...\n\t\tauto settings = new HttpServerSettings;\n\t\t// ...\n\n\t\t// The router can be directly passed to the listenHttp function as\n\t\t// the main request handler.\n\t\tlistenHttp(settings, router);\n\t}\n\t---\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.addRoute",
									"type": {
										"text": "void(HttpMethod method, string path, IHttpServerRequestHandler cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpMethod",
													"qualifiedName": "vibe.http.common.HttpMethod",
													"name": "HttpMethod",
													"moduleName": "vibe.http.common",
													"attributes": []
												},
												"name": "method"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "addRoute"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.addRoute",
									"type": {
										"text": "void(HttpMethod method, string path, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpMethod",
													"qualifiedName": "vibe.http.common.HttpMethod",
													"name": "HttpMethod",
													"moduleName": "vibe.http.common",
													"attributes": []
												},
												"name": "method"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											},
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "addRoute"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.addRoute",
									"type": {
										"text": "void(HttpMethod method, string path, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpMethod",
													"qualifiedName": "vibe.http.common.HttpMethod",
													"name": "HttpMethod",
													"moduleName": "vibe.http.common",
													"attributes": []
												},
												"name": "method"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											},
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "addRoute"
								}
							],
							[
								{
									"ddoc": " Adds a new route for requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.any",
									"type": {
										"text": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "any"
								},
								{
									"ddoc": " Adds a new route for requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.any",
									"type": {
										"text": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "any"
								},
								{
									"ddoc": " Adds a new route for requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.any",
									"type": {
										"text": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "any"
								}
							],
							[
								{
									"ddoc": " Adds a new route for DELETE requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.delete_",
									"type": {
										"text": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "delete_"
								},
								{
									"ddoc": " Adds a new route for DELETE requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.delete_",
									"type": {
										"text": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "delete_"
								},
								{
									"ddoc": " Adds a new route for DELETE requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.delete_",
									"type": {
										"text": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "delete_"
								}
							],
							[
								{
									"ddoc": " Adds a new route for GET requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.get",
									"type": {
										"text": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "get"
								},
								{
									"ddoc": " Adds a new route for GET requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.get",
									"type": {
										"text": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "get"
								},
								{
									"ddoc": " Adds a new route for GET requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.get",
									"type": {
										"text": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "get"
								}
							],
							[
								{
									"ddoc": " Handles a HTTP request by dispatching it to the registered route handlers.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.handleRequest",
									"type": {
										"text": "void(HttpServerRequest req, HttpServerResponse res)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerRequest",
													"qualifiedName": "vibe.http.server.HttpServerRequest",
													"name": "HttpServerRequest",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "req"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerResponse",
													"qualifiedName": "vibe.http.server.HttpServerResponse",
													"name": "HttpServerResponse",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "res"
											}
										],
										"attributes": []
									},
									"name": "handleRequest"
								}
							],
							[
								{
									"ddoc": " Adds a new route for PATCH requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.patch",
									"type": {
										"text": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "patch"
								},
								{
									"ddoc": " Adds a new route for PATCH requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.patch",
									"type": {
										"text": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "patch"
								},
								{
									"ddoc": " Adds a new route for PATCH requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.patch",
									"type": {
										"text": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "patch"
								}
							],
							[
								{
									"ddoc": " Adds a new route for POST requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.post",
									"type": {
										"text": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "post"
								},
								{
									"ddoc": " Adds a new route for POST requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.post",
									"type": {
										"text": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "post"
								},
								{
									"ddoc": " Adds a new route for POST requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.post",
									"type": {
										"text": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "post"
								}
							],
							[
								{
									"ddoc": " Adds a new route for PUT requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.put",
									"type": {
										"text": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "put"
								},
								{
									"ddoc": " Adds a new route for PUT requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.put",
									"type": {
										"text": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "put"
								},
								{
									"ddoc": " Adds a new route for PUT requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.put",
									"type": {
										"text": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeClass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "UrlRouter",
											"qualifiedName": "vibe.http.router.UrlRouter",
											"name": "UrlRouter",
											"moduleName": "vibe.http.router"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeClass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "put"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "UrlRouter",
					"interfaces": [
						{
							"kind": "type",
							"text": "IHttpServerRequestHandler",
							"typeClass": "primitive",
							"nestedName": "IHttpServerRequestHandler",
							"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
							"name": "IHttpServerRequestHandler",
							"moduleName": "vibe.http.server",
							"attributes": []
						}
					],
					"name": "UrlRouter"
				}
			]
		]
	},
	"name": "vibe.http.router"
},
"vibe.textfilter.urlencode": {
	"kind": "module",
	"file": "..\\source\\vibe\\textfilter\\urlencode.d",
	"ddoc": "\n\tURL-encode implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"kind": "function",
					"templateName": "filterUrlDecode(R)",
					"nestedName": "filterUrlDecode",
					"type": {
						"text": "void(ref R dst, string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "filterUrlDecode"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "filterUrlEncode(R)",
					"nestedName": "filterUrlEncode",
					"type": {
						"text": "void(ref R dst, string str, string allowed_chars = null)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							},
							{
								"defaultValue": "null",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "allowed_chars"
							}
						],
						"attributes": []
					},
					"name": "filterUrlEncode"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "urlDecode",
					"type": {
						"text": "string(string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "urlDecode"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "urlEncode",
					"type": {
						"text": "string(string str)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "urlEncode"
				}
			]
		]
	},
	"name": "vibe.textfilter.urlencode"
},
"vibe.core.log": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\log.d",
	"ddoc": "\n\tCentral logging facility for vibe.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"ddoc": " Specifies the log level for a particular log message.\n",
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Trace",
							"name": "Trace"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Debug",
							"name": "Debug"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Info",
							"name": "Info"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Warn",
							"name": "Warn"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Error",
							"name": "Error"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Fatal",
							"name": "Fatal"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.None",
							"name": "None"
						}
					],
					"nestedName": "LogLevel",
					"name": "LogLevel",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "logTrace(T...)",
					"nestedName": "logTrace",
					"type": {
						"text": "nothrow void(string fmt, auto ref T args)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": [
										"auto",
										"ref"
									]
								},
								"name": "args"
							}
						],
						"attributes": [
							"nothrow"
						]
					},
					"name": "logTrace"
				},
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "logDebug(T...)",
					"nestedName": "logDebug",
					"type": {
						"text": "nothrow void(string fmt, auto ref T args)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": [
										"auto",
										"ref"
									]
								},
								"name": "args"
							}
						],
						"attributes": [
							"nothrow"
						]
					},
					"name": "logDebug"
				},
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "logInfo(T...)",
					"nestedName": "logInfo",
					"type": {
						"text": "nothrow void(string fmt, auto ref T args)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": [
										"auto",
										"ref"
									]
								},
								"name": "args"
							}
						],
						"attributes": [
							"nothrow"
						]
					},
					"name": "logInfo"
				},
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "logWarn(T...)",
					"nestedName": "logWarn",
					"type": {
						"text": "nothrow void(string fmt, auto ref T args)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": [
										"auto",
										"ref"
									]
								},
								"name": "args"
							}
						],
						"attributes": [
							"nothrow"
						]
					},
					"name": "logWarn"
				},
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "logError(T...)",
					"nestedName": "logError",
					"type": {
						"text": "nothrow void(string fmt, auto ref T args)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": [
										"auto",
										"ref"
									]
								},
								"name": "args"
							}
						],
						"attributes": [
							"nothrow"
						]
					},
					"name": "logError"
				},
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "log(T...)",
					"nestedName": "log",
					"type": {
						"text": "nothrow void(LogLevel level, string fmt, auto ref T args)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "LogLevel",
									"qualifiedName": "vibe.core.log.LogLevel",
									"name": "LogLevel",
									"moduleName": "vibe.core.log",
									"attributes": []
								},
								"name": "level"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": [
										"auto",
										"ref"
									]
								},
								"name": "args"
							}
						],
						"attributes": [
							"nothrow"
						]
					},
					"name": "log"
				}
			],
			[
				{
					"ddoc": " Sets a log file for disk logging\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "setLogFile",
					"type": {
						"text": "void(string filename, LogLevel min_level = cast(LogLevel)4)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "filename"
							},
							{
								"defaultValue": "cast(LogLevel",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "LogLevel",
									"qualifiedName": "vibe.core.log.LogLevel",
									"name": "LogLevel",
									"moduleName": "vibe.core.log",
									"attributes": []
								},
								"name": "min_level"
							}
						],
						"attributes": []
					},
					"name": "setLogFile"
				}
			],
			[
				{
					"ddoc": " Sets the minimum log level to be printed.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "setLogLevel",
					"type": {
						"text": "nothrow void(LogLevel level)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "LogLevel",
									"qualifiedName": "vibe.core.log.LogLevel",
									"name": "LogLevel",
									"moduleName": "vibe.core.log",
									"attributes": []
								},
								"name": "level"
							}
						],
						"attributes": [
							"nothrow"
						]
					},
					"name": "setLogLevel"
				}
			]
		]
	},
	"name": "vibe.core.log"
},
"vibe.textfilter.ddoc": {
	"kind": "module",
	"file": "..\\source\\vibe\\textfilter\\ddoc.d",
	"ddoc": "\n\tDietDoc/DDOC support routines\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tTakes a DDOC string and outputs formatted HTML.\n\n\tThe hlevel parameter specifies the header level used for section names (&lt;h2&gt by default).\n\tBy specifying a display_section callback it is also possible to output only certain sections.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "formatDdocComment",
					"type": {
						"text": "string(string ddoc_, int hlevel = 2, bool delegate(string filename) display_section = null)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "ddoc_"
							},
							{
								"defaultValue": "2",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "hlevel"
							},
							{
								"defaultValue": "null",
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											},
											"name": "filename"
										}
									],
									"attributes": []
								},
								"name": "display_section"
							}
						],
						"attributes": []
					},
					"name": "formatDdocComment"
				},
				{
					"ddoc": "\n\tTakes a DDOC string and outputs formatted HTML.\n\n\tThe hlevel parameter specifies the header level used for section names (&lt;h2&gt by default).\n\tBy specifying a display_section callback it is also possible to output only certain sections.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "formatDdocComment",
					"type": {
						"text": "string(Json ddoc_, int hlevel = 2, bool delegate(string filename) display_section = null)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "ddoc_"
							},
							{
								"defaultValue": "2",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "hlevel"
							},
							{
								"defaultValue": "null",
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											},
											"name": "filename"
										}
									],
									"attributes": []
								},
								"name": "display_section"
							}
						],
						"attributes": []
					},
					"name": "formatDdocComment"
				},
				{
					"ddoc": "\n\tTakes a DDOC string and outputs formatted HTML.\n\n\tThe hlevel parameter specifies the header level used for section names (&lt;h2&gt by default).\n\tBy specifying a display_section callback it is also possible to output only certain sections.\n",
					"kind": "function",
					"templateName": "filterDdocComment(R)",
					"nestedName": "filterDdocComment",
					"type": {
						"text": "void(ref R dst, string ddoc, int hlevel = 2, bool delegate(string) display_section = null)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "ddoc"
							},
							{
								"defaultValue": "2",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "hlevel"
							},
							{
								"defaultValue": "null",
								"type": {
									"typeClass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											}
										}
									],
									"attributes": []
								},
								"name": "display_section"
							}
						],
						"attributes": []
					},
					"name": "filterDdocComment"
				}
			],
			[
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isKind",
					"type": {
						"text": "bool(string kind, Json n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "kind"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "isKind"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "getItemsForKind",
					"type": {
						"text": "Json[](string prot, string kind, Json n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "Json",
								"qualifiedName": "vibe.data.json.Json",
								"name": "Json",
								"moduleName": "vibe.data.json"
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "kind"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "getItemsForKind"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "hasItemsForKind",
					"type": {
						"text": "bool(string prot, string kind, Json n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "kind"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "hasItemsForKind"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isFunction",
					"type": {
						"text": "bool(Json n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "isFunction"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "functions",
					"type": {
						"text": "Json[](Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "Json",
								"qualifiedName": "vibe.data.json.Json",
								"name": "Json",
								"moduleName": "vibe.data.json"
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "functions"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "hasFunctions",
					"type": {
						"text": "bool(Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "hasFunctions"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isConstructor",
					"type": {
						"text": "bool(Json n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "isConstructor"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "constructors",
					"type": {
						"text": "Json[](Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "Json",
								"qualifiedName": "vibe.data.json.Json",
								"name": "Json",
								"moduleName": "vibe.data.json"
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "constructors"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "hasConstructors",
					"type": {
						"text": "bool(Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "hasConstructors"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isInterface",
					"type": {
						"text": "bool(Json n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "isInterface"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "interfaces",
					"type": {
						"text": "Json[](Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "Json",
								"qualifiedName": "vibe.data.json.Json",
								"name": "Json",
								"moduleName": "vibe.data.json"
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "interfaces"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "hasInterfaces",
					"type": {
						"text": "bool(Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "hasInterfaces"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isClass",
					"type": {
						"text": "bool(Json n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "isClass"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "classes",
					"type": {
						"text": "Json[](Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "Json",
								"qualifiedName": "vibe.data.json.Json",
								"name": "Json",
								"moduleName": "vibe.data.json"
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "classes"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "hasClasses",
					"type": {
						"text": "bool(Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "hasClasses"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isStruct",
					"type": {
						"text": "bool(Json n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "isStruct"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "structs",
					"type": {
						"text": "Json[](Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "Json",
								"qualifiedName": "vibe.data.json.Json",
								"name": "Json",
								"moduleName": "vibe.data.json"
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "structs"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "hasStructs",
					"type": {
						"text": "bool(Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "hasStructs"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isEnum",
					"type": {
						"text": "bool(Json n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "isEnum"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "enums",
					"type": {
						"text": "Json[](Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "Json",
								"qualifiedName": "vibe.data.json.Json",
								"name": "Json",
								"moduleName": "vibe.data.json"
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "enums"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "hasEnums",
					"type": {
						"text": "bool(Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "hasEnums"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isAlias",
					"type": {
						"text": "bool(Json n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "isAlias"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "aliases",
					"type": {
						"text": "Json[](Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "Json",
								"qualifiedName": "vibe.data.json.Json",
								"name": "Json",
								"moduleName": "vibe.data.json"
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "aliases"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "hasAliases",
					"type": {
						"text": "bool(Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "hasAliases"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isVariable",
					"type": {
						"text": "bool(Json n)",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							}
						],
						"attributes": []
					},
					"name": "isVariable"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "variables",
					"type": {
						"text": "Json[](Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "Json",
								"qualifiedName": "vibe.data.json.Json",
								"name": "Json",
								"moduleName": "vibe.data.json"
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "variables"
				},
				{
					"ddoc": "\n\tDetermines if a DDOCsteroids node contains a certain kind of child.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "hasVariables",
					"type": {
						"text": "bool(Json n, string prot = \"public\")",
						"typeClass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "n"
							},
							{
								"defaultValue": "public\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "prot"
							}
						],
						"attributes": []
					},
					"name": "hasVariables"
				}
			]
		]
	},
	"name": "vibe.textfilter.ddoc"
}
}