[
{
	"kind": "module",
	"file": "..\\source\\vibe\\d.d",
	"members": [],
	"name": "vibe.d",
	"comment": "\n\tProvides the vibe.d API and a default main() function for the application.\n\n\tApplications that import 'vibe.d' will have most of the vibe API available and will be provided\n\twith an implicit application entry point (main). The resulting application parses command line\n\tparameters and reads the global vibe.d configuration (/etc/vibe/vibe.conf).\n\n\tInitialization is done in module constructors (static this), which run just before the event\n\tloop is started by the application entry point.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\core\\driver.d",
	"members": [
		{
			"kind": "function",
			"line": 25,
			"protection": "public",
			"type": "EventDriver()",
			"name": "getEventDriver",
			"comment": "\n\tReturns the active event driver\n"
		},
		{
			"kind": "interface",
			"line": 51,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 57,
					"protection": "public",
					"type": "int()",
					"name": "runEventLoop",
					"comment": " Starts the event loop.\n\n\t\tThe loop will continue to run until either no more event listeners are active or until\n\t\texitEventLoop() is called.\n\t\n"
				},
				{
					"kind": "function",
					"line": 61,
					"protection": "public",
					"type": "int()",
					"name": "runEventLoopOnce"
				},
				{
					"kind": "function",
					"line": 65,
					"protection": "public",
					"type": "int()",
					"name": "processEvents",
					"comment": " Processes all outstanding events if any, does not block.\n\t\n"
				},
				{
					"kind": "function",
					"line": 69,
					"protection": "public",
					"type": "void()",
					"name": "exitEventLoop",
					"comment": " Exits any running event loop.\n\t\n"
				},
				{
					"kind": "function",
					"line": 73,
					"protection": "public",
					"type": "FileStream(Path path, FileMode mode)",
					"name": "openFile",
					"comment": " Opens a file on disk with the speficied file mode.\n\t\n"
				},
				{
					"kind": "function",
					"line": 77,
					"protection": "public",
					"type": "DirectoryWatcher(Path path, bool recursive)",
					"name": "watchDirectory",
					"comment": " Starts watching a directory for changes.\n\t\n"
				},
				{
					"kind": "function",
					"line": 81,
					"protection": "public",
					"type": "NetworkAddress(string host, ushort family, bool no_dns)",
					"name": "resolveHost",
					"comment": " Resolves the given host name or IP address string.\n\t\n"
				},
				{
					"kind": "function",
					"line": 87,
					"protection": "public",
					"type": "TcpConnection(string host, ushort port)",
					"name": "connectTcp",
					"comment": " Establiches a tcp connection on the specified host/port.\n\n\t\t'host' can be a DNS name or an IPv4 or IPv6 address string.\n\t\n"
				},
				{
					"kind": "function",
					"line": 95,
					"protection": "public",
					"type": "void(ushort port, void delegate(TcpConnection stream) conn_callback, string bind_address)",
					"name": "listenTcp",
					"comment": " Listens on the specified port and interface for TCP connections.\n\n\t\t'bind_address' must be an IPv4 or IPv6 address string corresponding to a local network\n\t\tinterface. conn_callback is called for every incoming connection, each time from a\n\t\tnew task.\n\t\n"
				},
				{
					"kind": "function",
					"line": 102,
					"protection": "public",
					"type": "UdpConnection(ushort port, string bind_address = \"0.0.0.0\")",
					"name": "listenUdp",
					"comment": " Creates a new UDP socket and sets the specified address/port as the destination for packets.\n\n\t\tIf a bind port is specified, the socket will be able to receive UDP packets on that port.\n\t\tOtherwise, a random bind port is chosen.\n\t\n"
				},
				{
					"kind": "function",
					"line": 106,
					"protection": "public",
					"type": "Signal()",
					"name": "createSignal",
					"comment": " Creates a new signal (a single-threaded condition variable).\n\t\n"
				},
				{
					"kind": "function",
					"line": 112,
					"protection": "public",
					"type": "Timer(void delegate() callback)",
					"name": "createTimer",
					"comment": " Creates a new timer.\n\n\t\tThe timer can be started by calling rearm() with a timeout.\n\t\n"
				}
			],
			"name": "EventDriver",
			"comment": "\n\tInterface for all evented I/O implementations\n"
		},
		{
			"kind": "interface",
			"line": 119,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 120,
					"protection": "public",
					"type": "void()",
					"name": "yieldForEvent"
				},
				{
					"kind": "function",
					"line": 121,
					"protection": "public",
					"type": "void(Task f, Exception event_exception = null)",
					"name": "resumeTask"
				},
				{
					"kind": "function",
					"line": 122,
					"protection": "public",
					"type": "void()",
					"name": "notifyIdle"
				}
			],
			"name": "DriverCore",
			"comment": "\n\tProvides an event driver with core functions for task/fiber control.\n"
		},
		{
			"kind": "interface",
			"line": 134,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 136,
					"protection": "public",
					"type": "void()",
					"name": "release",
					"comment": " Releases the ownership of the object.\n"
				},
				{
					"kind": "function",
					"line": 139,
					"protection": "public",
					"type": "void()",
					"name": "acquire",
					"comment": " Acquires the ownership of an unowned object.\n"
				},
				{
					"kind": "function",
					"line": 142,
					"protection": "public",
					"type": "bool()",
					"name": "isOwner",
					"comment": " Returns true if the calling fiber owns this object\n"
				}
			],
			"name": "EventedObject",
			"comment": "\n\tBase interface for all evented objects.\n\n\tEvented objects are owned by the fiber/task that created them and may only be used inside this\n\tspecific fiber. By using release(), a fiber can drop the ownership of an object so that\n\tanother fiber can gain ownership using acquire(). This way it becomes possible to share\n\tconnections and files across fibers.\n"
		},
		{
			"kind": "interface",
			"line": 149,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 151,
					"protection": "public",
					"type": "@property bool()",
					"name": "pending",
					"comment": " True if the timer is yet to fire.\n"
				},
				{
					"kind": "function",
					"line": 155,
					"protection": "public",
					"type": "void(Duration dur, bool periodic = false)",
					"name": "rearm",
					"comment": " Resets the timer to the specified timeout\n\t\n"
				},
				{
					"kind": "function",
					"line": 159,
					"protection": "public",
					"type": "void()",
					"name": "stop",
					"comment": " Resets the timer and avoids any firing.\n\t\n"
				},
				{
					"kind": "function",
					"line": 163,
					"protection": "public",
					"type": "void()",
					"name": "wait",
					"comment": " Waits until the timer fires.\n\t\n"
				}
			],
			"interfaces": [
				"EventedObject"
			],
			"name": "Timer",
			"comment": "\n\tRepresents a timer.\n"
		}
	],
	"name": "vibe.core.driver",
	"comment": "\n\tContains interfaces and enums for evented I/O drivers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\rest.d",
	"members": [
		{
			"kind": "template",
			"line": 127,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 127,
					"type": "void(UrlRouter router, T instance, string url_prefix = \"/\", MethodStyle style = MethodStyle.LowerUnderscored)",
					"name": "registerRestInterface",
					"comment": "\n\tGenerates registers a REST interface and connects it the the given instance.\n\n\tEach method is mapped to the corresponing HTTP verb. Property methods are mapped to GET/PUT and\n\tall other methods are mapped according to their prefix verb. If the method has no known prefix,\n\tPOST is used. The following table lists the mappings from prefix verb to HTTP verb:\n\n\t<table>\n\t\t<tr><th>Prefix</th><th>HTTP verb</th></tr>\n\t\t<tr><td>get</td><td>GET</td></tr>\n\t\t<tr><td>query</td><td>GET</td></tr>\n\t\t<tr><td>set</td><td>PUT</td></tr>\n\t\t<tr><td>put</td><td>PUT</td></tr>\n\t\t<tr><td>update</td><td>PATCH</td></tr>\n\t\t<tr><td>patch</td><td>PATCH</td></tr>\n\t\t<tr><td>add</td><td>POST</td></tr>\n\t\t<tr><td>create</td><td>POST</td></tr>\n\t\t<tr><td>post</td><td>POST</td></tr>\n\t</table>\n\n\tA method named 'index' is mapped to the root URL (e.g. GET /api/). If a method has its first\n\tparameter named 'id', it will be mapped to ':id/method' and 'id' is expected to be part of the\n\tURL instead of a JSON request.\n\n\tAny interface that you return from a getter will be made available with the base url and its name appended.\n\n\tExamples:\n\n\t\tThe following example makes MyApi available using HTTP requests. Valid requests are:\n\n\t\t<ul>\n\t\t  $(LI GET /api/status &rarr; \"OK\")\n\t\t  $(LI GET /api/greeting &rarr; \"&lt;current greeting&gt;\")\n\t\t  $(LI PUT /api/greeting &larr; {\"text\": \"&lt;new text&gt;\"})\n\t\t  $(LI POST /api/new_user &larr; {\"name\": \"&lt;new user name&gt;\"})\n\t\t  $(LI GET /api/users &rarr; [\"&lt;user 1&gt;\", \"&lt;user 2&gt;\"])\n\t\t  $(LI GET /api/ &rarr; [\"&lt;user 1&gt;\", \"&lt;user 2&gt;\"])\n\t\t  $(LI GET /api/:id/name &rarr; [\"&lt;user name for id&gt;\"])\n\t\t  $(LI GET /api/items/text &rarr; \"Hello, World\")\n\t\t  $(LI GET /api/items/:id/index &rarr; &lt;item index&gt;)\n\t\t</ul>\n\t\t---\n\t\timport vibe.d;\n\n\t\tinterface IMyItemsApi {\n\t\t\tstring getText();\n\t\t\tint getIndex(int id);\n\t\t}\n\n\t\tinterface IMyApi {\n\t\t\tstring getStatus();\n\n\t\t\t@property string greeting();\n\t\t\t@property void greeting(string text);\n\n\t\t\tvoid addNewUser(string name);\n\t\t\t@property string[] users();\n\t\t\tstring[] index();\n\t\t\tstring getName(int id);\n\n\t\t\t@property IMyItemsApi items();\n\t\t}\n\n\t\tclass MyItemsApiImpl : IMyItemsApi {\n\t\t\tstring getText() { return \"Hello, World\"; }\n\t\t\tint getIndex(int id) { return id; }\n\t\t}\n\n\t\tclass MyApiImpl : IMyApi {\n\t\t\tprivate string m_greeting;\n\t\t\tprivate string[] m_users;\n\t\t\tprivate MyItemsApiImpl m_items;\n\n\t\t\tthis() { m_items = new MyItemsApiImpl; }\n\n\t\t\tstring getStatus() { return \"OK\"; }\n\n\t\t\t@property string greeting() { return m_greeting; }\n\t\t\t@property void greeting(string text) { m_greeting = text; }\n\n\t\t\tvoid addNewUser(string name) { m_users ~= name; }\n\t\t\t@property string[] users() { return m_users; }\n\t\t\tstring[] index() { return m_users; }\n\t\t\tstring getName(int id) { return m_users[id]; }\n\n\t\t\t@property MyItemsApiImpl items() { return m_items; }\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto routes = new UrlRouter;\n\n\t\t\tregisterRestInterface(routes, new MyApiImpl, \"/api/\");\n\n\t\t\tlistenHttp(new HttpServerSettings, routes);\n\t\t}\n\t\t---\n\n\tSee_Also:\n\n\t\tRestInterfaceClient class for a seamless way to acces such a generated API\n"
				}
			],
			"name": "registerRestInterface(T)",
			"comment": "\n\tGenerates registers a REST interface and connects it the the given instance.\n\n\tEach method is mapped to the corresponing HTTP verb. Property methods are mapped to GET/PUT and\n\tall other methods are mapped according to their prefix verb. If the method has no known prefix,\n\tPOST is used. The following table lists the mappings from prefix verb to HTTP verb:\n\n\t<table>\n\t\t<tr><th>Prefix</th><th>HTTP verb</th></tr>\n\t\t<tr><td>get</td><td>GET</td></tr>\n\t\t<tr><td>query</td><td>GET</td></tr>\n\t\t<tr><td>set</td><td>PUT</td></tr>\n\t\t<tr><td>put</td><td>PUT</td></tr>\n\t\t<tr><td>update</td><td>PATCH</td></tr>\n\t\t<tr><td>patch</td><td>PATCH</td></tr>\n\t\t<tr><td>add</td><td>POST</td></tr>\n\t\t<tr><td>create</td><td>POST</td></tr>\n\t\t<tr><td>post</td><td>POST</td></tr>\n\t</table>\n\n\tA method named 'index' is mapped to the root URL (e.g. GET /api/). If a method has its first\n\tparameter named 'id', it will be mapped to ':id/method' and 'id' is expected to be part of the\n\tURL instead of a JSON request.\n\n\tAny interface that you return from a getter will be made available with the base url and its name appended.\n\n\tExamples:\n\n\t\tThe following example makes MyApi available using HTTP requests. Valid requests are:\n\n\t\t<ul>\n\t\t  $(LI GET /api/status &rarr; \"OK\")\n\t\t  $(LI GET /api/greeting &rarr; \"&lt;current greeting&gt;\")\n\t\t  $(LI PUT /api/greeting &larr; {\"text\": \"&lt;new text&gt;\"})\n\t\t  $(LI POST /api/new_user &larr; {\"name\": \"&lt;new user name&gt;\"})\n\t\t  $(LI GET /api/users &rarr; [\"&lt;user 1&gt;\", \"&lt;user 2&gt;\"])\n\t\t  $(LI GET /api/ &rarr; [\"&lt;user 1&gt;\", \"&lt;user 2&gt;\"])\n\t\t  $(LI GET /api/:id/name &rarr; [\"&lt;user name for id&gt;\"])\n\t\t  $(LI GET /api/items/text &rarr; \"Hello, World\")\n\t\t  $(LI GET /api/items/:id/index &rarr; &lt;item index&gt;)\n\t\t</ul>\n\t\t---\n\t\timport vibe.d;\n\n\t\tinterface IMyItemsApi {\n\t\t\tstring getText();\n\t\t\tint getIndex(int id);\n\t\t}\n\n\t\tinterface IMyApi {\n\t\t\tstring getStatus();\n\n\t\t\t@property string greeting();\n\t\t\t@property void greeting(string text);\n\n\t\t\tvoid addNewUser(string name);\n\t\t\t@property string[] users();\n\t\t\tstring[] index();\n\t\t\tstring getName(int id);\n\n\t\t\t@property IMyItemsApi items();\n\t\t}\n\n\t\tclass MyItemsApiImpl : IMyItemsApi {\n\t\t\tstring getText() { return \"Hello, World\"; }\n\t\t\tint getIndex(int id) { return id; }\n\t\t}\n\n\t\tclass MyApiImpl : IMyApi {\n\t\t\tprivate string m_greeting;\n\t\t\tprivate string[] m_users;\n\t\t\tprivate MyItemsApiImpl m_items;\n\n\t\t\tthis() { m_items = new MyItemsApiImpl; }\n\n\t\t\tstring getStatus() { return \"OK\"; }\n\n\t\t\t@property string greeting() { return m_greeting; }\n\t\t\t@property void greeting(string text) { m_greeting = text; }\n\n\t\t\tvoid addNewUser(string name) { m_users ~= name; }\n\t\t\t@property string[] users() { return m_users; }\n\t\t\tstring[] index() { return m_users; }\n\t\t\tstring getName(int id) { return m_users[id]; }\n\n\t\t\t@property MyItemsApiImpl items() { return m_items; }\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto routes = new UrlRouter;\n\n\t\t\tregisterRestInterface(routes, new MyApiImpl, \"/api/\");\n\n\t\t\tlistenHttp(new HttpServerSettings, routes);\n\t\t}\n\t\t---\n\n\tSee_Also:\n\n\t\tRestInterfaceClient class for a seamless way to acces such a generated API\n"
		},
		{
			"kind": "class",
			"line": 203,
			"protection": "public",
			"members": [
				{
					"kind": "class",
					"line": 203,
					"protection": "public",
					"members": [
						{
							"kind": "alias",
							"line": 209,
							"type": "void delegate(HttpClientRequest req)",
							"name": "RequestFilter"
						},
						{
							"kind": "variable",
							"line": 211,
							"type": "Url",
							"name": "m_baseUrl"
						},
						{
							"kind": "variable",
							"line": 212,
							"type": "MethodStyle",
							"name": "m_methodStyle"
						},
						{
							"kind": "variable",
							"line": 213,
							"type": "RequestFilter",
							"name": "m_requestFilter"
						},
						{
							"kind": "alias",
							"line": 216,
							"type": "I",
							"name": "BaseInterface"
						},
						{
							"kind": "constructor",
							"line": 220,
							"type": "(string base_url, MethodStyle style = MethodStyle.LowerUnderscored)",
							"name": "this",
							"comment": " Creates a new REST implementation of I\n\t\n"
						},
						{
							"kind": "constructor",
							"line": 227,
							"type": "(Url base_url, MethodStyle style = MethodStyle.LowerUnderscored)",
							"name": "this",
							"comment": " ditto\n"
						},
						{
							"kind": "function",
							"line": 236,
							"type": "RequestFilter()",
							"name": "requestFilter",
							"comment": " An optional request filter that allows to modify each request before it is made.\n\t\n"
						},
						{
							"kind": "function",
							"line": 238,
							"type": "void(RequestFilter v)",
							"name": "requestFilter",
							"comment": " ditto\n"
						},
						{
							"kind": "function",
							"line": 270,
							"type": "const Json(string verb, string name, Json params, bool[string] param_is_json)",
							"name": "request"
						}
					],
					"name": "RestInterfaceClient"
				}
			],
			"name": "RestInterfaceClient(I)",
			"comment": "\n\tImplements the given interface by forwarding all public methods to a REST server.\n\n\tThe server must talk the same protocol as registerRestInterface() generates. Be sure to set\n\tthe matching method style for this. The RestInterfaceClient class will derive from the\n\tinterface that is passed as a template argument. It can be used as a drop-in replacement\n\tof the real implementation of the API this way.\n\n\tExamples:\n\n\t\tAn example client that accesses the API defined in the registerRestInterface() example:\n\n\t\t---\n\t\timport vibe.d;\n\n\t\tinterface IMyApi {\n\t\t\tstring getStatus();\n\n\t\t\t@property string greeting();\n\t\t\t@property void greeting(string text);\n\n\t\t\tvoid addNewUser(string name);\n\t\t\t@property string[] users();\n\t\t\tstring[] index();\n\t\t\tstring getName(int id);\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto api = new RestInterfaceClient!IMyApi(\"http://127.0.0.1/api/\");\n\n\t\t\tlogInfo(\"Status: %s\", api.getStatus());\n\t\t\tapi.greeting = \"Hello, World!\";\n\t\t\tlogInfo(\"Greeting message: %s\", api.greeting);\n\t\t\tapi.addNewUser(\"Peter\");\n\t\t\tapi.addNewUser(\"Igor\");\n\t\t\tlogInfo(\"Users: %s\", api.users);\n\t\t}\n\t\t---\n"
		},
		{
			"kind": "function",
			"line": 315,
			"protection": "public",
			"type": "string(string name, MethodStyle style)",
			"name": "adjustMethodStyle",
			"comment": "\n\tAdjusts the naming convention for a given function name to the specified style.\n\n\tThe function name must be in lowerCamelCase (D-style) for the adjustment to work correctly.\n"
		},
		{
			"kind": "enum",
			"line": 346,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 347,
					"protection": "public",
					"name": "Unaltered",
					"comment": " Special value for free-style conventions\n"
				},
				{
					"kind": "enum member",
					"line": 348,
					"protection": "public",
					"name": "CamelCase",
					"comment": " camelCaseNaming\n"
				},
				{
					"kind": "enum member",
					"line": 349,
					"protection": "public",
					"name": "PascalCase",
					"comment": " PascalCaseNaming\n"
				},
				{
					"kind": "enum member",
					"line": 350,
					"protection": "public",
					"name": "LowerCase",
					"comment": " lowercasenaming\n"
				},
				{
					"kind": "enum member",
					"line": 351,
					"protection": "public",
					"name": "UpperCase",
					"comment": " UPPERCASENAMING\n"
				},
				{
					"kind": "enum member",
					"line": 352,
					"protection": "public",
					"name": "LowerUnderscored",
					"comment": " lower_case_naming\n"
				},
				{
					"kind": "enum member",
					"line": 353,
					"protection": "public",
					"name": "UpperUnderscored",
					"comment": " UPPER_CASE_NAMING\n"
				}
			],
			"name": "MethodStyle",
			"comment": "\n\tDetermines the naming convention of an identifier.\n"
		}
	],
	"name": "vibe.http.rest",
	"comment": "\n\tAutomatic REST interface and client code generation facilities.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\mail\\smtp.d",
	"members": [
		{
			"kind": "enum",
			"line": 24,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 25,
					"protection": "public",
					"name": "Plain"
				},
				{
					"kind": "enum member",
					"line": 26,
					"protection": "public",
					"name": "SSL"
				},
				{
					"kind": "enum member",
					"line": 27,
					"protection": "public",
					"name": "StartTLS"
				}
			],
			"name": "SmtpConnectionType",
			"comment": "\n\tDetermines the (encryption) type of an SMTP connection.\n"
		},
		{
			"kind": "enum",
			"line": 33,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 34,
					"protection": "public",
					"name": "_Success"
				},
				{
					"kind": "enum member",
					"line": 35,
					"protection": "public",
					"name": "SystemStatus"
				},
				{
					"kind": "enum member",
					"line": 36,
					"protection": "public",
					"name": "HelpMessage"
				},
				{
					"kind": "enum member",
					"line": 37,
					"protection": "public",
					"name": "ServiceReady"
				},
				{
					"kind": "enum member",
					"line": 38,
					"protection": "public",
					"name": "ServiceClosing"
				},
				{
					"kind": "enum member",
					"line": 39,
					"protection": "public",
					"name": "Success"
				},
				{
					"kind": "enum member",
					"line": 40,
					"protection": "public",
					"name": "Forwarding"
				},
				{
					"kind": "enum member",
					"line": 41,
					"protection": "public",
					"name": "ServerAuthReady"
				},
				{
					"kind": "enum member",
					"line": 42,
					"protection": "public",
					"name": "StartMailInput"
				},
				{
					"kind": "enum member",
					"line": 43,
					"protection": "public",
					"name": "ServiceUnavailable"
				},
				{
					"kind": "enum member",
					"line": 44,
					"protection": "public",
					"name": "MailboxTemporarilyUnavailable"
				},
				{
					"kind": "enum member",
					"line": 45,
					"protection": "public",
					"name": "ProcessingError"
				},
				{
					"kind": "enum member",
					"line": 46,
					"protection": "public",
					"name": "OutOfDiskSpace"
				},
				{
					"kind": "enum member",
					"line": 47,
					"protection": "public",
					"name": "CommandUnrecognized"
				},
				{
					"kind": "enum member",
					"line": 48,
					"protection": "public",
					"name": "InvalidParameters"
				},
				{
					"kind": "enum member",
					"line": 49,
					"protection": "public",
					"name": "CommandNotImplemented"
				},
				{
					"kind": "enum member",
					"line": 50,
					"protection": "public",
					"name": "BadCommandSequence"
				},
				{
					"kind": "enum member",
					"line": 51,
					"protection": "public",
					"name": "CommandParameterNotImplemented"
				},
				{
					"kind": "enum member",
					"line": 52,
					"protection": "public",
					"name": "DomainAcceptsNoMail"
				},
				{
					"kind": "enum member",
					"line": 53,
					"protection": "public",
					"name": "AccessDenied"
				},
				{
					"kind": "enum member",
					"line": 54,
					"protection": "public",
					"name": "MailboxUnavailable"
				},
				{
					"kind": "enum member",
					"line": 55,
					"protection": "public",
					"name": "UserNotLocal"
				},
				{
					"kind": "enum member",
					"line": 56,
					"protection": "public",
					"name": "ExceededStorageAllocation"
				},
				{
					"kind": "enum member",
					"line": 57,
					"protection": "public",
					"name": "MailboxNameNotAllowed"
				},
				{
					"kind": "enum member",
					"line": 58,
					"protection": "public",
					"name": "TransactionFailed"
				}
			],
			"name": "SmtpStatus",
			"comment": " Represents the different status codes for SMTP replies.\n"
		},
		{
			"kind": "enum",
			"line": 64,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 65,
					"protection": "public",
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 66,
					"protection": "public",
					"name": "Plain"
				},
				{
					"kind": "enum member",
					"line": 67,
					"protection": "public",
					"name": "Login"
				},
				{
					"kind": "enum member",
					"line": 68,
					"protection": "public",
					"name": "CramMd5"
				}
			],
			"name": "SmtpAuthType",
			"comment": "\n\tRepresents the authentication mechanism used by the SMTP client.\n"
		},
		{
			"kind": "class",
			"line": 74,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 75,
					"protection": "public",
					"type": "string",
					"name": "host"
				},
				{
					"kind": "variable",
					"line": 76,
					"protection": "public",
					"type": "ushort",
					"name": "port"
				},
				{
					"kind": "variable",
					"line": 77,
					"protection": "public",
					"type": "string",
					"name": "localname"
				},
				{
					"kind": "variable",
					"line": 78,
					"protection": "public",
					"type": "SmtpConnectionType",
					"name": "connectionType"
				},
				{
					"kind": "variable",
					"line": 79,
					"protection": "public",
					"type": "SmtpAuthType",
					"name": "authType"
				},
				{
					"kind": "variable",
					"line": 80,
					"protection": "public",
					"type": "string",
					"name": "username"
				},
				{
					"kind": "variable",
					"line": 81,
					"protection": "public",
					"type": "string",
					"name": "password"
				},
				{
					"kind": "constructor",
					"line": 83,
					"protection": "public",
					"type": "SmtpClientSettings()",
					"name": "this"
				},
				{
					"kind": "constructor",
					"line": 84,
					"protection": "public",
					"type": "SmtpClientSettings(string host, ushort port)",
					"name": "this"
				}
			],
			"name": "SmtpClientSettings",
			"comment": "\n\tConfiguration options for the SMTP client.\n"
		},
		{
			"kind": "class",
			"line": 90,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 91,
					"protection": "public",
					"type": "StrMapCI",
					"name": "headers"
				},
				{
					"kind": "variable",
					"line": 92,
					"protection": "public",
					"type": "string",
					"name": "bodyText"
				}
			],
			"name": "Mail",
			"comment": "\n\tRepresents an email message, including its headers.\n"
		},
		{
			"kind": "function",
			"line": 98,
			"protection": "public",
			"type": "void(SmtpClientSettings settings, Mail mail)",
			"name": "sendMail",
			"comment": "\n\tSends am email using the given settings.\n"
		}
	],
	"name": "vibe.mail.smtp",
	"comment": "\n\tSMTP client implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\router.d",
	"members": [
		{
			"kind": "class",
			"line": 67,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "function",
					"line": 73,
					"protection": "public",
					"type": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
					"name": "get",
					"comment": " Adds a new route for GET requests matching the specified pattern.\n"
				},
				{
					"kind": "function",
					"line": 75,
					"protection": "public",
					"type": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "get",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 77,
					"protection": "public",
					"type": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "get",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 80,
					"protection": "public",
					"type": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
					"name": "post",
					"comment": " Adds a new route for POST requests matching the specified pattern.\n"
				},
				{
					"kind": "function",
					"line": 82,
					"protection": "public",
					"type": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "post",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 84,
					"protection": "public",
					"type": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "post",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 87,
					"protection": "public",
					"type": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
					"name": "put",
					"comment": " Adds a new route for PUT requests matching the specified pattern.\n"
				},
				{
					"kind": "function",
					"line": 89,
					"protection": "public",
					"type": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "put",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 91,
					"protection": "public",
					"type": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "put",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 94,
					"protection": "public",
					"type": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
					"name": "delete_",
					"comment": " Adds a new route for DELETE requests matching the specified pattern.\n"
				},
				{
					"kind": "function",
					"line": 96,
					"protection": "public",
					"type": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "delete_",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 98,
					"protection": "public",
					"type": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "delete_",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 101,
					"protection": "public",
					"type": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
					"name": "patch",
					"comment": " Adds a new route for PATCH requests matching the specified pattern.\n"
				},
				{
					"kind": "function",
					"line": 103,
					"protection": "public",
					"type": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "patch",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 105,
					"protection": "public",
					"type": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "patch",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 108,
					"protection": "public",
					"type": "UrlRouter(string url_match, IHttpServerRequestHandler cb)",
					"name": "any",
					"comment": " Adds a new route for requests matching the specified pattern.\n"
				},
				{
					"kind": "function",
					"line": 110,
					"protection": "public",
					"type": "UrlRouter(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "any",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 112,
					"protection": "public",
					"type": "UrlRouter(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "any",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 123,
					"protection": "public",
					"type": "void(HttpMethod method, string path, IHttpServerRequestHandler cb)",
					"name": "match",
					"comment": " Adds a new route for requests matching the specified HTTP method and pattern.\n"
				},
				{
					"kind": "function",
					"line": 125,
					"protection": "public",
					"type": "void(HttpMethod method, string path, void function(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "match",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 127,
					"protection": "public",
					"type": "void(HttpMethod method, string path, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
					"name": "match",
					"comment": " ditto\n"
				},
				{
					"kind": "alias",
					"line": 130,
					"protection": "public",
					"name": "addRoute",
					"comment": " Alias for backwards compatibility\n"
				},
				{
					"kind": "function",
					"line": 133,
					"protection": "public",
					"type": "void(HttpServerRequest req, HttpServerResponse res)",
					"name": "handleRequest",
					"comment": " Handles a HTTP request by dispatching it to the registered route handlers.\n"
				}
			],
			"interfaces": [
				"IHttpServerRequestHandler"
			],
			"name": "UrlRouter",
			"comment": "\n\tRoutes HTTP requests based on the request method and URL.\n\n\tRoutes are matched using a special URL match string that supports two forms of placeholders.\n\tThe following example shows how these are used.\n\n\tRegistered routes are matched in the same sequence as initially specified.\n\tMatching ends as soon as a route handler writes a response using res.writeBody()\n\tor similar means. If no route matches or if no route handler writes a response,\n\tthe router will simply not handle the request and the HTTP server may generate\n\ta 404 error.\n\n\t---\n\tvoid addGroup(HttpServerRequest req, HttpServerResponse res)\n\t{\n\t\t// Route variables are accessible via the params map\n\t\tlogInfo(\"Getting group %s for user %s.\", req.params[\"groupname\"], req.params[\"username\"]);\n\t}\n\n\tstatic this()\n\t{\n\t\tauto router = new UrlRouter;\n\t\t// Matches all GET requests for /users/*/groups/* and places\n\t\t// the place holders in req.params as 'username' and 'groupname'.\n\t\trouter.get(\"/users/:username/groups/:groupname\", &addGroup);\n\n\t\t// Natches all requests. This can be useful for authorization and\n\t\t// similar tasks. The auth method will only write a response if the\n\t\t// user is _not_ authorized. Otherwise, the router will fall through\n\t\t// and continue with the following routes.\n\t\trouter.any(\"*\", &auth)\n\n\t\t// Matches a POST request\n\t\trouter.post(\"/users/:username/delete\", &deleteUser)\n\n\t\t// Matches all GET requests in /static/ such as /static/img.png or\n\t\t// /static/styles/sty.css\n\t\trouter.get(\"/static/*\", &serveStaticFiles)\n\n\t\t// Setup a HTTP server...\n\t\tauto settings = new HttpServerSettings;\n\t\t// ...\n\n\t\t// The router can be directly passed to the listenHttp function as\n\t\t// the main request handler.\n\t\tlistenHttp(settings, router);\n\t}\n\t---\n"
		}
	],
	"name": "vibe.http.router",
	"comment": "\n\tPattern based URL router.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\crypto\\md5.d",
	"members": [
		{
			"kind": "function",
			"line": 12,
			"protection": "public",
			"type": "string(const(char[]) str)",
			"name": "md5"
		}
	],
	"name": "vibe.crypto.md5",
	"comment": "\n\tMD5 hashing functions.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\mongo.d",
	"members": [
		{
			"kind": "function",
			"line": 48,
			"protection": "public",
			"type": "MongoDB(string host, ushort port)",
			"name": "connectMongoDB",
			"comment": "\n\tConnects to a MongoDB instance.\n\n\tIf the host/port form is used, default settings will be used, which enable\n\tsafe updates, but no fsync. By specifying a URL instead, it is possible to\n\tfully customize the settings. See\n\t$(LINK http://www.mongodb.org/display/DOCS/Connections) for the complete set\n\tof options.\n\n\tExamples:\n\t\t---\n\t\t// connecting with default settings:\n\t\tauto db = connectMongoDB(\"127.0.0.1\");\n\t\tauto users = db[\"users\"];\n\t\tusers.insert(Bson(\"peter\"));\n\t\t---\n\n\t\t---\n\t\t// connectiong using the URL form with custom settings\n\t\tauto db = connectMongoDB(\"mongodb://localhost/?slaveOk=true\");\n\t\t---\n\n\tParams:\n\t\thost = Specifies the host name or IP address of the MongoDB server.\n\t\tport = Can be used to specify the port of the MongoDB server if different from the default one.\n\t\thost_or_url = Can either be a host name, in which case the default port will be used, or a URL with the mongodb:// scheme.\n\n\tReturns:\n\t\tA new MongoDB instance that can be used to access the database.\n\n \tThrows:\n \t\tThrows an exception if a mongodb:// URL is given and the URL cannot be parsed.\n \t\tAn exception will not be thrown if called with a hostname and port.\n"
		},
		{
			"kind": "function",
			"line": 54,
			"protection": "public",
			"type": "MongoDB(string host_or_url)",
			"name": "connectMongoDB",
			"comment": " ditto\n"
		}
	],
	"name": "vibe.db.mongo.mongo",
	"comment": "\n\tMongoDB and MongoCollection classes and connections.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\textfilter\\html.d",
	"members": [
		{
			"kind": "function",
			"line": 17,
			"protection": "public",
			"type": "string(string str)",
			"name": "htmlEscape",
			"comment": " Returns the HTML escaped version of a given string.\n"
		},
		{
			"kind": "template",
			"line": 33,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 33,
					"type": "void(ref R dst, string str)",
					"name": "filterHtmlEscape",
					"comment": " Writes the HTML escaped version of a given string to an output range.\n"
				}
			],
			"name": "filterHtmlEscape(R)",
			"comment": " Writes the HTML escaped version of a given string to an output range.\n"
		},
		{
			"kind": "function",
			"line": 41,
			"protection": "public",
			"type": "string(string str)",
			"name": "htmlAttribEscape",
			"comment": " Returns the HTML escaped version of a given string (also escapes double quotes).\n"
		},
		{
			"kind": "template",
			"line": 56,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 56,
					"type": "void(ref R dst, string str)",
					"name": "filterHtmlAttribEscape",
					"comment": " Writes the HTML escaped version of a given string to an output range (also escapes double quotes).\n"
				}
			],
			"name": "filterHtmlAttribEscape(R)",
			"comment": " Writes the HTML escaped version of a given string to an output range (also escapes double quotes).\n"
		},
		{
			"kind": "template",
			"line": 64,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 64,
					"type": "string(string str)",
					"name": "htmlAllEscape",
					"comment": " Returns the HTML escaped version of a given string (escapes every character).\n"
				}
			],
			"name": "htmlAllEscape()",
			"comment": " Returns the HTML escaped version of a given string (escapes every character).\n"
		},
		{
			"kind": "template",
			"line": 79,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 79,
					"type": "void(ref R dst, string str)",
					"name": "filterHtmlAllEscape",
					"comment": " Writes the HTML escaped version of a given string to an output range (escapes every character).\n"
				}
			],
			"name": "filterHtmlAllEscape(R)",
			"comment": " Writes the HTML escaped version of a given string to an output range (escapes every character).\n"
		},
		{
			"kind": "function",
			"line": 92,
			"protection": "public",
			"type": "string(string str)",
			"name": "htmlEscapeMin",
			"comment": "\n\tMinimally escapes a text so that no HTML tags appear in it.\n"
		},
		{
			"kind": "template",
			"line": 104,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 104,
					"type": "void(ref R dst, dchar ch, HtmlEscapeFlags flags = HtmlEscapeFlags.escapeNewline)",
					"name": "filterHtmlEscape",
					"comment": "\n\tWrites the HTML escaped version of a character to an output range.\n"
				}
			],
			"name": "filterHtmlEscape(R)",
			"comment": "\n\tWrites the HTML escaped version of a character to an output range.\n"
		},
		{
			"kind": "enum",
			"line": 140,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 141,
					"protection": "public",
					"name": "escapeMinimal"
				},
				{
					"kind": "enum member",
					"line": 142,
					"protection": "public",
					"name": "escapeQuotes"
				},
				{
					"kind": "enum member",
					"line": 143,
					"protection": "public",
					"name": "escapeNewline"
				},
				{
					"kind": "enum member",
					"line": 144,
					"protection": "public",
					"name": "escapeUnknown"
				}
			],
			"name": "HtmlEscapeFlags"
		}
	],
	"name": "vibe.textfilter.html",
	"comment": "\n\tHTML character entity escaping.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\status.d",
	"members": [
		{
			"kind": "enum",
			"line": 13,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 14,
					"protection": "public",
					"name": "Continue"
				},
				{
					"kind": "enum member",
					"line": 15,
					"protection": "public",
					"name": "SwitchingProtocols"
				},
				{
					"kind": "enum member",
					"line": 16,
					"protection": "public",
					"name": "OK"
				},
				{
					"kind": "enum member",
					"line": 17,
					"protection": "public",
					"name": "Created"
				},
				{
					"kind": "enum member",
					"line": 18,
					"protection": "public",
					"name": "Accepted"
				},
				{
					"kind": "enum member",
					"line": 19,
					"protection": "public",
					"name": "NonAuthoritativeInformation"
				},
				{
					"kind": "enum member",
					"line": 20,
					"protection": "public",
					"name": "NoContent"
				},
				{
					"kind": "enum member",
					"line": 21,
					"protection": "public",
					"name": "ResetContent"
				},
				{
					"kind": "enum member",
					"line": 22,
					"protection": "public",
					"name": "PartialContent"
				},
				{
					"kind": "enum member",
					"line": 23,
					"protection": "public",
					"name": "MultipleChoices"
				},
				{
					"kind": "enum member",
					"line": 24,
					"protection": "public",
					"name": "MovedPermanently"
				},
				{
					"kind": "enum member",
					"line": 25,
					"protection": "public",
					"name": "Found"
				},
				{
					"kind": "enum member",
					"line": 26,
					"protection": "public",
					"name": "SeeOther"
				},
				{
					"kind": "enum member",
					"line": 27,
					"protection": "public",
					"name": "NotModified"
				},
				{
					"kind": "enum member",
					"line": 28,
					"protection": "public",
					"name": "UseProxy"
				},
				{
					"kind": "enum member",
					"line": 29,
					"protection": "public",
					"name": "TemporaryRedirect"
				},
				{
					"kind": "enum member",
					"line": 30,
					"protection": "public",
					"name": "BadRequest"
				},
				{
					"kind": "enum member",
					"line": 31,
					"protection": "public",
					"name": "Unauthorized"
				},
				{
					"kind": "enum member",
					"line": 32,
					"protection": "public",
					"name": "PaymentRequired"
				},
				{
					"kind": "enum member",
					"line": 33,
					"protection": "public",
					"name": "Forbidden"
				},
				{
					"kind": "enum member",
					"line": 34,
					"protection": "public",
					"name": "NotFound"
				},
				{
					"kind": "enum member",
					"line": 35,
					"protection": "public",
					"name": "MethodNotAllowed"
				},
				{
					"kind": "enum member",
					"line": 36,
					"protection": "public",
					"name": "NotAcceptable"
				},
				{
					"kind": "enum member",
					"line": 37,
					"protection": "public",
					"name": "ProxyAuthenticationRequired"
				},
				{
					"kind": "enum member",
					"line": 38,
					"protection": "public",
					"name": "RequestTimeout"
				},
				{
					"kind": "enum member",
					"line": 39,
					"protection": "public",
					"name": "Conflict"
				},
				{
					"kind": "enum member",
					"line": 40,
					"protection": "public",
					"name": "Gone"
				},
				{
					"kind": "enum member",
					"line": 41,
					"protection": "public",
					"name": "LengthRequired"
				},
				{
					"kind": "enum member",
					"line": 42,
					"protection": "public",
					"name": "PreconditionFailed"
				},
				{
					"kind": "enum member",
					"line": 43,
					"protection": "public",
					"name": "RequestEntityTooLarge"
				},
				{
					"kind": "enum member",
					"line": 44,
					"protection": "public",
					"name": "RequestURITooLarge"
				},
				{
					"kind": "enum member",
					"line": 45,
					"protection": "public",
					"name": "UnsupportedMediaType"
				},
				{
					"kind": "enum member",
					"line": 46,
					"protection": "public",
					"name": "Requestedrangenotsatisfiable"
				},
				{
					"kind": "enum member",
					"line": 47,
					"protection": "public",
					"name": "ExpectationFailed"
				},
				{
					"kind": "enum member",
					"line": 48,
					"protection": "public",
					"name": "InternalServerError"
				},
				{
					"kind": "enum member",
					"line": 49,
					"protection": "public",
					"name": "NotImplemented"
				},
				{
					"kind": "enum member",
					"line": 50,
					"protection": "public",
					"name": "BadGateway"
				},
				{
					"kind": "enum member",
					"line": 51,
					"protection": "public",
					"name": "ServiceUnavailable"
				},
				{
					"kind": "enum member",
					"line": 52,
					"protection": "public",
					"name": "GatewayTimeout"
				},
				{
					"kind": "enum member",
					"line": 53,
					"protection": "public",
					"name": "HTTPVersionNotSupported"
				}
			],
			"name": "HttpStatus",
			"comment": "\n\tDefinitions of all standard HTTP status codes.\n"
		},
		{
			"kind": "function",
			"line": 59,
			"protection": "public",
			"type": "string(int code)",
			"name": "httpStatusText",
			"comment": "\n\tReturns a standard text description of the specified HTTP status code.\n"
		},
		{
			"kind": "function",
			"line": 117,
			"protection": "public",
			"type": "bool(int status)",
			"name": "justifiesConnectionClose",
			"comment": "\n\tDetermines if the given status code justifies closing the connection (e.g. evil big request bodies)\n"
		}
	],
	"name": "vibe.http.status",
	"comment": "\n\tList of all standard HTTP status codes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\common.d",
	"members": [
		{
			"kind": "enum",
			"line": 28,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 29,
					"protection": "public",
					"name": "HTTP_1_0"
				},
				{
					"kind": "enum member",
					"line": 30,
					"protection": "public",
					"name": "HTTP_1_1"
				}
			],
			"name": "HttpVersion"
		},
		{
			"kind": "enum",
			"line": 33,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 34,
					"protection": "public",
					"name": "GET"
				},
				{
					"kind": "enum member",
					"line": 35,
					"protection": "public",
					"name": "HEAD"
				},
				{
					"kind": "enum member",
					"line": 36,
					"protection": "public",
					"name": "PUT"
				},
				{
					"kind": "enum member",
					"line": 37,
					"protection": "public",
					"name": "POST"
				},
				{
					"kind": "enum member",
					"line": 38,
					"protection": "public",
					"name": "PATCH"
				},
				{
					"kind": "enum member",
					"line": 39,
					"protection": "public",
					"name": "DELETE"
				},
				{
					"kind": "enum member",
					"line": 40,
					"protection": "public",
					"name": "OPTIONS"
				},
				{
					"kind": "enum member",
					"line": 41,
					"protection": "public",
					"name": "TRACE"
				},
				{
					"kind": "enum member",
					"line": 42,
					"protection": "public",
					"name": "CONNECT"
				}
			],
			"name": "HttpMethod"
		},
		{
			"kind": "function",
			"line": 49,
			"protection": "public",
			"type": "string(HttpMethod m)",
			"name": "httpMethodString",
			"comment": "\n\tReturns the string representation of the given HttpMethod.\n"
		},
		{
			"kind": "function",
			"line": 60,
			"protection": "public",
			"type": "HttpMethod(string str)",
			"name": "httpMethodFromString",
			"comment": "\n\tReturns the HttpMethod value matching the given HTTP method string.\n"
		},
		{
			"kind": "class",
			"line": 79,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 86,
					"protection": "public",
					"type": "HttpVersion",
					"name": "httpVersion",
					"comment": " The HTTP protocol version used for the request\n"
				},
				{
					"kind": "variable",
					"line": 89,
					"protection": "public",
					"type": "HttpMethod",
					"name": "method",
					"comment": " The HTTP _method of the request\n"
				},
				{
					"kind": "variable",
					"line": 92,
					"protection": "public",
					"type": "string",
					"name": "url",
					"comment": " The full request URL\n"
				},
				{
					"kind": "variable",
					"line": 95,
					"protection": "public",
					"type": "StrMapCI",
					"name": "headers",
					"comment": " All request _headers\n"
				},
				{
					"kind": "function",
					"line": 109,
					"protection": "public",
					"type": "const @property string()",
					"name": "host",
					"comment": " Shortcut to the 'Host' header (always present for HTTP 1.1)\n\t\n"
				},
				{
					"kind": "function",
					"line": 111,
					"protection": "public",
					"type": "@property void(string v)",
					"name": "host",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 115,
					"protection": "public",
					"type": "const @property bool()",
					"name": "persistent",
					"comment": " Determines if the connection persists across requests.\n\t\n"
				}
			],
			"name": "HttpRequest",
			"comment": "\n\tRepresents an HTTP request made to a server.\n"
		},
		{
			"kind": "class",
			"line": 136,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 139,
					"protection": "public",
					"type": "HttpVersion",
					"name": "httpVersion",
					"comment": " The protocol version of the response - should not be changed\n"
				},
				{
					"kind": "variable",
					"line": 142,
					"protection": "public",
					"type": "int",
					"name": "statusCode",
					"comment": " The status code of the response, 200 by default\n"
				},
				{
					"kind": "variable",
					"line": 148,
					"protection": "public",
					"type": "string",
					"name": "statusPhrase",
					"comment": " The status phrase of the response\n\n\t\t\tIf no phrase is set, a default one corresponding to the status code will be used.\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 151,
					"protection": "public",
					"type": "StrMapCI",
					"name": "headers",
					"comment": " The response header fields\n"
				},
				{
					"kind": "variable",
					"line": 154,
					"protection": "public",
					"type": "Cookie[string]",
					"name": "cookies",
					"comment": " All cookies that shall be set on the client for this request\n"
				},
				{
					"kind": "function",
					"line": 159,
					"protection": "public",
					"type": "const @property string()",
					"name": "contentType",
					"comment": " Shortcut to the \"Content-Type\" header\n\t\n"
				},
				{
					"kind": "function",
					"line": 161,
					"protection": "public",
					"type": "@property void(string ct)",
					"name": "contentType",
					"comment": " ditto\n"
				}
			],
			"name": "HttpResponse",
			"comment": "\n\tRepresents the HTTP response from the server back to the client.\n"
		},
		{
			"kind": "class",
			"line": 165,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 166,
					"protection": "public",
					"type": "string",
					"name": "contentType"
				},
				{
					"kind": "variable",
					"line": 168,
					"protection": "public",
					"type": "vibe.stream.stream.InputStream",
					"name": "stream"
				},
				{
					"kind": "variable",
					"line": 170,
					"protection": "public",
					"type": "string[string]",
					"name": "form"
				}
			],
			"name": "MultiPart"
		},
		{
			"kind": "function",
			"line": 173,
			"protection": "public",
			"type": "string(HttpVersion ver)",
			"name": "getHttpVersionString"
		},
		{
			"kind": "function",
			"line": 181,
			"protection": "public",
			"type": "HttpVersion(ref string str)",
			"name": "parseHttpVersion"
		},
		{
			"kind": "class",
			"line": 197,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 204,
					"protection": "public",
					"type": "ChunkedInputStream(InputStream stream)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 211,
					"protection": "public",
					"type": "const @property bool()",
					"name": "empty"
				},
				{
					"kind": "function",
					"line": 213,
					"protection": "public",
					"type": "const @property ulong()",
					"name": "leastSize"
				},
				{
					"kind": "function",
					"line": 215,
					"protection": "public",
					"type": "@property bool()",
					"name": "dataAvailableForRead"
				},
				{
					"kind": "function",
					"line": 217,
					"protection": "public",
					"type": "const(ubyte)[]()",
					"name": "peek"
				},
				{
					"kind": "function",
					"line": 223,
					"protection": "public",
					"type": "void(ubyte[] dst)",
					"name": "read"
				}
			],
			"interfaces": [
				"InputStream"
			],
			"name": "ChunkedInputStream",
			"comment": "\n\tTakes an input stream that contains data in HTTP chunked format and outputs the raw data.\n"
		},
		{
			"kind": "class",
			"line": 269,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 275,
					"protection": "public",
					"type": "ChunkedOutputStream(OutputStream stream)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 281,
					"protection": "public",
					"type": "void(const(ubyte[]) bytes, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 287,
					"protection": "public",
					"type": "void(InputStream data, ulong nbytes = cast(ulong)0, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 303,
					"protection": "public",
					"type": "void()",
					"name": "flush"
				},
				{
					"kind": "function",
					"line": 315,
					"protection": "public",
					"type": "void()",
					"name": "finalize"
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "ChunkedOutputStream",
			"comment": "\n\tOutputs data to an output stream in HTTP chunked format.\n"
		},
		{
			"kind": "class",
			"line": 325,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "function",
					"line": 336,
					"protection": "public",
					"type": "Cookie(string value)",
					"name": "setValue"
				},
				{
					"kind": "function",
					"line": 337,
					"protection": "public",
					"type": "@property string()",
					"name": "value"
				},
				{
					"kind": "function",
					"line": 339,
					"protection": "public",
					"type": "Cookie(string domain)",
					"name": "setDomain"
				},
				{
					"kind": "function",
					"line": 340,
					"protection": "public",
					"type": "@property string()",
					"name": "domain"
				},
				{
					"kind": "function",
					"line": 342,
					"protection": "public",
					"type": "Cookie(string path)",
					"name": "setPath"
				},
				{
					"kind": "function",
					"line": 343,
					"protection": "public",
					"type": "@property string()",
					"name": "path"
				},
				{
					"kind": "function",
					"line": 345,
					"protection": "public",
					"type": "Cookie(string expires)",
					"name": "setExpire"
				},
				{
					"kind": "function",
					"line": 346,
					"protection": "public",
					"type": "@property string()",
					"name": "expires"
				},
				{
					"kind": "function",
					"line": 348,
					"protection": "public",
					"type": "Cookie(long maxAge)",
					"name": "setMaxAge"
				},
				{
					"kind": "function",
					"line": 349,
					"protection": "public",
					"type": "@property long()",
					"name": "maxAge"
				},
				{
					"kind": "function",
					"line": 351,
					"protection": "public",
					"type": "Cookie(bool enabled)",
					"name": "setSecure"
				},
				{
					"kind": "function",
					"line": 352,
					"protection": "public",
					"type": "@property bool()",
					"name": "isSecure"
				},
				{
					"kind": "function",
					"line": 354,
					"protection": "public",
					"type": "Cookie(bool enabled)",
					"name": "setHttpOnly"
				},
				{
					"kind": "function",
					"line": 355,
					"protection": "public",
					"type": "@property bool()",
					"name": "isHttpOnly"
				}
			],
			"name": "Cookie"
		},
		{
			"kind": "struct",
			"line": 368,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 377,
					"protection": "public",
					"type": "const @property uint()",
					"name": "length"
				},
				{
					"kind": "function",
					"line": 379,
					"protection": "public",
					"type": "void(string key)",
					"name": "remove"
				},
				{
					"kind": "function",
					"line": 392,
					"protection": "public",
					"type": "string(string key)",
					"name": "opIndex"
				},
				{
					"kind": "function",
					"line": 397,
					"protection": "public",
					"type": "string(string val, string key)",
					"name": "opIndexAssign"
				},
				{
					"kind": "template",
					"line": 405,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 405,
							"type": "inout inout(string)*(string key)",
							"name": "opBinaryRight"
						}
					],
					"name": "opBinaryRight(string op) if (op == \"in\")"
				},
				{
					"kind": "template",
					"line": 414,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 414,
							"type": "inout bool(string key)",
							"name": "opBinaryRight"
						}
					],
					"name": "opBinaryRight(string op) if (op == \"!in\")"
				},
				{
					"kind": "function",
					"line": 418,
					"protection": "public",
					"type": "int(int delegate(ref string key, ref string val) del)",
					"name": "opApply"
				},
				{
					"kind": "function",
					"line": 433,
					"protection": "public",
					"type": "int(int delegate(ref string name) del)",
					"name": "opApply"
				},
				{
					"kind": "function",
					"line": 446,
					"protection": "public",
					"type": "const @property StrMapCI()",
					"name": "dup"
				}
			],
			"name": "StrMapCI",
			"comment": "\n\tBehaves like string[string] but case does not matter for the key.\n\n\tThis kind of map is used for MIME headers (e.g. for HTTP), where the case of the key strings\n\tdoes not matter.\n\n\tNote that despite case not being relevant for matching keyse, iterating over the map will yield\n\tthe original case of the key that was put in.\n"
		}
	],
	"name": "vibe.http.common",
	"comment": "\n\tCommon classes for HTTP clients and servers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\zlib.d",
	"members": [
		{
			"kind": "class",
			"line": 21,
			"protection": "public",
			"base": "ZlibOutputStream",
			"members": [
				{
					"kind": "constructor",
					"line": 22,
					"protection": "public",
					"type": "DeflateOutputStream(OutputStream dst)",
					"name": "this"
				}
			],
			"name": "DeflateOutputStream",
			"comment": "\n\tWrites any data compressed in deflate format to the specified output stream.\n"
		},
		{
			"kind": "class",
			"line": 32,
			"protection": "public",
			"base": "ZlibOutputStream",
			"members": [
				{
					"kind": "constructor",
					"line": 33,
					"protection": "public",
					"type": "GzipOutputStream(OutputStream dst)",
					"name": "this"
				}
			],
			"name": "GzipOutputStream",
			"comment": "\n\tWrites any data compressed in gzip format to the specified output stream.\n"
		},
		{
			"kind": "class",
			"line": 42,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 48,
					"protection": "public",
					"type": "ZlibOutputStream(OutputStream dst, HeaderFormat type)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 54,
					"protection": "public",
					"type": "void(const(ubyte[]) data, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 61,
					"protection": "public",
					"type": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 66,
					"protection": "public",
					"type": "void()",
					"name": "flush"
				},
				{
					"kind": "function",
					"line": 72,
					"protection": "public",
					"type": "void()",
					"name": "finalize"
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "ZlibOutputStream",
			"comment": "\n\tGeneric zlib output stream.\n"
		},
		{
			"kind": "class",
			"line": 86,
			"protection": "public",
			"base": "ZlibInputStream",
			"members": [
				{
					"kind": "constructor",
					"line": 87,
					"protection": "public",
					"type": "DeflateInputStream(InputStream dst)",
					"name": "this"
				}
			],
			"name": "DeflateInputStream",
			"comment": "\n\tTakes an input stream that contains data in deflate compressed format and outputs the\n\tuncompressed data.\n"
		},
		{
			"kind": "class",
			"line": 98,
			"protection": "public",
			"base": "ZlibInputStream",
			"members": [
				{
					"kind": "constructor",
					"line": 99,
					"protection": "public",
					"type": "GzipInputStream(InputStream dst)",
					"name": "this"
				}
			],
			"name": "GzipInputStream",
			"comment": "\n\tTakes an input stream that contains data in gzip compressed format and outputs the\n\tuncompressed data.\n"
		},
		{
			"kind": "class",
			"line": 109,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 117,
					"protection": "public",
					"type": "ZlibInputStream(InputStream src, HeaderFormat type)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 123,
					"protection": "public",
					"type": "@property bool()",
					"name": "empty"
				},
				{
					"kind": "function",
					"line": 129,
					"protection": "public",
					"type": "@property ulong()",
					"name": "leastSize"
				},
				{
					"kind": "function",
					"line": 141,
					"protection": "public",
					"type": "@property bool()",
					"name": "dataAvailableForRead"
				},
				{
					"kind": "function",
					"line": 146,
					"protection": "public",
					"type": "const(ubyte)[]()",
					"name": "peek"
				},
				{
					"kind": "function",
					"line": 151,
					"protection": "public",
					"type": "void(ubyte[] dst)",
					"name": "read"
				}
			],
			"interfaces": [
				"InputStream"
			],
			"name": "ZlibInputStream",
			"comment": "\n\tGeneric zlib input stream.\n"
		}
	],
	"name": "vibe.stream.zlib",
	"comment": "\n\tZlib input/output streams\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\auth\\basic_auth.d",
	"members": [
		{
			"kind": "function",
			"line": 21,
			"protection": "public",
			"type": "void delegate(HttpServerRequest req, HttpServerResponse res)(string realm, bool delegate(string user, string name) pwcheck)",
			"name": "performBasicAuth",
			"comment": "\n\tReturns a request handler that enforces request to be authenticated using HTTP Basic Auth.\n"
		},
		{
			"kind": "function",
			"line": 65,
			"protection": "public",
			"type": "string(HttpServerRequest req, HttpServerResponse res, string realm, bool delegate(string user, string name) pwcheck)",
			"name": "performBasicAuth",
			"comment": "\n\tEnforces HTTP Basic Auth authentication on the given req/res pair.\n\n\tParams:\n\t\treq = Request object that is to be checked\n\t\tres = Response object that will be used for authentication errors\n\t\trealm = HTTP Basic Auth realm reported to the client\n\t\tpwcheck = A delegate queried for validating user/password pairs\n\n\tReturns: Returns the name of the authenticated user.\n\n\tThrows: Throws a HttpStatusExeption in case of an authentication failure.\n"
		},
		{
			"kind": "function",
			"line": 90,
			"protection": "public",
			"type": "void(HttpRequest req, string user, string password)",
			"name": "addBasicAuth",
			"comment": "\n\tAugments the given HTTP request with an HTTP Basic Auth header.\n"
		}
	],
	"name": "vibe.http.auth.basic_auth",
	"comment": "\n\tImplements HTTP Basic Auth.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\stream.d",
	"members": [
		{
			"kind": "function",
			"line": 32,
			"protection": "public",
			"type": "ubyte[](InputStream stream, uint max_bytes = -1u, string linesep = \"\\x0d\\x0a\", Allocator alloc = defaultAllocator())",
			"name": "readLine",
			"comment": "\n\n\n\tReads and returns a single line from the stream.\n\n\tThrows:\n\t\tAn exception if either the stream end was hit without hitting a newline first, or\n\t\tif more than max_bytes have been read from the stream in case of max_bytes != 0.\n"
		},
		{
			"kind": "function",
			"line": 74,
			"protection": "public",
			"type": "ubyte[](InputStream stream, const(ubyte[]) end_marker, uint max_bytes = -1u, Allocator alloc = defaultAllocator())",
			"name": "readUntil",
			"comment": "\n\tReads all data of a stream until the specified end marker is detected.\n\n\tParams:\n\t\tstream = The input stream which is searched for end_marker\n\t\tend_marker = The byte sequence which is searched in the stream\n\t\tmax_bytes = An optional limit of how much data is to be read from the\n\t\t\tinput stream; if the limit is reaached before hitting the end\n\t\t\tmarker, an exception is thrown.\n\t\talloc = An optional allocator that is used to build the result string\n\t\t\tin the string variant of this function\n\t\tdst = The output stream, to which the prefix to the end marker of the\n\t\t\tinput stream is written\n\n\tReturns:\n\t\tThe string variant of this function returns the complete prefix to the\n\t\tend marker of the input stream, excluding the end marker itself.\n\n\tThrows:\n\t\tAn exception if either the stream end was hit without hitting a marker\n\t\tfirst, or if more than max_bytes have been read from the stream in\n\t\tcase of max_bytes != 0.\n\n\tRemarks:\n\t\tThis function uses an algorithm inspired by the\n\t\t$(LINK2 http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm,\n\t\tBoyer-Moore string search algorithm). However, contrary to the original\n\t\talgorithm, it will scan the whole input string exactly once, without\n\t\tjumping over portions of it. This allows the algorithm to work with\n\t\tconstant memory requirements and without the memory copies that would\n\t\tbe necessary for streams that do not hold their complete data in\n\t\tmemory.\n\n\t\tThe current implementation has a run time complexity of O(n*m+m²) and\n\t\tO(n+m) in typical cases, with n being the length of the scanned input\n\t\tstring and m the length of the marker.\n"
		},
		{
			"kind": "function",
			"line": 82,
			"protection": "public",
			"type": "void(InputStream stream, OutputStream dst, const(ubyte[]) end_marker, ulong max_bytes = 18446744073709551615LU)",
			"name": "readUntil",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 214,
			"protection": "public",
			"type": "ubyte[](InputStream stream, uint max_bytes = cast(uint)0)",
			"name": "readAll",
			"comment": "\n\tReads the complete contents of a stream, optionally limited by max_bytes.\n\n\tThrows:\n\t\tAn exception is thrown if max_bytes != 0 and the stream contains more than max_bytes data.\n"
		},
		{
			"kind": "function",
			"line": 246,
			"protection": "public",
			"type": "string(InputStream stream, bool sanitize = false, uint max_bytes = cast(uint)0)",
			"name": "readAllUtf8",
			"comment": "\n\tReads the complete contents of a stream, assuming UTF-8 encoding.\n\n\tParams:\n\t\tstream = Specifies the stream from which to read.\n\t\tsanitize = If true, the input data will not be validated but will instead be made valid UTF-8.\n\t\tmax_bytes = Optional size limit of the data that is read.\n\n\tReturns:\n\t\tThe full contents of the stream, excluding a possible BOM, are returned as a UTF-8 string.\n\n\tThrows:\n\t\tAn exception is thrown if max_bytes != 0 and the stream contains more than max_bytes data.\n\t\tIf the sanitize parameter is fals and the stream contains invalid UTF-8 code sequences,\n\t\ta UtfException is thrown.\n"
		},
		{
			"kind": "interface",
			"line": 267,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 270,
					"protection": "public",
					"type": "@property bool()",
					"name": "empty",
					"comment": " Returns true iff the end of the stream has been reached\n\t\n"
				},
				{
					"kind": "function",
					"line": 276,
					"protection": "public",
					"type": "@property ulong()",
					"name": "leastSize",
					"comment": "\tReturns the maximum number of bytes that are known to remain in this stream until the\n\t\tend is reached. After leastSize() bytes have been read, the stream will either have\n\t\treached EOS and empty() returns true, or leastSize() returns again a number > 0.\n\t\n"
				},
				{
					"kind": "function",
					"line": 280,
					"protection": "public",
					"type": "@property bool()",
					"name": "dataAvailableForRead",
					"comment": " Queries if there is data available for immediate, non-blocking read.\n\t\n"
				},
				{
					"kind": "function",
					"line": 288,
					"protection": "public",
					"type": "const(ubyte)[]()",
					"name": "peek",
					"comment": " Returns a temporary reference to the data that is currently buffered, typically has the size\n\t\tleastSize() or 0 if dataAvailableForRead() returns false.\n\n\t\tNote that any method invocation on the same stream invalidates the contents of the returned\n\t\tbuffer.\n\t\n"
				},
				{
					"kind": "function",
					"line": 294,
					"protection": "public",
					"type": "void(ubyte[] dst)",
					"name": "read",
					"comment": "\tFills the preallocated array 'bytes' with data from the stream.\n\n\t\tThrows: An exception if the operation reads past the end of the stream\n\t\n"
				}
			],
			"name": "InputStream",
			"comment": "\n\n\n\tInterface for all classes implementing readable streams.\n"
		},
		{
			"kind": "interface",
			"line": 300,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 303,
					"protection": "public",
					"type": "void(const(ubyte[]) bytes, bool do_flush = true)",
					"name": "write",
					"comment": " Writes an array of bytes to the stream.\n\t\n"
				},
				{
					"kind": "function",
					"line": 307,
					"protection": "public",
					"type": "void()",
					"name": "flush",
					"comment": " Flushes the stream and makes sure that all data is being written to the output device.\n\t\n"
				},
				{
					"kind": "function",
					"line": 314,
					"protection": "public",
					"type": "void()",
					"name": "finalize",
					"comment": " Flushes and finalizes the stream.\n\n\t\tFinalize has to be called on certain types of streams. No writes are possible after a\n\t\tcall to finalize().\n\t\n"
				},
				{
					"kind": "function",
					"line": 318,
					"protection": "public",
					"type": "void(const(char[]) bytes, bool do_flush = true)",
					"name": "write",
					"comment": " Writes an array of chars to the stream.\n\t\n"
				},
				{
					"kind": "function",
					"line": 329,
					"protection": "public",
					"type": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
					"name": "write",
					"comment": " Pipes an InputStream directly into this OutputStream.\n\n\t\tThe number of bytes written is either the whole input stream when nbytes == 0, or exactly\n\t\tnbytes for nbytes > 0. If the input stream contains less than nbytes of data, an exception\n\t\tis thrown.\n\t\n"
				},
				{
					"kind": "function",
					"line": 338,
					"protection": "public",
					"type": "void(ubyte elem)",
					"name": "put",
					"comment": " These methods provide an output range interface.\n\n\t\tNote that these functions do not flush the output stream for performance reasons. flush()\n\t\tneeds to be called manually afterwards.\n\n\t\tSee_Also: $(LINK http://dlang.org/phobos/std_range.html#isOutputRange)\n\t\n"
				},
				{
					"kind": "function",
					"line": 340,
					"protection": "public",
					"type": "void(const(ubyte[]) elems)",
					"name": "put",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 342,
					"protection": "public",
					"type": "void(char elem)",
					"name": "put",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 344,
					"protection": "public",
					"type": "void(const(char[]) elems)",
					"name": "put",
					"comment": " ditto\n"
				}
			],
			"name": "OutputStream",
			"comment": "\n\tInterface for all classes implementing writeable streams.\n"
		},
		{
			"kind": "interface",
			"line": 376,
			"protection": "public",
			"members": [],
			"interfaces": [
				"InputStream",
				"OutputStream"
			],
			"name": "Stream",
			"comment": "\n\tInterface for all classes implementing readable and writable streams.\n"
		},
		{
			"kind": "interface",
			"line": 383,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 385,
					"protection": "public",
					"type": "const nothrow @property ulong()",
					"name": "size",
					"comment": " Returns the total size of the file.\n"
				},
				{
					"kind": "function",
					"line": 388,
					"protection": "public",
					"type": "const nothrow @property bool()",
					"name": "readable",
					"comment": " Determines if this stream is readable.\n"
				},
				{
					"kind": "function",
					"line": 391,
					"protection": "public",
					"type": "const nothrow @property bool()",
					"name": "writable",
					"comment": " Determines if this stream is writable.\n"
				},
				{
					"kind": "function",
					"line": 394,
					"protection": "public",
					"type": "void(ulong offset)",
					"name": "seek",
					"comment": " Seeks to a specific position in the file if supported by the stream.\n"
				},
				{
					"kind": "function",
					"line": 397,
					"protection": "public",
					"type": "nothrow ulong()",
					"name": "tell",
					"comment": " Returns the current offset of the file pointer\n"
				}
			],
			"interfaces": [
				"Stream"
			],
			"name": "RandomAccessStream",
			"comment": "\n\tInterface for all streams supporting random access.\n"
		},
		{
			"kind": "class",
			"line": 406,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "function",
					"line": 407,
					"protection": "public",
					"type": "void(const(ubyte[]) bytes, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 408,
					"protection": "public",
					"type": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 412,
					"protection": "public",
					"type": "void()",
					"name": "flush"
				},
				{
					"kind": "function",
					"line": 413,
					"protection": "public",
					"type": "void()",
					"name": "finalize"
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "NullOutputStream",
			"comment": "\n\tStream implementation acting as a sink with no function.\n\n\tAny data written to the stream will be ignored and discarded. This stream type is useful if\n\tthe output of a particular stream is not needed but the stream needs to be drained.\n"
		}
	],
	"name": "vibe.stream.stream",
	"comment": "\n\tGeneric stream interface used by several stream-like classes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\utils\\string.d",
	"members": [
		{
			"kind": "function",
			"line": 24,
			"protection": "public",
			"type": "string(const(ubyte[]) str)",
			"name": "sanitizeUTF8",
			"comment": "\n\tTakes a string with possibly invalid UTF8 sequences and outputs a valid UTF8 string as near to\n\tthe original as possible.\n"
		},
		{
			"kind": "function",
			"line": 48,
			"protection": "public",
			"type": "string(string str)",
			"name": "stripUTF8Bom",
			"comment": "\n\tStrips the byte order mark of an UTF8 encoded string.\n\tThis is useful when the string is coming from a file.\n"
		},
		{
			"kind": "function",
			"line": 58,
			"protection": "public",
			"type": "string(string[] strs, string linesep = \"\\x0a\")",
			"name": "joinLines",
			"comment": "\n\tJoins an array of strings using 'linesep' as the line separator (\\n by default).\n"
		},
		{
			"kind": "function",
			"line": 77,
			"protection": "public",
			"type": "bool(string str, string chars)",
			"name": "allOf",
			"comment": "\n\tChecks if all characters in 'str' are contained in 'chars'.\n"
		},
		{
			"kind": "function",
			"line": 88,
			"protection": "public",
			"type": "bool(string str, string chars)",
			"name": "anyOf",
			"comment": "\n\tChecks if any character in 'str' is contained in 'chars'.\n"
		},
		{
			"kind": "function",
			"line": 97,
			"protection": "public",
			"type": "bool(char ch)",
			"name": "isAlpha",
			"comment": " ASCII alpha character check\n"
		},
		{
			"kind": "function",
			"line": 108,
			"protection": "public",
			"type": "string(string s)",
			"name": "stripLeftA",
			"comment": " ASCII whitespace trimming (space and tab)\n"
		},
		{
			"kind": "function",
			"line": 116,
			"protection": "public",
			"type": "string(string s)",
			"name": "stripRightA",
			"comment": " ASCII whitespace trimming (space and tab)\n"
		},
		{
			"kind": "function",
			"line": 124,
			"protection": "public",
			"type": "string(string s)",
			"name": "stripA",
			"comment": " ASCII whitespace trimming (space and tab)\n"
		},
		{
			"kind": "function",
			"line": 130,
			"protection": "public",
			"type": "int(string str, string chars)",
			"name": "countUntilAny",
			"comment": " Finds the first occurence of any of the characters in `chars`\n"
		},
		{
			"kind": "template",
			"line": 139,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 139,
					"type": "string(string format, ARGS args)",
					"name": "formatString",
					"comment": " Formats a string using formattedWrite() and returns it.\n"
				}
			],
			"name": "formatString(ARGS...)",
			"comment": " Formats a string using formattedWrite() and returns it.\n"
		},
		{
			"kind": "function",
			"line": 147,
			"protection": "public",
			"type": "int(string a, string b)",
			"name": "icmp2",
			"comment": " Special version of icmp() with optimization for ASCII characters\n"
		}
	],
	"name": "vibe.utils.string",
	"comment": "\n\tUtility functions for string processing\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\crypto\\sha1.d",
	"members": [
		{
			"kind": "function",
			"line": 5,
			"protection": "public",
			"type": "ubyte[20u](const(char[]) str)",
			"name": "sha1"
		}
	],
	"name": "vibe.crypto.sha1"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\data\\bson.d",
	"members": [
		{
			"kind": "alias",
			"line": 25,
			"protection": "public",
			"type": "immutable(ubyte)[]",
			"name": "bdata_t"
		},
		{
			"kind": "struct",
			"line": 32,
			"protection": "public",
			"members": [
				{
					"kind": "enum",
					"line": 34,
					"protection": "public",
					"base": "ubyte",
					"members": [
						{
							"kind": "enum member",
							"line": 36,
							"protection": "public",
							"name": "End",
							"comment": " End marker - should never occur explicitly\n"
						},
						{
							"kind": "enum member",
							"line": 38,
							"protection": "public",
							"name": "Double",
							"comment": " A 64-bit floating point value\n"
						},
						{
							"kind": "enum member",
							"line": 40,
							"protection": "public",
							"name": "String",
							"comment": " A UTF-8 string\n"
						},
						{
							"kind": "enum member",
							"line": 42,
							"protection": "public",
							"name": "Object",
							"comment": " An object aka. dictionary of string to Bson\n"
						},
						{
							"kind": "enum member",
							"line": 44,
							"protection": "public",
							"name": "Array",
							"comment": " An array of BSON values\n"
						},
						{
							"kind": "enum member",
							"line": 46,
							"protection": "public",
							"name": "BinData",
							"comment": " Raw binary data (ubyte[])\n"
						},
						{
							"kind": "enum member",
							"line": 48,
							"protection": "public",
							"name": "Undefined",
							"comment": " Deprecated\n"
						},
						{
							"kind": "enum member",
							"line": 50,
							"protection": "public",
							"name": "ObjectID",
							"comment": " BSON Object ID (96-bit)\n"
						},
						{
							"kind": "enum member",
							"line": 52,
							"protection": "public",
							"name": "Bool",
							"comment": " Boolean value\n"
						},
						{
							"kind": "enum member",
							"line": 54,
							"protection": "public",
							"name": "Date",
							"comment": " Date value (UTC)\n"
						},
						{
							"kind": "enum member",
							"line": 56,
							"protection": "public",
							"name": "Null",
							"comment": " Null value\n"
						},
						{
							"kind": "enum member",
							"line": 58,
							"protection": "public",
							"name": "Regex",
							"comment": " Regular expression\n"
						},
						{
							"kind": "enum member",
							"line": 60,
							"protection": "public",
							"name": "DBRef",
							"comment": " Deprecated\n"
						},
						{
							"kind": "enum member",
							"line": 62,
							"protection": "public",
							"name": "Code",
							"comment": " JaveScript code\n"
						},
						{
							"kind": "enum member",
							"line": 64,
							"protection": "public",
							"name": "Symbol",
							"comment": " Symbol/variable name\n"
						},
						{
							"kind": "enum member",
							"line": 66,
							"protection": "public",
							"name": "CodeWScope",
							"comment": " JavaScript code with scope\n"
						},
						{
							"kind": "enum member",
							"line": 68,
							"protection": "public",
							"name": "Int",
							"comment": " 32-bit integer\n"
						},
						{
							"kind": "enum member",
							"line": 70,
							"protection": "public",
							"name": "Timestamp",
							"comment": " Timestamp value\n"
						},
						{
							"kind": "enum member",
							"line": 72,
							"protection": "public",
							"name": "Long",
							"comment": " 64-bit integer\n"
						},
						{
							"kind": "enum member",
							"line": 74,
							"protection": "public",
							"name": "MinKey",
							"comment": " Internal value\n"
						},
						{
							"kind": "enum member",
							"line": 76,
							"protection": "public",
							"name": "MaxKey",
							"comment": " Internal value\n"
						}
					],
					"name": "Type",
					"comment": " Represents the type of a BSON value\n"
				},
				{
					"kind": "function",
					"line": 80,
					"protection": "public",
					"type": "@property Bson()",
					"name": "EmptyObject",
					"comment": " Returns a new, empty Bson value of type Object.\n"
				},
				{
					"kind": "constructor",
					"line": 93,
					"protection": "public",
					"type": "ref Bson(Type type, immutable(ubyte)[] data)",
					"name": "this",
					"comment": "\n\t\tCreates a new BSON value using raw data.\n\n\t\tA slice of the first bytes of 'data' is stored, containg the data related to the value. An\n\t\texception is thrown if 'data' is too short.\n\t\n"
				},
				{
					"kind": "constructor",
					"line": 125,
					"protection": "public",
					"type": "ref Bson(double value)",
					"name": "this",
					"comment": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n"
				},
				{
					"kind": "constructor",
					"line": 127,
					"protection": "public",
					"type": "ref Bson(string value, Type type = cast(Type)cast(ubyte)2u)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 134,
					"protection": "public",
					"type": "ref Bson(const(Bson[string]) value)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 136,
					"protection": "public",
					"type": "ref Bson(const(Bson[]) value)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 138,
					"protection": "public",
					"type": "ref Bson(const(BsonBinData) value)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 140,
					"protection": "public",
					"type": "ref Bson(const(BsonObjectID) value)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 142,
					"protection": "public",
					"type": "ref Bson(bool value)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 144,
					"protection": "public",
					"type": "ref Bson(const(BsonDate) value)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 146,
					"protection": "public",
					"type": "ref Bson(typeof(null))",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 148,
					"protection": "public",
					"type": "ref Bson(const(BsonRegex) value)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 150,
					"protection": "public",
					"type": "ref Bson(int value)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 152,
					"protection": "public",
					"type": "ref Bson(const(BsonTimestamp) value)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 154,
					"protection": "public",
					"type": "ref Bson(long value)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 156,
					"protection": "public",
					"type": "ref Bson(const(Json) value)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 161,
					"protection": "public",
					"type": "void(const(Bson) other)",
					"name": "opAssign",
					"comment": "\n\t\tAssigns a D type to a BSON value.\n\t\n"
				},
				{
					"kind": "function",
					"line": 167,
					"protection": "public",
					"type": "void(double value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 173,
					"protection": "public",
					"type": "void(string value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 183,
					"protection": "public",
					"type": "void(const(Bson[string]) value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 200,
					"protection": "public",
					"type": "void(const(Bson[]) value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 217,
					"protection": "public",
					"type": "void(const(BsonBinData) value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 228,
					"protection": "public",
					"type": "void(const(BsonObjectID) value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 234,
					"protection": "public",
					"type": "void(bool value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 240,
					"protection": "public",
					"type": "void(const(BsonDate) value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 246,
					"protection": "public",
					"type": "void(typeof(null))",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 252,
					"protection": "public",
					"type": "void(const(BsonRegex) value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 261,
					"protection": "public",
					"type": "void(int value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 267,
					"protection": "public",
					"type": "void(const(BsonTimestamp) value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 273,
					"protection": "public",
					"type": "void(long value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 279,
					"protection": "public",
					"type": "void(const(Json) value)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 289,
					"protection": "public",
					"type": "const @property Type()",
					"name": "type",
					"comment": "\n\t\tReturns the BSON type of this value.\n\t\n"
				},
				{
					"kind": "function",
					"line": 291,
					"protection": "public",
					"type": "const bool()",
					"name": "isNull"
				},
				{
					"kind": "function",
					"line": 296,
					"protection": "public",
					"type": "const @property immutable(ubyte)[]()",
					"name": "data",
					"comment": "\n\t\tReturns the raw data representing this BSON value (not including the field name and type).\n\t\n"
				},
				{
					"kind": "template",
					"line": 303,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 303,
							"type": "const T()",
							"name": "opCast",
							"comment": "\n\t\tConverts the BSON value to a D value.\n\n\t\tIf the BSON type of the value does not match the D type, an exception is thrown.\n\t\n"
						}
					],
					"name": "opCast(T)",
					"comment": "\n\t\tConverts the BSON value to a D value.\n\n\t\tIf the BSON type of the value does not match the D type, an exception is thrown.\n\t\n"
				},
				{
					"kind": "template",
					"line": 305,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 305,
							"type": "const T()",
							"name": "get"
						}
					],
					"name": "get(T)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 374,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 374,
							"type": "inout inout(T)(T def = T.init)",
							"name": "opt",
							"comment": " Returns the native type for this BSON if it matches the current runtime type.\n\n\t\tIf the runtime type does not match the given native type, the 'def' parameter is returned\n\t\tinstead.\n\t\n"
						}
					],
					"name": "opt(T)",
					"comment": " Returns the native type for this BSON if it matches the current runtime type.\n\n\t\tIf the runtime type does not match the given native type, the 'def' parameter is returned\n\t\tinstead.\n\t\n"
				},
				{
					"kind": "function",
					"line": 383,
					"protection": "public",
					"type": "const @property uint()",
					"name": "length",
					"comment": " Returns the length of a BSON value of type String, Array or BinData.\n\t\n"
				},
				{
					"kind": "function",
					"line": 395,
					"protection": "public",
					"type": "Bson(const(Json) value)",
					"name": "fromJson",
					"comment": " Converts a given JSON value to the corresponding BSON value.\n\t\n"
				},
				{
					"kind": "function",
					"line": 407,
					"protection": "public",
					"type": "const Json()",
					"name": "toJson",
					"comment": " Converts a BSON value to a JSON value.\n\n\t\tAll BSON types that cannot be exactly represented as JSON, will\n\t\tbe converted to a string.\n\t\n"
				},
				{
					"kind": "function",
					"line": 444,
					"protection": "public",
					"type": "inout inout(Bson)(string idx)",
					"name": "opIndex",
					"comment": " Allows accessing fields of a BSON object using [].\n\n\t\tReturns a null value if the specified field does not exist.\n\t\n"
				},
				{
					"kind": "template",
					"line": 451,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 451,
							"type": "void(T value, string idx)",
							"name": "opIndexAssign",
							"comment": " ditto\n"
						}
					],
					"name": "opIndexAssign(T)",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 491,
					"protection": "public",
					"type": "inout inout(Bson)(uint idx)",
					"name": "opIndex",
					"comment": " Allows index based access of a BSON array value.\n\n\t\tReturns a null value if the index is out of bounds.\n\t\n"
				},
				{
					"kind": "function",
					"line": 506,
					"protection": "public",
					"type": "const int(int delegate(ref Bson obj) del)",
					"name": "opApply",
					"comment": "\n\t\tAllows foreach iterating over BSON objects and arrays.\n\n\t\tNote that although D requires to provide a 'ref' argument for\n\t\topApply, in-place editing of the array/object fields is not possible.\n\t\tAny modification attempty will work on a temporary, even if the\n\t\tloop variable is declared 'ref'.\n\t\n"
				},
				{
					"kind": "function",
					"line": 522,
					"protection": "public",
					"type": "const int(int delegate(ref uint idx, ref Bson obj) del)",
					"name": "opApply",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 544,
					"protection": "public",
					"type": "const int(int delegate(ref string idx, ref Bson obj) del)",
					"name": "opApply",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 566,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 566,
							"type": "inout inout(Bson)()",
							"name": "opDispatch"
						}
					],
					"name": "opDispatch(string prop)",
					"comment": " Allows to access existing fields of a JSON object using dot syntax.\n\n\t\tReturns a null value for non-existent fields.\n\t\n"
				},
				{
					"kind": "template",
					"line": 568,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 568,
							"type": "void(T val)",
							"name": "opDispatch"
						}
					],
					"name": "opDispatch(string prop,T)",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 570,
					"protection": "public",
					"type": "const bool(ref const(Bson) other)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 32,
					"protection": "public",
					"type": "bool(const(void*) p, const(void*) q)",
					"name": "__xopEquals"
				}
			],
			"name": "Bson",
			"comment": "\n\tRepresents a BSON value.\n\n\n"
		},
		{
			"kind": "struct",
			"line": 588,
			"protection": "public",
			"members": [
				{
					"kind": "enum",
					"line": 589,
					"protection": "public",
					"base": "ubyte",
					"members": [
						{
							"kind": "enum member",
							"line": 590,
							"protection": "public",
							"name": "Generic"
						},
						{
							"kind": "enum member",
							"line": 591,
							"protection": "public",
							"name": "Function"
						},
						{
							"kind": "enum member",
							"line": 592,
							"protection": "public",
							"name": "BinaryOld"
						},
						{
							"kind": "enum member",
							"line": 593,
							"protection": "public",
							"name": "UUID"
						},
						{
							"kind": "enum member",
							"line": 594,
							"protection": "public",
							"name": "MD5"
						},
						{
							"kind": "enum member",
							"line": 595,
							"protection": "public",
							"name": "UserDefined"
						}
					],
					"name": "Type"
				},
				{
					"kind": "constructor",
					"line": 603,
					"protection": "public",
					"type": "ref BsonBinData(Type type, immutable(ubyte)[] data)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 609,
					"protection": "public",
					"type": "const @property Type()",
					"name": "type"
				},
				{
					"kind": "function",
					"line": 610,
					"protection": "public",
					"type": "const @property immutable(ubyte)[]()",
					"name": "rawData"
				}
			],
			"name": "BsonBinData",
			"comment": "\n\tRepresents a BSON binary data value (Bson.Type.BinData).\n"
		},
		{
			"kind": "struct",
			"line": 617,
			"protection": "public",
			"members": [
				{
					"kind": "constructor",
					"line": 627,
					"protection": "public",
					"type": "ref BsonObjectID(const(ubyte[]) bytes)",
					"name": "this",
					"comment": " Constructs a new object ID from the given raw byte array.\n\t\n"
				},
				{
					"kind": "function",
					"line": 634,
					"protection": "public",
					"type": "BsonObjectID(string str)",
					"name": "fromString",
					"comment": " Creates an on object ID from a string in standard hexa-decimal form.\n\t\n"
				},
				{
					"kind": "alias",
					"line": 656,
					"protection": "public",
					"name": "fromHexString",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 660,
					"protection": "public",
					"type": "BsonObjectID()",
					"name": "generate",
					"comment": " Generates a unique object ID.\n\t\n"
				},
				{
					"kind": "function",
					"line": 686,
					"protection": "public",
					"type": "BsonObjectID(const(SysTime) date)",
					"name": "createDateID",
					"comment": " Creates a pseudo object ID that matches the given date.\n\n\t\tThis kind of ID can be useful to query a database for items in a certain\n\t\tdate interval using their ID. This works using the property of standard BSON\n\t\tobject IDs that they store their creation date as part of the ID. Note that\n\t\tthis date part is only 32-bit wide and is limited to the same timespan as a\n\t\t32-bit Unix timestamp.\n\t\n"
				},
				{
					"kind": "function",
					"line": 695,
					"protection": "public",
					"type": "const @property bool()",
					"name": "valid",
					"comment": " Returns true for any non-zero ID.\n\t\n"
				},
				{
					"kind": "function",
					"line": 704,
					"protection": "public",
					"type": "const int(ref const(BsonObjectID) other)",
					"name": "opCmp",
					"comment": " Allows for relational comparison of different IDs.\n\t\n"
				},
				{
					"kind": "function",
					"line": 711,
					"protection": "public",
					"type": "const string()",
					"name": "toString",
					"comment": " Converts the ID to its standard hexa-decimal string representation.\n\t\n"
				}
			],
			"name": "BsonObjectID",
			"comment": "\n\tRepresents a BSON object id (Bson.Type.BinData).\n"
		},
		{
			"kind": "struct",
			"line": 726,
			"protection": "public",
			"members": [
				{
					"kind": "constructor",
					"line": 729,
					"protection": "public",
					"type": "ref BsonDate(const(Date) date)",
					"name": "this"
				},
				{
					"kind": "constructor",
					"line": 733,
					"protection": "public",
					"type": "ref BsonDate(const(DateTime) date)",
					"name": "this"
				},
				{
					"kind": "constructor",
					"line": 737,
					"protection": "public",
					"type": "ref BsonDate(long time)",
					"name": "this"
				},
				{
					"kind": "constructor",
					"line": 741,
					"protection": "public",
					"type": "ref BsonDate(const(SysTime) time)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 746,
					"protection": "public",
					"type": "BsonDate(string iso_ext_string)",
					"name": "fromString"
				},
				{
					"kind": "function",
					"line": 748,
					"protection": "public",
					"type": "const string()",
					"name": "toString"
				},
				{
					"kind": "function",
					"line": 750,
					"protection": "public",
					"type": "const SysTime()",
					"name": "toSysTime"
				},
				{
					"kind": "function",
					"line": 755,
					"protection": "public",
					"type": "const bool(ref const(BsonDate) other)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 756,
					"protection": "public",
					"type": "const int(ref const(BsonDate) other)",
					"name": "opCmp"
				},
				{
					"kind": "function",
					"line": 762,
					"protection": "public",
					"type": "const @property long()",
					"name": "value"
				},
				{
					"kind": "function",
					"line": 763,
					"protection": "public",
					"type": "@property void(long v)",
					"name": "value"
				},
				{
					"kind": "function",
					"line": 726,
					"protection": "public",
					"type": "bool(const(void*) p, const(void*) q)",
					"name": "__xopEquals"
				}
			],
			"name": "BsonDate",
			"comment": "\n\tRepresents a BSON date value (Bson.Type.Date).\n"
		},
		{
			"kind": "struct",
			"line": 770,
			"protection": "public",
			"members": [
				{
					"kind": "constructor",
					"line": 773,
					"protection": "public",
					"type": "ref BsonTimestamp(long time)",
					"name": "this"
				}
			],
			"name": "BsonTimestamp",
			"comment": "\n\tRepresents a BSON timestamp value (Bson.Type.Timestamp)\n"
		},
		{
			"kind": "struct",
			"line": 782,
			"protection": "public",
			"members": [
				{
					"kind": "constructor",
					"line": 788,
					"protection": "public",
					"type": "ref BsonRegex(string expr, string options)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 794,
					"protection": "public",
					"type": "const @property string()",
					"name": "expression"
				},
				{
					"kind": "function",
					"line": 795,
					"protection": "public",
					"type": "const @property string()",
					"name": "options"
				}
			],
			"name": "BsonRegex",
			"comment": "\n\tRepresents a BSON regular expression value (Bson.Type.Regex).\n"
		},
		{
			"kind": "template",
			"line": 847,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 847,
					"type": "Bson(T value)",
					"name": "serializeToBson",
					"comment": "\n\tSerializes the given value to BSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Bson)            $(DD Used as-is)\n\t\t$(DT Json)            $(DD Converted to BSON)\n\t\t$(DT BsonBinData)     $(DD Converted to Bson.Type.BinData)\n\t\t$(DT BsonObjectID)    $(DD Converted to Bson.Type.ObjectID)\n\t\t$(DT BsonDate)        $(DD Converted to Bson.Type.Date)\n\t\t$(DT BsonTimestamp)   $(DD Converted to Bson.Type.Timestamp)\n\t\t$(DT BsonRegex)       $(DD Converted to Bson.Type.Regex)\n\t\t$(DT null)            $(DD Converted to Bson.Type.Null)\n\t\t$(DT bool)            $(DD Converted to Bson.Type.Bool)\n\t\t$(DT float, double)   $(DD Converted to Bson.Type.Double)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Bson.Type.Long)\n\t\t$(DT string)          $(DD Converted to Bson.Type.String)\n\t\t$(DT ubyte[])         $(DD Converted to Bson.Type.BinData)\n\t\t$(DT T[])             $(DD Converted to Bson.Type.Array)\n\t\t$(DT T[string])       $(DD Converted to Bson.Type.Object)\n\t\t$(DT struct)          $(DD Converted to Bson.Type.Object)\n\t\t$(DT class)           $(DD Converted to Bson.Type.Object or Bson.Type.Null)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tBson toBson() const;\n\tstatic T fromBson(Bson src);\n\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. toBson overrides toJson).\n"
				}
			],
			"name": "serializeToBson(T)",
			"comment": "\n\tSerializes the given value to BSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Bson)            $(DD Used as-is)\n\t\t$(DT Json)            $(DD Converted to BSON)\n\t\t$(DT BsonBinData)     $(DD Converted to Bson.Type.BinData)\n\t\t$(DT BsonObjectID)    $(DD Converted to Bson.Type.ObjectID)\n\t\t$(DT BsonDate)        $(DD Converted to Bson.Type.Date)\n\t\t$(DT BsonTimestamp)   $(DD Converted to Bson.Type.Timestamp)\n\t\t$(DT BsonRegex)       $(DD Converted to Bson.Type.Regex)\n\t\t$(DT null)            $(DD Converted to Bson.Type.Null)\n\t\t$(DT bool)            $(DD Converted to Bson.Type.Bool)\n\t\t$(DT float, double)   $(DD Converted to Bson.Type.Double)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Bson.Type.Long)\n\t\t$(DT string)          $(DD Converted to Bson.Type.String)\n\t\t$(DT ubyte[])         $(DD Converted to Bson.Type.BinData)\n\t\t$(DT T[])             $(DD Converted to Bson.Type.Array)\n\t\t$(DT T[string])       $(DD Converted to Bson.Type.Object)\n\t\t$(DT struct)          $(DD Converted to Bson.Type.Object)\n\t\t$(DT class)           $(DD Converted to Bson.Type.Object or Bson.Type.Null)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tBson toBson() const;\n\tstatic T fromBson(Bson src);\n\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. toBson overrides toJson).\n"
		},
		{
			"kind": "template",
			"line": 909,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 909,
					"type": "void(ref T dst, Bson src)",
					"name": "deserializeBson",
					"comment": "\n\tDeserializes a BSON value into the destination variable.\n\n\tThe same types as for serializeToBson() are supported and handled inversely.\n"
				}
			],
			"name": "deserializeBson(T)",
			"comment": "\n\tDeserializes a BSON value into the destination variable.\n\n\tThe same types as for serializeToBson() are supported and handled inversely.\n"
		},
		{
			"kind": "template",
			"line": 1008,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 1008,
					"type": "Bson.Type(ref R dst, in Json value)",
					"name": "writeBson"
				}
			],
			"name": "writeBson(R) if (isOutputRange!(R,ubyte))"
		},
		{
			"kind": "template",
			"line": 1094,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 1094,
					"type": "void(R dst, string str)",
					"name": "putCString"
				}
			],
			"name": "putCString(R)"
		},
		{
			"kind": "template",
			"line": 1100,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 1100,
					"type": "ubyte[](T v)",
					"name": "toBsonData"
				}
			],
			"name": "toBsonData(T)"
		},
		{
			"kind": "template",
			"line": 1110,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 1110,
					"type": "T(in ubyte[] v)",
					"name": "fromBsonData"
				}
			],
			"name": "fromBsonData(T)"
		},
		{
			"kind": "template",
			"line": 1118,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 1118,
					"type": "ubyte[](T v)",
					"name": "toBigEndianData"
				}
			],
			"name": "toBigEndianData(T)"
		}
	],
	"name": "vibe.data.bson",
	"comment": "\n\tBSON serialization and value handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\textfilter\\markdown.d",
	"members": [
		{
			"kind": "template",
			"line": 42,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 42,
					"type": "string(string str, MarkdownFlags flags = MarkdownFlags.vanillaMarkdown)",
					"name": "filterMarkdown",
					"comment": " Returns a Markdown filtered HTML string.\n"
				}
			],
			"name": "filterMarkdown()",
			"comment": " Returns a Markdown filtered HTML string.\n"
		},
		{
			"kind": "template",
			"line": 52,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 52,
					"type": "void(ref R dst, string src, MarkdownFlags flags = MarkdownFlags.vanillaMarkdown)",
					"name": "filterMarkdown",
					"comment": " Markdown filters the given string and writes the corresponding HTML to an output range.\n"
				}
			],
			"name": "filterMarkdown(R)",
			"comment": " Markdown filters the given string and writes the corresponding HTML to an output range.\n"
		},
		{
			"kind": "enum",
			"line": 62,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 63,
					"protection": "public",
					"name": "none"
				},
				{
					"kind": "enum member",
					"line": 64,
					"protection": "public",
					"name": "keepLineBreaks"
				},
				{
					"kind": "enum member",
					"line": 65,
					"protection": "public",
					"name": "backtickCodeBlocks"
				},
				{
					"kind": "enum member",
					"line": 66,
					"protection": "public",
					"name": "noInlineHtml"
				},
				{
					"kind": "enum member",
					"line": 67,
					"protection": "public",
					"name": "vanillaMarkdown"
				},
				{
					"kind": "enum member",
					"line": 68,
					"protection": "public",
					"name": "forumDefault"
				}
			],
			"name": "MarkdownFlags"
		},
		{
			"kind": "enum",
			"line": 75,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 76,
					"protection": "public",
					"name": "White"
				},
				{
					"kind": "enum member",
					"line": 77,
					"protection": "public",
					"name": "Quote"
				}
			],
			"name": "IndentType"
		},
		{
			"kind": "enum",
			"line": 80,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 81,
					"protection": "public",
					"name": "Undefined"
				},
				{
					"kind": "enum member",
					"line": 82,
					"protection": "public",
					"name": "Blank"
				},
				{
					"kind": "enum member",
					"line": 83,
					"protection": "public",
					"name": "Plain"
				},
				{
					"kind": "enum member",
					"line": 84,
					"protection": "public",
					"name": "Hline"
				},
				{
					"kind": "enum member",
					"line": 85,
					"protection": "public",
					"name": "AtxHeader"
				},
				{
					"kind": "enum member",
					"line": 86,
					"protection": "public",
					"name": "SetextHeader"
				},
				{
					"kind": "enum member",
					"line": 87,
					"protection": "public",
					"name": "UList"
				},
				{
					"kind": "enum member",
					"line": 88,
					"protection": "public",
					"name": "OList"
				},
				{
					"kind": "enum member",
					"line": 89,
					"protection": "public",
					"name": "HtmlBlock"
				},
				{
					"kind": "enum member",
					"line": 90,
					"protection": "public",
					"name": "CodeBlockDelimiter"
				}
			],
			"name": "LineType"
		},
		{
			"kind": "enum",
			"line": 160,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 161,
					"protection": "public",
					"name": "Plain"
				},
				{
					"kind": "enum member",
					"line": 162,
					"protection": "public",
					"name": "Text"
				},
				{
					"kind": "enum member",
					"line": 163,
					"protection": "public",
					"name": "Paragraph"
				},
				{
					"kind": "enum member",
					"line": 164,
					"protection": "public",
					"name": "Header"
				},
				{
					"kind": "enum member",
					"line": 165,
					"protection": "public",
					"name": "OList"
				},
				{
					"kind": "enum member",
					"line": 166,
					"protection": "public",
					"name": "UList"
				},
				{
					"kind": "enum member",
					"line": 167,
					"protection": "public",
					"name": "ListItem"
				},
				{
					"kind": "enum member",
					"line": 168,
					"protection": "public",
					"name": "Code"
				},
				{
					"kind": "enum member",
					"line": 169,
					"protection": "public",
					"name": "Quote"
				}
			],
			"name": "BlockType"
		}
	],
	"name": "vibe.textfilter.markdown",
	"comment": "\n\tMarkdown parser implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\websockets.d",
	"members": [
		{
			"kind": "enum",
			"line": 43,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 44,
					"protection": "public",
					"name": "Continuation"
				},
				{
					"kind": "enum member",
					"line": 45,
					"protection": "public",
					"name": "Text"
				},
				{
					"kind": "enum member",
					"line": 46,
					"protection": "public",
					"name": "Binary"
				},
				{
					"kind": "enum member",
					"line": 47,
					"protection": "public",
					"name": "Close"
				},
				{
					"kind": "enum member",
					"line": 48,
					"protection": "public",
					"name": "Ping"
				},
				{
					"kind": "enum member",
					"line": 49,
					"protection": "public",
					"name": "Pong"
				}
			],
			"name": "FrameOpcode"
		},
		{
			"kind": "struct",
			"line": 53,
			"protection": "public",
			"members": [
				{
					"kind": "variable",
					"line": 54,
					"protection": "public",
					"type": "bool",
					"name": "fin"
				},
				{
					"kind": "variable",
					"line": 55,
					"protection": "public",
					"type": "FrameOpcode",
					"name": "opcode"
				},
				{
					"kind": "variable",
					"line": 56,
					"protection": "public",
					"type": "ubyte[]",
					"name": "payload"
				},
				{
					"kind": "function",
					"line": 59,
					"protection": "public",
					"type": "void(OutputStream stream)",
					"name": "writeFrame"
				},
				{
					"kind": "function",
					"line": 76,
					"protection": "public",
					"type": "Frame(InputStream stream)",
					"name": "readFrame"
				}
			],
			"name": "Frame"
		},
		{
			"kind": "class",
			"line": 119,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 126,
					"protection": "public",
					"type": "OutgoingWebSocketMessage(Stream conn, FrameOpcode frameOpcode)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 132,
					"protection": "public",
					"type": "void(const(ubyte[]) bytes, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 136,
					"protection": "public",
					"type": "void()",
					"name": "flush"
				},
				{
					"kind": "function",
					"line": 144,
					"protection": "public",
					"type": "void()",
					"name": "finalize"
				},
				{
					"kind": "function",
					"line": 152,
					"protection": "public",
					"type": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
					"name": "write"
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "OutgoingWebSocketMessage"
		},
		{
			"kind": "class",
			"line": 158,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 164,
					"protection": "public",
					"type": "IncommingWebSocketMessage(Stream conn)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 171,
					"protection": "public",
					"type": "const @property bool()",
					"name": "empty"
				},
				{
					"kind": "function",
					"line": 173,
					"protection": "public",
					"type": "const @property ulong()",
					"name": "leastSize"
				},
				{
					"kind": "function",
					"line": 175,
					"protection": "public",
					"type": "@property bool()",
					"name": "dataAvailableForRead"
				},
				{
					"kind": "function",
					"line": 177,
					"protection": "public",
					"type": "@property FrameOpcode()",
					"name": "frameOpcode"
				},
				{
					"kind": "function",
					"line": 179,
					"protection": "public",
					"type": "const(ubyte)[]()",
					"name": "peek"
				},
				{
					"kind": "function",
					"line": 181,
					"protection": "public",
					"type": "void(ubyte[] dst)",
					"name": "read"
				}
			],
			"interfaces": [
				"InputStream"
			],
			"name": "IncommingWebSocketMessage"
		},
		{
			"kind": "class",
			"line": 218,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 225,
					"protection": "public",
					"type": "WebSocket(Stream conn)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 231,
					"protection": "public",
					"type": "@property bool()",
					"name": "connected"
				},
				{
					"kind": "function",
					"line": 242,
					"protection": "public",
					"type": "@property bool()",
					"name": "dataAvailableForRead"
				},
				{
					"kind": "function",
					"line": 244,
					"protection": "public",
					"type": "void(string data)",
					"name": "send"
				},
				{
					"kind": "function",
					"line": 248,
					"protection": "public",
					"type": "void(ubyte[] data)",
					"name": "send"
				},
				{
					"kind": "function",
					"line": 252,
					"protection": "public",
					"type": "void(void delegate(OutgoingWebSocketMessage) sender, FrameOpcode frameOpcode = cast(FrameOpcode)1)",
					"name": "send"
				},
				{
					"kind": "function",
					"line": 257,
					"protection": "public",
					"type": "void()",
					"name": "close"
				},
				{
					"kind": "function",
					"line": 265,
					"protection": "public",
					"type": "ubyte[]()",
					"name": "receive"
				},
				{
					"kind": "function",
					"line": 273,
					"protection": "public",
					"type": "void(void delegate(IncommingWebSocketMessage) receiver)",
					"name": "receive"
				}
			],
			"name": "WebSocket"
		},
		{
			"kind": "function",
			"line": 280,
			"protection": "public",
			"type": "void delegate(HttpServerRequest req, HttpServerResponse res)(void delegate(WebSocket) onHandshake)",
			"name": "handleWebSockets"
		}
	],
	"name": "vibe.http.websockets",
	"comment": "\n\tImplements WebSocket support and fallbacks for older browsers.\n\n\tExamples:\n\t---\n\tvoid handleConn(WebSocket sock)\n\t{\n\t\t// simple echo server\n\t\twhile( sock.connected ){\n\t\t\tauto msg = sock.receive();\n\t\t\tsock.send(msg);\n\t\t}\n\t}\n\n\tstatic this {\n\t\tauto router = new UrlRouter;\n\t\trouter.get(\"/websocket\", handleWebSockets(&handleConn))\n\n\t\t// Start HTTP server...\n\t}\n\t---\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\core\\process.d",
	"members": [
		{
			"kind": "struct",
			"line": 20,
			"protection": "public",
			"name": "SECURITY_ATTRIBUTES"
		},
		{
			"kind": "function",
			"line": 64,
			"protection": "public",
			"type": "Process(string executable, string[] args, string working_dir)",
			"name": "spawnProcess"
		},
		{
			"kind": "class",
			"line": 97,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 102,
					"protection": "public",
					"type": "Process(int pid)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 107,
					"protection": "public",
					"type": "const @property int()",
					"name": "id"
				},
				{
					"kind": "function",
					"line": 109,
					"protection": "public",
					"type": "void()",
					"name": "term"
				}
			],
			"name": "Process"
		}
	],
	"name": "vibe.core.process",
	"comment": "\n\tProcess spawning and controlling\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\connection.d",
	"members": [
		{
			"kind": "class",
			"line": 27,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 35,
					"protection": "public",
					"type": "int",
					"name": "defaultPort"
				},
				{
					"kind": "constructor",
					"line": 37,
					"protection": "public",
					"type": "MongoConnection(string server, ushort port = cast(ushort)27017)",
					"name": "this"
				},
				{
					"kind": "constructor",
					"line": 43,
					"protection": "public",
					"type": "MongoConnection(MongoClientSettings cfg)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 58,
					"protection": "public",
					"type": "void()",
					"name": "acquire"
				},
				{
					"kind": "function",
					"line": 64,
					"protection": "public",
					"type": "void()",
					"name": "release"
				},
				{
					"kind": "function",
					"line": 70,
					"protection": "public",
					"type": "bool()",
					"name": "isOwner"
				},
				{
					"kind": "function",
					"line": 72,
					"protection": "public",
					"type": "void()",
					"name": "connect"
				},
				{
					"kind": "function",
					"line": 82,
					"protection": "public",
					"type": "void()",
					"name": "disconnect"
				},
				{
					"kind": "function",
					"line": 90,
					"protection": "public",
					"type": "const @property bool()",
					"name": "connected"
				},
				{
					"kind": "function",
					"line": 92,
					"protection": "public",
					"type": "void(string collection_name, UpdateFlags flags, Bson selector, Bson update)",
					"name": "update"
				},
				{
					"kind": "function",
					"line": 108,
					"protection": "public",
					"type": "void(string collection_name, InsertFlags flags, Bson[] documents)",
					"name": "insert"
				},
				{
					"kind": "function",
					"line": 126,
					"protection": "public",
					"type": "Reply(string collection_name, QueryFlags flags, int nskip, int nret, Bson query, Bson returnFieldSelector = (Bson __ctmp1745;\r\n , __ctmp1745).this(null))",
					"name": "query"
				},
				{
					"kind": "function",
					"line": 140,
					"protection": "public",
					"type": "Reply(string collection_name, int nret, long cursor_id)",
					"name": "getMore"
				},
				{
					"kind": "function",
					"line": 151,
					"protection": "public",
					"type": "void(string collection_name, DeleteFlags flags, Bson selector)",
					"name": "delete_"
				},
				{
					"kind": "function",
					"line": 166,
					"protection": "public",
					"type": "void(long[] cursors)",
					"name": "killCursors"
				}
			],
			"interfaces": [
				"EventedObject"
			],
			"name": "MongoConnection",
			"comment": "\n\tProvides low-level mongodb protocol access.\n\n\tNote that a MongoConnection my only be used from one fiber/thread at a time.\n"
		},
		{
			"kind": "function",
			"line": 285,
			"protection": "public",
			"type": "bool(out MongoClientSettings cfg, string url)",
			"name": "parseMongoDBUrl",
			"comment": "\n Parses the given string as a mongodb URL. Url must be in the form documented at\n $(LINK http://www.mongodb.org/display/DOCS/Connections) which is:\n\n mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n\n Returns: true if the URL was successfully parsed. False if the URL can not be parsed.\n\n If the URL is successfully parsed the MongoClientSettings instance will contain the parsed config.\n If the URL is not successfully parsed the information in the MongoClientSettings instance may be\n incomplete and should not be used.\n \n"
		},
		{
			"kind": "enum",
			"line": 535,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 536,
					"protection": "public",
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 537,
					"protection": "public",
					"name": "Upsert"
				},
				{
					"kind": "enum member",
					"line": 538,
					"protection": "public",
					"name": "MultiUpdate"
				}
			],
			"name": "UpdateFlags"
		},
		{
			"kind": "enum",
			"line": 541,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 542,
					"protection": "public",
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 543,
					"protection": "public",
					"name": "ContinueOnError"
				}
			],
			"name": "InsertFlags"
		},
		{
			"kind": "enum",
			"line": 546,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 547,
					"protection": "public",
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 548,
					"protection": "public",
					"name": "TailableCursor"
				},
				{
					"kind": "enum member",
					"line": 549,
					"protection": "public",
					"name": "SlaveOk"
				},
				{
					"kind": "enum member",
					"line": 550,
					"protection": "public",
					"name": "OplogReplay"
				},
				{
					"kind": "enum member",
					"line": 551,
					"protection": "public",
					"name": "NoCursorTimeout"
				},
				{
					"kind": "enum member",
					"line": 552,
					"protection": "public",
					"name": "AwaitData"
				},
				{
					"kind": "enum member",
					"line": 553,
					"protection": "public",
					"name": "Exhaust"
				},
				{
					"kind": "enum member",
					"line": 554,
					"protection": "public",
					"name": "Partial"
				}
			],
			"name": "QueryFlags"
		},
		{
			"kind": "enum",
			"line": 557,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 558,
					"protection": "public",
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 559,
					"protection": "public",
					"name": "SingleRemove"
				}
			],
			"name": "DeleteFlags"
		},
		{
			"kind": "enum",
			"line": 562,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 563,
					"protection": "public",
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 564,
					"protection": "public",
					"name": "CursorNotFound"
				},
				{
					"kind": "enum member",
					"line": 565,
					"protection": "public",
					"name": "QueryFailure"
				},
				{
					"kind": "enum member",
					"line": 566,
					"protection": "public",
					"name": "ShardConfigStale"
				},
				{
					"kind": "enum member",
					"line": 567,
					"protection": "public",
					"name": "AwaitCapable"
				}
			],
			"name": "ReplyFlags"
		},
		{
			"kind": "class",
			"line": 570,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 571,
					"protection": "public",
					"type": "long",
					"name": "cursor"
				},
				{
					"kind": "variable",
					"line": 572,
					"protection": "public",
					"type": "ReplyFlags",
					"name": "flags"
				},
				{
					"kind": "variable",
					"line": 573,
					"protection": "public",
					"type": "int",
					"name": "firstDocument"
				},
				{
					"kind": "variable",
					"line": 574,
					"protection": "public",
					"type": "Bson[]",
					"name": "documents"
				}
			],
			"name": "Reply"
		},
		{
			"kind": "class",
			"line": 596,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 597,
					"protection": "public",
					"type": "string",
					"name": "username"
				},
				{
					"kind": "variable",
					"line": 598,
					"protection": "public",
					"type": "string",
					"name": "password"
				},
				{
					"kind": "variable",
					"line": 599,
					"protection": "public",
					"type": "MongoHost[]",
					"name": "hosts"
				},
				{
					"kind": "variable",
					"line": 600,
					"protection": "public",
					"type": "string",
					"name": "database"
				},
				{
					"kind": "variable",
					"line": 601,
					"protection": "public",
					"type": "QueryFlags",
					"name": "defQueryFlags"
				},
				{
					"kind": "variable",
					"line": 602,
					"protection": "public",
					"type": "string",
					"name": "replicaSet"
				},
				{
					"kind": "variable",
					"line": 603,
					"protection": "public",
					"type": "bool",
					"name": "safe"
				},
				{
					"kind": "variable",
					"line": 604,
					"protection": "public",
					"type": "Bson",
					"name": "w"
				},
				{
					"kind": "variable",
					"line": 605,
					"protection": "public",
					"type": "long",
					"name": "wTimeoutMS"
				},
				{
					"kind": "variable",
					"line": 606,
					"protection": "public",
					"type": "bool",
					"name": "fsync"
				},
				{
					"kind": "variable",
					"line": 607,
					"protection": "public",
					"type": "bool",
					"name": "journal"
				},
				{
					"kind": "variable",
					"line": 608,
					"protection": "public",
					"type": "long",
					"name": "connectTimeoutMS"
				},
				{
					"kind": "variable",
					"line": 609,
					"protection": "public",
					"type": "long",
					"name": "socketTimeoutMS"
				}
			],
			"name": "MongoClientSettings"
		},
		{
			"kind": "class",
			"line": 613,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 614,
					"protection": "public",
					"type": "string",
					"name": "name"
				},
				{
					"kind": "variable",
					"line": 615,
					"protection": "public",
					"type": "ushort",
					"name": "port"
				},
				{
					"kind": "constructor",
					"line": 617,
					"protection": "public",
					"type": "MongoHost(string hostName, ushort mongoPort)",
					"name": "this"
				}
			],
			"name": "MongoHost"
		}
	],
	"name": "vibe.db.mongo.connection",
	"comment": "\n\tLow level mongodb protocol.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\core\\task.d",
	"members": [
		{
			"kind": "class",
			"line": 20,
			"protection": "public",
			"base": "Fiber",
			"members": [
				{
					"kind": "function",
					"line": 32,
					"protection": "public",
					"type": "Task()",
					"name": "getThis",
					"comment": " Returns the Task instance belonging to the calling task.\n\t\n"
				},
				{
					"kind": "template",
					"line": 36,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 36,
							"type": "void(string name, T value)",
							"name": "set",
							"comment": " Sets a task local variable.\n\t\n"
						}
					],
					"name": "set(T)",
					"comment": " Sets a task local variable.\n\t\n"
				},
				{
					"kind": "template",
					"line": 43,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 43,
							"type": "T(string name)",
							"name": "get",
							"comment": " Returns a task local variable.\n\t\n"
						}
					],
					"name": "get(T)",
					"comment": " Returns a task local variable.\n\t\n"
				},
				{
					"kind": "function",
					"line": 53,
					"protection": "public",
					"type": "bool(string name)",
					"name": "isSet",
					"comment": " Determines if a certain task local variable is set.\n\t\n"
				}
			],
			"name": "Task",
			"comment": " The base class for a task aka Fiber.\n\n\tThis class represents a single task that is executed concurrencly\n\twith other tasks. Each task is owned by a single thread.\n"
		}
	],
	"name": "vibe.core.task",
	"comment": "\n\tContains interfaces and enums for evented I/O drivers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\core\\args.d",
	"members": [
		{
			"kind": "function",
			"line": 54,
			"protection": "public",
			"type": "void(ref string[] args)",
			"name": "processCommandLineArgs",
			"comment": "\n\tProcesses the command line arguments passed to the application.\n\n\tAny argument that matches a vibe supported command switch is removed from the 'args' array.\n"
		}
	],
	"name": "vibe.core.args",
	"comment": "\n\tParsing of command line arguments.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\session.d",
	"members": [
		{
			"kind": "class",
			"line": 22,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "function",
					"line": 39,
					"protection": "public",
					"type": "int(int delegate(ref string key, ref string val) del)",
					"name": "opApply"
				},
				{
					"kind": "function",
					"line": 48,
					"protection": "public",
					"type": "const @property string()",
					"name": "id",
					"comment": " Returns the unique session id of this session.\n"
				},
				{
					"kind": "function",
					"line": 51,
					"protection": "public",
					"type": "const string(string name)",
					"name": "opIndex",
					"comment": " Gets/sets a key/value pair stored within the session.\n"
				},
				{
					"kind": "function",
					"line": 53,
					"protection": "public",
					"type": "void(string value, string name)",
					"name": "opIndexAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 56,
					"protection": "public",
					"type": "const bool(string key)",
					"name": "isKeySet",
					"comment": " Queries the session for the existence of a particular key.\n"
				}
			],
			"name": "Session",
			"comment": "\n\tRepresents a single HTTP session.\n\n\tIndexing the session object with string keys allows to store arbitrary key/value pairs.\n"
		},
		{
			"kind": "interface",
			"line": 68,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 70,
					"protection": "public",
					"type": "Session()",
					"name": "create",
					"comment": " Creates a new session.\n"
				},
				{
					"kind": "function",
					"line": 73,
					"protection": "public",
					"type": "Session(string id)",
					"name": "open",
					"comment": " Opens an existing session.\n"
				},
				{
					"kind": "function",
					"line": 76,
					"protection": "public",
					"type": "void(string id, string name, string value)",
					"name": "set",
					"comment": " Sets a name/value pair for a given session.\n"
				},
				{
					"kind": "function",
					"line": 79,
					"protection": "public",
					"type": "const string(string id, string name, string defaultVal = null)",
					"name": "get",
					"comment": " Returns the value for a given session key.\n"
				},
				{
					"kind": "function",
					"line": 82,
					"protection": "public",
					"type": "const bool(string id, string key)",
					"name": "isKeySet",
					"comment": " Determines if a certain session key is set.\n"
				},
				{
					"kind": "function",
					"line": 85,
					"protection": "public",
					"type": "void(string id)",
					"name": "destroy",
					"comment": " Terminates the given sessiom.\n"
				},
				{
					"kind": "function",
					"line": 88,
					"protection": "public",
					"type": "int delegate(int delegate(ref string key, ref string val))(string id)",
					"name": "iterateSession",
					"comment": " Iterates all key/value pairs stored in the given session. \n"
				}
			],
			"name": "SessionStore",
			"comment": "\n\tInterface for a basic session store.\n\n\tA sesseion store is responsible for storing the id and the associated key/value pairs of a\n\tsession.\n"
		},
		{
			"kind": "class",
			"line": 105,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 109,
					"protection": "public",
					"type": "MemorySessionStore()",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 111,
					"protection": "public",
					"type": "Session()",
					"name": "create"
				},
				{
					"kind": "function",
					"line": 114,
					"protection": "public",
					"type": "Session(string id)",
					"name": "open"
				},
				{
					"kind": "function",
					"line": 118,
					"protection": "public",
					"type": "void(string id, string name, string value)",
					"name": "set"
				},
				{
					"kind": "function",
					"line": 122,
					"protection": "public",
					"type": "const string(string id, string name, string defaultVal = null)",
					"name": "get"
				},
				{
					"kind": "function",
					"line": 132,
					"protection": "public",
					"type": "const bool(string id, string key)",
					"name": "isKeySet"
				},
				{
					"kind": "function",
					"line": 136,
					"protection": "public",
					"type": "void(string id)",
					"name": "destroy"
				},
				{
					"kind": "function",
					"line": 141,
					"protection": "public",
					"type": "int delegate(int delegate(ref string key, ref string val))(string id)",
					"name": "iterateSession"
				}
			],
			"interfaces": [
				"SessionStore"
			],
			"name": "MemorySessionStore",
			"comment": "\n\tSession store for storing a session in local memory.\n\n\tIf the server is running as a single instance (no thread or process clustering), this kind of\n\tsession store provies the fastest and simplest way to store sessions. In any other case,\n\ta persistent session store based on a database is necessary.\n"
		}
	],
	"name": "vibe.http.session",
	"comment": "\n\tCookie based session support.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\vibe.d",
	"members": [],
	"name": "vibe.vibe",
	"comment": "\n\tProvides the full vibe.d API as a single import module.\n\n\tThis file provides the majority of the vibe API through a single import. Note that typical\n\tvibe.d applications will import 'vibe.d' instead to also get an implicit application entry\n\tpoint.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\proxy.d",
	"members": [
		{
			"kind": "function",
			"line": 31,
			"protection": "public",
			"type": "void(HttpServerSettings settings, string destination_host, ushort destination_port)",
			"name": "listenHttpReverseProxy",
			"comment": "\n\tTransparently forwards all requests to the proxy to a destination_host.\n\n\tYou can use the hostName field in the 'settings' to combine multiple internal HTTP servers\n\tinto one public web server with multiple virtual hosts.\n"
		},
		{
			"kind": "function",
			"line": 41,
			"protection": "public",
			"type": "void delegate(HttpServerRequest req, HttpServerResponse res)(string destination_host, ushort destination_port)",
			"name": "reverseProxyRequest",
			"comment": "\n\tReturns a HTTP request handler that forwards any request to the specified host/port.\n"
		}
	],
	"name": "vibe.http.proxy",
	"comment": "\n\tHTTP (reverse) proxy implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\data\\json.d",
	"members": [
		{
			"kind": "struct",
			"line": 69,
			"protection": "public",
			"members": [
				{
					"kind": "enum",
					"line": 84,
					"protection": "public",
					"base": "int",
					"members": [
						{
							"kind": "enum member",
							"line": 86,
							"protection": "public",
							"name": "Undefined",
							"comment": " A non-existent value in a JSON object\n"
						},
						{
							"kind": "enum member",
							"line": 88,
							"protection": "public",
							"name": "Null",
							"comment": " Null value\n"
						},
						{
							"kind": "enum member",
							"line": 90,
							"protection": "public",
							"name": "Bool",
							"comment": " Boolean value\n"
						},
						{
							"kind": "enum member",
							"line": 92,
							"protection": "public",
							"name": "Int",
							"comment": " 64-bit integer value\n"
						},
						{
							"kind": "enum member",
							"line": 94,
							"protection": "public",
							"name": "Float",
							"comment": " 64-bit floating point value\n"
						},
						{
							"kind": "enum member",
							"line": 96,
							"protection": "public",
							"name": "String",
							"comment": " UTF-8 string\n"
						},
						{
							"kind": "enum member",
							"line": 98,
							"protection": "public",
							"name": "Array",
							"comment": " Array of JSON values\n"
						},
						{
							"kind": "enum member",
							"line": 100,
							"protection": "public",
							"name": "Object",
							"comment": " JSON object aka. dictionary from string to Json\n"
						}
					],
					"name": "Type",
					"comment": " Represents the run time type of a JSON value.\n\t\n"
				},
				{
					"kind": "function",
					"line": 104,
					"protection": "public",
					"type": "@property Json()",
					"name": "Undefined",
					"comment": " New JSON value of Type.Undefined\n"
				},
				{
					"kind": "function",
					"line": 107,
					"protection": "public",
					"type": "@property Json()",
					"name": "EmptyObject",
					"comment": " New JSON value of Type.Object\n"
				},
				{
					"kind": "function",
					"line": 110,
					"protection": "public",
					"type": "@property Json()",
					"name": "EmptyArray",
					"comment": " New JSON value of Type.Array\n"
				},
				{
					"kind": "constructor",
					"line": 117,
					"protection": "public",
					"type": "ref Json(typeof(null))",
					"name": "this",
					"comment": "\n\t\tConstructor for a JSON object.\n\t\n"
				},
				{
					"kind": "constructor",
					"line": 119,
					"protection": "public",
					"type": "ref Json(bool v)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 121,
					"protection": "public",
					"type": "ref Json(int v)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 123,
					"protection": "public",
					"type": "ref Json(long v)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 125,
					"protection": "public",
					"type": "ref Json(double v)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 127,
					"protection": "public",
					"type": "ref Json(string v)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 129,
					"protection": "public",
					"type": "ref Json(Json[] v)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "constructor",
					"line": 131,
					"protection": "public",
					"type": "ref Json(Json[string] v)",
					"name": "this",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 136,
					"protection": "public",
					"type": "ref Json(Json v)",
					"name": "opAssign",
					"comment": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n"
				},
				{
					"kind": "function",
					"line": 151,
					"protection": "public",
					"type": "void(typeof(null))",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 153,
					"protection": "public",
					"type": "bool(bool v)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 155,
					"protection": "public",
					"type": "int(int v)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 157,
					"protection": "public",
					"type": "long(long v)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 159,
					"protection": "public",
					"type": "double(double v)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 161,
					"protection": "public",
					"type": "string(string v)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 163,
					"protection": "public",
					"type": "Json[](Json[] v)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 165,
					"protection": "public",
					"type": "Json[string](Json[string] v)",
					"name": "opAssign",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 170,
					"protection": "public",
					"type": "const @property Type()",
					"name": "type",
					"comment": "\n\t\tThe current type id of this JSON object.\n\t\n"
				},
				{
					"kind": "function",
					"line": 175,
					"protection": "public",
					"type": "inout ref inout(Json)(uint idx)",
					"name": "opIndex",
					"comment": "\n\t\tAllows direct indexing of array typed JSON values.\n\t\n"
				},
				{
					"kind": "function",
					"line": 181,
					"protection": "public",
					"type": "const const(Json)(string key)",
					"name": "opIndex",
					"comment": "\n\t\tAllows direct indexing of object typed JSON values using a string as\n\t\tthe key.\n\t\n"
				},
				{
					"kind": "function",
					"line": 189,
					"protection": "public",
					"type": "ref Json(string key)",
					"name": "opIndex",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 203,
					"protection": "public",
					"type": "inout inout(Json[])()",
					"name": "opSlice",
					"comment": "\n\t\tReturns a slice of a JSON array.\n\t\n"
				},
				{
					"kind": "function",
					"line": 205,
					"protection": "public",
					"type": "inout inout(Json[])(uint from, uint to)",
					"name": "opSlice",
					"comment": "\n"
				},
				{
					"kind": "function",
					"line": 210,
					"protection": "public",
					"type": "const @property uint()",
					"name": "length",
					"comment": "\n\t\tReturns the number of entries of string, array or object typed JSON values.\n\t\n"
				},
				{
					"kind": "function",
					"line": 225,
					"protection": "public",
					"type": "int(int delegate(ref Json obj) del)",
					"name": "opApply",
					"comment": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n"
				},
				{
					"kind": "function",
					"line": 242,
					"protection": "public",
					"type": "const int(int delegate(ref const(Json) obj) del)",
					"name": "opApply",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 259,
					"protection": "public",
					"type": "int(int delegate(ref uint idx, ref Json obj) del)",
					"name": "opApply",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 268,
					"protection": "public",
					"type": "const int(int delegate(ref uint idx, ref const(Json) obj) del)",
					"name": "opApply",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 277,
					"protection": "public",
					"type": "int(int delegate(ref string idx, ref Json obj) del)",
					"name": "opApply",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 287,
					"protection": "public",
					"type": "const int(int delegate(ref string idx, ref const(Json) obj) del)",
					"name": "opApply",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 300,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 300,
							"type": "inout inout(T)()",
							"name": "opCast",
							"comment": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n"
						}
					],
					"name": "opCast(T)",
					"comment": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n"
				},
				{
					"kind": "template",
					"line": 302,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 302,
							"type": "inout inout(T)()",
							"name": "get"
						}
					],
					"name": "get(T)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 316,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 316,
							"type": "const const(T)(const(T) def = T.init)",
							"name": "opt"
						}
					],
					"name": "opt(T)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 322,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 322,
							"type": "T(T def = T.init)",
							"name": "opt"
						}
					],
					"name": "opt(T)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 331,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 331,
							"type": "inout inout(T)()",
							"name": "to"
						}
					],
					"name": "to(T)",
					"comment": "\n\t\tConverts the JSON value to the corresponding D type - types are converted as neccessary.\n\t\n"
				},
				{
					"kind": "template",
					"line": 422,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 422,
							"type": "const Json()",
							"name": "opUnary",
							"comment": "\n\t\tPerforms unary operations on the JSON value.\n\n\t\tThe following operations are supported for each type:\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD ~)\n\t\t\t$(DT Int)    $(DD +, -, ++, --)\n\t\t\t$(DT Float)  $(DD +, -, ++, --)\n\t\t\t$(DT String) $(DD none)\n\t\t\t$(DT Array)  $(DD none)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n"
						}
					],
					"name": "opUnary(string op)",
					"comment": "\n\t\tPerforms unary operations on the JSON value.\n\n\t\tThe following operations are supported for each type:\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD ~)\n\t\t\t$(DT Int)    $(DD +, -, ++, --)\n\t\t\t$(DT Float)  $(DD +, -, ++, --)\n\t\t\t$(DT String) $(DD none)\n\t\t\t$(DT Array)  $(DD none)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n"
				},
				{
					"kind": "template",
					"line": 451,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 451,
							"type": "const Json(ref const(Json) other)",
							"name": "opBinary",
							"comment": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n"
						}
					],
					"name": "opBinary(string op)",
					"comment": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n"
				},
				{
					"kind": "template",
					"line": 487,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 487,
							"type": "Json(Json other)",
							"name": "opBinary",
							"comment": " ditto\n"
						}
					],
					"name": "opBinary(string op) if (op == \"~\")",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 498,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 498,
							"type": "void(Json other)",
							"name": "opOpAssign",
							"comment": " ditto\n"
						}
					],
					"name": "opOpAssign(string op) if (op == \"+\" || op == \"-\" || op == \"*\" || op == \"/\" || op == \"%\")",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 530,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 530,
							"type": "const Json(bool other)",
							"name": "opBinary",
							"comment": " ditto\n"
						}
					],
					"name": "opBinary(string op)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 532,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 532,
							"type": "const Json(long other)",
							"name": "opBinary",
							"comment": " ditto\n"
						}
					],
					"name": "opBinary(string op)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 534,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 534,
							"type": "const Json(double other)",
							"name": "opBinary",
							"comment": " ditto\n"
						}
					],
					"name": "opBinary(string op)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 536,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 536,
							"type": "const Json(string other)",
							"name": "opBinary",
							"comment": " ditto\n"
						}
					],
					"name": "opBinary(string op)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 538,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 538,
							"type": "Json(Json[] other)",
							"name": "opBinary",
							"comment": " ditto\n"
						}
					],
					"name": "opBinary(string op)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 540,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 540,
							"type": "const Json(bool other)",
							"name": "opBinaryRight",
							"comment": " ditto\n"
						}
					],
					"name": "opBinaryRight(string op)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 542,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 542,
							"type": "const Json(long other)",
							"name": "opBinaryRight",
							"comment": " ditto\n"
						}
					],
					"name": "opBinaryRight(string op)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 544,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 544,
							"type": "const Json(double other)",
							"name": "opBinaryRight",
							"comment": " ditto\n"
						}
					],
					"name": "opBinaryRight(string op)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 546,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 546,
							"type": "const Json(string other)",
							"name": "opBinaryRight",
							"comment": " ditto\n"
						}
					],
					"name": "opBinaryRight(string op) if (op == \"~\")",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 548,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 548,
							"type": "inout inout(Json)*(string other)",
							"name": "opBinaryRight",
							"comment": " ditto\n"
						}
					],
					"name": "opBinaryRight(string op) if (op == \"in\")",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 556,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 556,
							"type": "Json(Json[] other)",
							"name": "opBinaryRight",
							"comment": " ditto\n"
						}
					],
					"name": "opBinaryRight(string op)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 561,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 561,
							"type": "const const(Json)()",
							"name": "opDispatch"
						}
					],
					"name": "opDispatch(string prop)",
					"comment": "\n\t\tAllows to access existing fields of a JSON object using dot syntax.\n\t\n"
				},
				{
					"kind": "template",
					"line": 563,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 563,
							"type": "Json()",
							"name": "opDispatch"
						}
					],
					"name": "opDispatch(string prop)",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 572,
					"protection": "public",
					"type": "const bool(ref const(Json) other)",
					"name": "opEquals",
					"comment": "\n\t\tCompares two JSON values for equality.\n\n\t\tIf the two values have different types, they are considered unequal.\n\t\tThis differs with ECMA script, which performs a type conversion before\n\t\tcomparing the values.\n\t\n"
				},
				{
					"kind": "function",
					"line": 587,
					"protection": "public",
					"type": "const bool(typeof(null))",
					"name": "opEquals",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 588,
					"protection": "public",
					"type": "const bool(bool v)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 589,
					"protection": "public",
					"type": "const bool(long v)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 590,
					"protection": "public",
					"type": "const bool(double v)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 591,
					"protection": "public",
					"type": "const bool(string v)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 603,
					"protection": "public",
					"type": "const int(ref const(Json) other)",
					"name": "opCmp",
					"comment": "\n\t\tCompares two JSON values.\n\n\t\tIf the types of the two values differ, the value with the smaller type\n\t\tid is considered the smaller value. This differs from ECMA script, which\n\t\tperforms a type conversion before comparing the values.\n\n\t\tJSON values of type Object cannot be compared and will throw an\n\t\texception.\n\t\n"
				},
				{
					"kind": "template",
					"line": 625,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 625,
							"type": "Type()",
							"name": "typeId"
						}
					],
					"name": "typeId(T)",
					"comment": "\n\t\tReturns the type id corresponding to the given D type.\n\t\n"
				},
				{
					"kind": "function",
					"line": 643,
					"protection": "public",
					"type": "const string()",
					"name": "toString",
					"comment": "\n\t\tReturns the JSON object as a string.\n\n\t\tFor large JSON values use toJSON() instead as this function will store the whole string\n\t\tin memory, whereas toJSON() writes it out bit for bit.\n\t\n"
				},
				{
					"kind": "template",
					"line": 649,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 649,
							"type": "const void()",
							"name": "checkType"
						}
					],
					"name": "checkType(T)"
				},
				{
					"kind": "function",
					"line": 69,
					"protection": "public",
					"type": "bool(const(void*) p, const(void*) q)",
					"name": "__xopEquals"
				}
			],
			"name": "Json",
			"comment": "\n\n\n\tRepresents a single JSON value.\n\n\tJson values can have one of the types defined in the Json.Type enum. They\n\tbehave mostly like values in ECMA script in the way that you can\n\ttransparently perform operations on them. However, strict typechecking is\n\tdone, so that operations between differently typed JSON values will throw\n\tan exception. Additionally, an explicit cast or using get!() or to!() is\n\trequired to convert a JSON value to the corresponding static D type.\n"
		},
		{
			"kind": "template",
			"line": 675,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 675,
					"type": "Json(ref R range, int* line = null)",
					"name": "parseJson",
					"comment": "\n\n\n\tParses the given range as a JSON string and returns the corresponding Json object.\n\n\tThe range is shrunk during parsing, leaving any remaining text that is now part of\n\tthe JSON contents.\n\n\tThrows an Exception if any parsing error occured.\n"
				}
			],
			"name": "parseJson(R) if (is(R == string))",
			"comment": "\n\n\n\tParses the given range as a JSON string and returns the corresponding Json object.\n\n\tThe range is shrunk during parsing, leaving any remaining text that is now part of\n\tthe JSON contents.\n\n\tThrows an Exception if any parsing error occured.\n"
		},
		{
			"kind": "function",
			"line": 761,
			"protection": "public",
			"type": "Json(string str)",
			"name": "parseJsonString",
			"comment": "\n\tParses the given JSON string and returns the corresponding Json object.\n\n\tThrows an Exception if any parsing error occurs.\n"
		},
		{
			"kind": "template",
			"line": 818,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 818,
					"type": "Json(T value)",
					"name": "serializeToJson",
					"comment": "\n\tSerializes the given value to JSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Json)            $(DD Used as-is)\n\t\t$(DT null)            $(DD Converted to Json.Type.Null)\n\t\t$(DT bool)            $(DD Converted to Json.Type.Bool)\n\t\t$(DT float, double)   $(DD Converted to Json.Type.Double)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Json.Type.Int)\n\t\t$(DT string)          $(DD Converted to Json.Type.String)\n\t\t$(DT T[])             $(DD Converted to Json.Type.Array)\n\t\t$(DT T[string])       $(DD Converted to Json.Type.Object)\n\t\t$(DT struct)          $(DD Converted to Json.Type.Object)\n\t\t$(DT class)           $(DD Converted to Json.Type.Object or Json.Type.Null)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall public fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. toJson overrides toString).\n"
				}
			],
			"name": "serializeToJson(T)",
			"comment": "\n\tSerializes the given value to JSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Json)            $(DD Used as-is)\n\t\t$(DT null)            $(DD Converted to Json.Type.Null)\n\t\t$(DT bool)            $(DD Converted to Json.Type.Bool)\n\t\t$(DT float, double)   $(DD Converted to Json.Type.Double)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Json.Type.Int)\n\t\t$(DT string)          $(DD Converted to Json.Type.String)\n\t\t$(DT T[])             $(DD Converted to Json.Type.Array)\n\t\t$(DT T[string])       $(DD Converted to Json.Type.Object)\n\t\t$(DT struct)          $(DD Converted to Json.Type.Object)\n\t\t$(DT class)           $(DD Converted to Json.Type.Object or Json.Type.Null)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall public fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. toJson overrides toString).\n"
		},
		{
			"kind": "template",
			"line": 874,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 874,
					"type": "void(ref T dst, Json src)",
					"name": "deserializeJson",
					"comment": "\n\tDeserializes a JSON value into the destination variable.\n\n\tThe same types as for serializeToJson() are supported and handled inversely.\n"
				}
			],
			"name": "deserializeJson(T)",
			"comment": "\n\tDeserializes a JSON value into the destination variable.\n\n\tThe same types as for serializeToJson() are supported and handled inversely.\n"
		},
		{
			"kind": "template",
			"line": 976,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 976,
					"type": "void(ref R dst, in Json json)",
					"name": "toJson",
					"comment": "\n\tWrites the given JSON object as a JSON string into the destination range.\n\n\tThe basic version will not output any whitespace and thus minizime the size of the string.\n\n\ttoPrettyJSON() in the other hand will add newlines and indents to make the output human\n\treadable.\n"
				}
			],
			"name": "toJson(R)",
			"comment": "\n\tWrites the given JSON object as a JSON string into the destination range.\n\n\tThe basic version will not output any whitespace and thus minizime the size of the string.\n\n\ttoPrettyJSON() in the other hand will add newlines and indents to make the output human\n\treadable.\n"
		},
		{
			"kind": "template",
			"line": 1019,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 1019,
					"type": "void(ref R dst, in Json json, int level = 0)",
					"name": "toPrettyJson",
					"comment": " ditto\n"
				}
			],
			"name": "toPrettyJson(R)",
			"comment": " ditto\n"
		}
	],
	"name": "vibe.data.json",
	"comment": "\n\tJSON serialization and value handling.\n\n\tThis module provides the Json struct for reading, writing and manipulating JSON values in a seamless,\n\tJavaScript like way. De(serialization) of arbitrary D types is also supported.\n\n\tExamples:\n\n\t---\n\tvoid manipulateJson(Json j)\n\t{\n\t\t// object members can be accessed using member syntax, just like in JavaScript\n\t\tj = Json.EmptyObject;\n\t\tj.name = \"Example\";\n\t\tj.id = 1;\n\n\t\t// retrieving the values is done using get()\n\t\tassert(j[\"name\"].get!string == \"Example\");\n\t\tassert(j[\"id\"].get!int == 1);\n\n\t\t// semantic convertions can be done using to()\n\t\tassert(j.id.to!string == \"1\");\n\n\t\t// prints:\n\t\t// name: \"Example\"\n\t\t// id: 1\n\t\tforeach( string key, value; j ){\n\t\t\twritefln(\"%s: %s\", key, value);\n\t\t}\n\n\t\t// print out as JSON: {\"name\": \"Example\", \"id\": 1}\n\t\twritefln(\"JSON: %s\", j.toString());\n\t}\n\t---\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\message.d",
	"members": [
		{
			"kind": "alias",
			"line": 23,
			"protection": "public",
			"type": "StrMapCI",
			"name": "InetHeaderMap"
		},
		{
			"kind": "function",
			"line": 28,
			"protection": "public",
			"type": "void(InputStream input, ref StrMapCI dst, uint max_line_length = cast(uint)1000, Allocator alloc = defaultAllocator())",
			"name": "parseRfc5322Header",
			"comment": "\n\tParses an internet header according to RFC5322 (with RFC822 compatibility).\n"
		},
		{
			"kind": "template",
			"line": 63,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 63,
					"type": "void(ref R dst, SysTime time)",
					"name": "writeRFC822DateString",
					"comment": "\n\tWrites an RFC-822/5322 date string to the given output range.\n"
				}
			],
			"name": "writeRFC822DateString(R)",
			"comment": "\n\tWrites an RFC-822/5322 date string to the given output range.\n"
		},
		{
			"kind": "template",
			"line": 78,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 78,
					"type": "void(ref R dst, SysTime time)",
					"name": "writeRFC822TimeString",
					"comment": "\n\tWrites an RFC-822 time string to the given output range.\n"
				}
			],
			"name": "writeRFC822TimeString(R)",
			"comment": "\n\tWrites an RFC-822 time string to the given output range.\n"
		},
		{
			"kind": "template",
			"line": 100,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 100,
					"type": "void(ref R dst, SysTime time)",
					"name": "writeRFC822DateTimeString",
					"comment": "\n\tWrites an RFC-822 date+time string to the given output range.\n"
				}
			],
			"name": "writeRFC822DateTimeString(R)",
			"comment": "\n\tWrites an RFC-822 date+time string to the given output range.\n"
		},
		{
			"kind": "function",
			"line": 110,
			"protection": "public",
			"type": "string(SysTime time)",
			"name": "toRFC822TimeString",
			"comment": "\n\tReturns the RFC-822 time string representation of the given time.\n"
		},
		{
			"kind": "function",
			"line": 120,
			"protection": "public",
			"type": "string(SysTime time)",
			"name": "toRFC822DateString",
			"comment": "\n\tReturns the RFC-822/5322 date string representation of the given time.\n"
		},
		{
			"kind": "function",
			"line": 130,
			"protection": "public",
			"type": "string(SysTime time)",
			"name": "toRFC822DateTimeString",
			"comment": "\n\tReturns the RFC-822 date+time string representation of the given time.\n"
		},
		{
			"kind": "function",
			"line": 140,
			"protection": "public",
			"type": "SysTime(string str)",
			"name": "parseRFC822DateTimeString",
			"comment": "\n\tParses a date+time string according to RFC-822/5322.\n"
		},
		{
			"kind": "template",
			"line": 179,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 179,
					"type": "void(ref R dst, uint n)",
					"name": "writeDecimal2"
				}
			],
			"name": "writeDecimal2(R)"
		},
		{
			"kind": "template",
			"line": 187,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 187,
					"type": "void(ref R dst, uint n)",
					"name": "writeDecimal"
				}
			],
			"name": "writeDecimal(R)"
		}
	],
	"name": "vibe.inet.message",
	"comment": "\n\tInternet message handling according to RFC822/RFC5322\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\crypto\\ssl.d",
	"members": [
		{
			"kind": "class",
			"line": 31,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 36,
					"protection": "public",
					"type": "SslContext(string cert_file, string key_file, SSLVersion ver = cast(SSLVersion)0)",
					"name": "this"
				},
				{
					"kind": "constructor",
					"line": 54,
					"protection": "public",
					"type": "SslContext(SSLVersion ver = cast(SSLVersion)0)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 69,
					"protection": "public",
					"type": "ssl_st*()",
					"name": "createClientCtx"
				}
			],
			"name": "SslContext",
			"comment": "\n\n\n\n"
		},
		{
			"kind": "enum",
			"line": 76,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 77,
					"protection": "public",
					"name": "SSLv23"
				},
				{
					"kind": "enum member",
					"line": 78,
					"protection": "public",
					"name": "SSLv3"
				},
				{
					"kind": "enum member",
					"line": 79,
					"protection": "public",
					"name": "TLSv1"
				},
				{
					"kind": "enum member",
					"line": 80,
					"protection": "public",
					"name": "DTLSv1"
				}
			],
			"name": "SSLVersion"
		}
	],
	"name": "vibe.crypto.ssl",
	"comment": "\n\tContains the SSLContext class used for SSL based network connections.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\core\\file.d",
	"members": [
		{
			"kind": "function",
			"line": 27,
			"protection": "public",
			"type": "FileStream(Path path, FileMode mode = cast(FileMode)0)",
			"name": "openFile",
			"comment": "\n\tOpens a file stream with the specified mode.\n"
		},
		{
			"kind": "function",
			"line": 32,
			"protection": "public",
			"type": "FileStream(string path, FileMode mode = cast(FileMode)0)",
			"name": "openFile",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 40,
			"protection": "public",
			"type": "FileStream()",
			"name": "createTempFile",
			"comment": "\n\tCreates and opens a temporary file for writing.\n"
		},
		{
			"kind": "function",
			"line": 53,
			"protection": "public",
			"type": "void(Path from, Path to)",
			"name": "moveFile",
			"comment": "\n\tMoves or renames a file.\n"
		},
		{
			"kind": "function",
			"line": 58,
			"protection": "public",
			"type": "void(string from, string to)",
			"name": "moveFile",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 78,
			"protection": "public",
			"type": "void(Path from, Path to, bool overwrite = false)",
			"name": "copyFile",
			"comment": "\n\tCopies a file.\n\n\tNote that attributes and time stamps are currently not retained.\n\n\tParams:\n\t\tfrom = Path of the source file\n\t\tto = Path for the destination file\n\t\toverwrite = If true, any file existing at the destination path will be\n\t\t\toverwritten. If this is false, an excpetion will be thrown should\n\t\t\ta file already exist at the destination path.\n\n\tThrows:\n\t\tAn Exception if the copy operation fails for some reason.\n"
		},
		{
			"kind": "function",
			"line": 92,
			"protection": "public",
			"type": "void(string from, string to)",
			"name": "copyFile",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 100,
			"protection": "public",
			"type": "void(Path path)",
			"name": "removeFile",
			"comment": "\n\tRemoves a file\n"
		},
		{
			"kind": "function",
			"line": 105,
			"protection": "public",
			"type": "void(string path)",
			"name": "removeFile",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 112,
			"protection": "public",
			"type": "bool(Path path)",
			"name": "existsFile",
			"comment": "\n\tChecks if a file exists\n"
		},
		{
			"kind": "function",
			"line": 116,
			"protection": "public",
			"type": "bool(string path)",
			"name": "existsFile",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 125,
			"protection": "public",
			"type": "FileInfo(Path path)",
			"name": "getFileInfo",
			"comment": " Stores information about the specified file/directory into 'info'\n\n\tReturns false if the file does not exist.\n"
		},
		{
			"kind": "function",
			"line": 131,
			"protection": "public",
			"type": "FileInfo(string path)",
			"name": "getFileInfo",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 139,
			"protection": "public",
			"type": "void(Path path)",
			"name": "createDirectory",
			"comment": "\n\tCreates a new directory.\n"
		},
		{
			"kind": "function",
			"line": 144,
			"protection": "public",
			"type": "void(string path)",
			"name": "createDirectory",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 152,
			"protection": "public",
			"type": "void(Path path, bool delegate(FileInfo info) del)",
			"name": "listDirectory",
			"comment": "\n\tEnumerates all files in the specified directory.\n"
		},
		{
			"kind": "function",
			"line": 159,
			"protection": "public",
			"type": "void(string path, bool delegate(FileInfo info) del)",
			"name": "listDirectory",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 167,
			"protection": "public",
			"type": "DirectoryWatcher(Path path, bool recursive = true)",
			"name": "watchDirectory",
			"comment": "\n\tStarts watching a directory for changes.\n"
		},
		{
			"kind": "function",
			"line": 172,
			"protection": "public",
			"type": "DirectoryWatcher(string path, bool recursive = true)",
			"name": "watchDirectory"
		},
		{
			"kind": "struct",
			"line": 180,
			"protection": "public",
			"members": [
				{
					"kind": "variable",
					"line": 182,
					"protection": "public",
					"type": "string",
					"name": "name",
					"comment": " Name of the file (not including the path)\n"
				},
				{
					"kind": "variable",
					"line": 185,
					"protection": "public",
					"type": "ulong",
					"name": "size",
					"comment": " Size of the file (zero for directories)\n"
				},
				{
					"kind": "variable",
					"line": 188,
					"protection": "public",
					"type": "SysTime",
					"name": "timeModified",
					"comment": " Time of the last modification\n"
				},
				{
					"kind": "variable",
					"line": 191,
					"protection": "public",
					"type": "SysTime",
					"name": "timeCreated",
					"comment": " Time of creation (not available on all operating systems/file systems)\n"
				},
				{
					"kind": "variable",
					"line": 194,
					"protection": "public",
					"type": "bool",
					"name": "isSymlink",
					"comment": " True if this is a symlink to an actual file\n"
				},
				{
					"kind": "variable",
					"line": 197,
					"protection": "public",
					"type": "bool",
					"name": "isDirectory",
					"comment": " True if this is a directory or a symlink pointing to a directory\n"
				},
				{
					"kind": "function",
					"line": 180,
					"protection": "public",
					"type": "const bool(const(FileInfo) p)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 180,
					"protection": "public",
					"type": "bool(const(void*) p, const(void*) q)",
					"name": "__xopEquals"
				}
			],
			"name": "FileInfo",
			"comment": " Contains general information about a file.\n"
		},
		{
			"kind": "enum",
			"line": 203,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 205,
					"protection": "public",
					"name": "Read",
					"comment": " The file is opened read-only.\n"
				},
				{
					"kind": "enum member",
					"line": 207,
					"protection": "public",
					"name": "ReadWrite",
					"comment": " The file is opened for read-write random access.\n"
				},
				{
					"kind": "enum member",
					"line": 209,
					"protection": "public",
					"name": "CreateTrunc",
					"comment": " The file is truncated if it exists and created otherwise and the opened for read-write access.\n"
				},
				{
					"kind": "enum member",
					"line": 211,
					"protection": "public",
					"name": "Append",
					"comment": " The file is opened for appending data to it and created if it does not exist.\n"
				}
			],
			"name": "FileMode",
			"comment": "\n\tSpecifies how a file is manipulated on disk.\n"
		},
		{
			"kind": "interface",
			"line": 217,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 219,
					"protection": "public",
					"type": "const nothrow @property Path()",
					"name": "path",
					"comment": " The path of the file.\n"
				},
				{
					"kind": "function",
					"line": 222,
					"protection": "public",
					"type": "void()",
					"name": "close",
					"comment": " Closes the file handle.\n"
				}
			],
			"interfaces": [
				"RandomAccessStream",
				"EventedObject"
			],
			"name": "FileStream",
			"comment": "\n\tAccesses the contents of a file as a stream.\n"
		},
		{
			"kind": "interface",
			"line": 232,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 234,
					"protection": "public",
					"type": "const @property Path()",
					"name": "path",
					"comment": " The path of the watched directory\n"
				},
				{
					"kind": "function",
					"line": 237,
					"protection": "public",
					"type": "const @property bool()",
					"name": "recursive",
					"comment": " Indicates if the directory is watched recursively\n"
				},
				{
					"kind": "function",
					"line": 252,
					"protection": "public",
					"type": "bool(ref DirectoryChange[] dst, Duration timeout = dur(-1L))",
					"name": "readChanges",
					"comment": " Fills the destination array with all changes that occured since the last call.\n\n\t\tThe function will blok until either directory changes have occured or until the\n\t\ttiout has elapsed. Specifying a negative duration will cause the function to\n\t\twait without a timeout.\n\n\t\tParams:\n\t\t\tdst = The destination array to which the changes will be appended\n\t\t\ttimeout = Optional timeout for the read operation\n\n\t\tReturns:\n\t\t\tIf the call completed successfully, true is returned.\n\t\n"
				}
			],
			"name": "DirectoryWatcher",
			"comment": "\n\tInterface for directory watcher implementations.\n\n\tDirectory watchers monitor the contents of a directory (wither recursively or non-recursively)\n\tfor changes, such as file additions, deletions or modifications.\n"
		},
		{
			"kind": "enum",
			"line": 258,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 260,
					"protection": "public",
					"name": "Added",
					"comment": " A file or directory was added\n"
				},
				{
					"kind": "enum member",
					"line": 262,
					"protection": "public",
					"name": "Removed",
					"comment": " A file or directory was deleted\n"
				},
				{
					"kind": "enum member",
					"line": 264,
					"protection": "public",
					"name": "Modified",
					"comment": " A file or directory was modified\n"
				}
			],
			"name": "DirectoryChangeType",
			"comment": " Specifies the kind of change in a watched directory.\n"
		},
		{
			"kind": "struct",
			"line": 270,
			"protection": "public",
			"members": [
				{
					"kind": "variable",
					"line": 272,
					"protection": "public",
					"type": "DirectoryChangeType",
					"name": "type",
					"comment": " The type of change\n"
				},
				{
					"kind": "variable",
					"line": 275,
					"protection": "public",
					"type": "Path",
					"name": "path",
					"comment": " Path of the file/directory that was changed\n"
				},
				{
					"kind": "function",
					"line": 270,
					"protection": "public",
					"type": "const bool(const(DirectoryChange) p)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 270,
					"protection": "public",
					"type": "bool(const(void*) p, const(void*) q)",
					"name": "__xopEquals"
				}
			],
			"name": "DirectoryChange",
			"comment": " Describes a single change in a watched directory.\n"
		}
	],
	"name": "vibe.core.file",
	"comment": "\n\tFile handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\mimetypes.d",
	"members": [
		{
			"kind": "function",
			"line": 19,
			"protection": "public",
			"type": "string(string filename)",
			"name": "getMimeTypeForFile",
			"comment": "\n\tReturns the standard mime type for the extension of the specified file name.\n\n\tAny unknown file extension will map to \"application/octet-stream\".\n"
		},
		{
			"kind": "function",
			"line": 738,
			"protection": "public",
			"type": "bool(string mimetype)",
			"name": "isCompressedFormat",
			"comment": "\n\tReturns true for a selected but incomplete list of mime-types that are describing a compressed\n\tformat.\n\n\tThis function is useful for avoiding redundant compression.\n"
		}
	],
	"name": "vibe.inet.mimetypes",
	"comment": "\n\tMaps file name extensions to standard mime types.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\core\\signal.d",
	"members": [
		{
			"kind": "function",
			"line": 15,
			"protection": "public",
			"type": "Signal()",
			"name": "createSignal",
			"comment": " Creates a new signal that can be shared between fibers.\n"
		},
		{
			"kind": "interface",
			"line": 24,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 26,
					"protection": "public",
					"type": "const @property int()",
					"name": "emitCount",
					"comment": " A counter that is increased with every emit() call\n"
				},
				{
					"kind": "function",
					"line": 29,
					"protection": "public",
					"type": "void()",
					"name": "emit",
					"comment": " Emits the signal, waking up all owners of the signal.\n"
				},
				{
					"kind": "function",
					"line": 32,
					"protection": "public",
					"type": "void()",
					"name": "wait",
					"comment": " Acquires ownership and waits until the signal is emitted.\n"
				},
				{
					"kind": "function",
					"line": 35,
					"protection": "public",
					"type": "void(int reference_emit_count)",
					"name": "wait",
					"comment": " Acquires ownership and waits until the signal is emitted if no emit has happened since the given reference emit count.\n"
				}
			],
			"interfaces": [
				"EventedObject"
			],
			"name": "Signal",
			"comment": " A cross-fiber signal\n\n\tNote: the ownership can be shared between multiple fibers.\n"
		},
		{
			"kind": "class",
			"line": 38,
			"protection": "public",
			"base": "Exception",
			"members": [
				{
					"kind": "constructor",
					"line": 39,
					"protection": "public",
					"type": "SignalException()",
					"name": "this"
				}
			],
			"name": "SignalException"
		}
	],
	"name": "vibe.core.signal",
	"comment": "\n\tEvented signal-slot mechanism\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\data\\utils.d",
	"members": [
		{
			"kind": "template",
			"line": 13,
			"protection": "public",
			"members": [],
			"name": "isRWPlainField(T,string M)"
		},
		{
			"kind": "template",
			"line": 23,
			"protection": "public",
			"members": [
				{
					"kind": "variable",
					"line": 25,
					"name": "isRWField"
				}
			],
			"name": "isRWField(T,string M)"
		}
	],
	"name": "vibe.data.utils",
	"comment": "\n\tUtility functions for data serialization\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\dist.d",
	"members": [
		{
			"kind": "function",
			"line": 25,
			"protection": "public",
			"type": "void(HttpServerSettings settings, void delegate(HttpServerRequest req, HttpServerResponse res) handler, string balancer_address, ushort balancer_port = cast(ushort)11000)",
			"name": "listenHttpDist",
			"comment": "\n\tListens for HTTP connections on the spefified load balancer using the given HTTP server settings.\n\n\tThis function is usable as direct replacement of\n"
		}
	],
	"name": "vibe.http.dist",
	"comment": "\n\tInterface for the VibeDist load balancer\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\fileserver.d",
	"members": [
		{
			"kind": "class",
			"line": 27,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 28,
					"protection": "public",
					"type": "string",
					"name": "serverPathPrefix"
				},
				{
					"kind": "variable",
					"line": 29,
					"protection": "public",
					"type": "long",
					"name": "maxAge"
				},
				{
					"kind": "variable",
					"line": 30,
					"protection": "public",
					"type": "bool",
					"name": "failIfNotFound"
				},
				{
					"kind": "constructor",
					"line": 32,
					"protection": "public",
					"type": "HttpFileServerSettings()",
					"name": "this"
				},
				{
					"kind": "constructor",
					"line": 34,
					"protection": "public",
					"type": "HttpFileServerSettings(string path_prefix)",
					"name": "this"
				}
			],
			"name": "HttpFileServerSettings",
			"comment": "\n\tConfiguration options for the static file server.\n"
		},
		{
			"kind": "function",
			"line": 43,
			"protection": "public",
			"type": "void delegate(HttpServerRequest req, HttpServerResponse res)(string local_path, HttpFileServerSettings settings = null)",
			"name": "serveStaticFiles",
			"comment": "\n\tReturns a request handler that serves files from the specified directory.\n"
		}
	],
	"name": "vibe.http.fileserver",
	"comment": "\n\tA static HTTP file server.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\server.d",
	"members": [
		{
			"kind": "function",
			"line": 70,
			"protection": "public",
			"type": "void(HttpServerSettings settings, void delegate(HttpServerRequest req, HttpServerResponse res) request_handler)",
			"name": "listenHttp",
			"comment": "\n\n\n\tStarts a HTTP server listening on the specified port.\n\n\trequest_handler will be called for each HTTP request that is made. The\n\tres parameter of the callback then has to be filled with the response\n\tdata.\n\n\trequest_handler can be either HttpServerRequestDelegate/HttpServerRequestFunction\n\tor a class/struct with a member function 'handleRequest' that has the same\n\tsignature.\n\n\tNote that if the application has been started with the --disthost command line\n\tswitch, listenHttp() will automatically listen on the specified VibeDist host\n\tinstead of locally. This allows for a seamless switch from single-host to\n\tmulti-host scenarios without changing the code. If you need to listen locally,\n\tuse listenHttpPlain() instead.\n\n\tParams:\n\t\tsettings = Customizes the HTTP servers functionality.\n\t\trequest_handler = This callback is invoked for each incoming request and is responsible\n\t\t\tfor generating the response.\n"
		},
		{
			"kind": "function",
			"line": 96,
			"protection": "public",
			"type": "void(HttpServerSettings settings, void function(HttpServerRequest req, HttpServerResponse res) request_handler)",
			"name": "listenHttp",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 101,
			"protection": "public",
			"type": "void(HttpServerSettings settings, IHttpServerRequestHandler request_handler)",
			"name": "listenHttp",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 113,
			"protection": "public",
			"type": "void(HttpServerSettings settings, void delegate(HttpServerRequest req, HttpServerResponse res) request_handler)",
			"name": "listenHttpPlain",
			"comment": "\n\tStarts a HTTP server listening on the specified port.\n\n\tThis is the same as listenHttp() except that it does not use a VibeDist host for\n\tremote listening, even if specified on the command line.\n"
		},
		{
			"kind": "template",
			"line": 156,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 156,
					"type": "HttpServerRequestDelegate()",
					"name": "staticTemplate"
				}
			],
			"name": "staticTemplate(string template_file)",
			"comment": "\n\tProvides a HTTP request handler that responds with a static Diet template.\n"
		},
		{
			"kind": "function",
			"line": 170,
			"protection": "public",
			"type": "void delegate(HttpServerRequest req, HttpServerResponse res)(string url)",
			"name": "staticRedirect",
			"comment": "\n\tProvides a HTTP request handler that responds with a static redirection to the specified URL.\n"
		},
		{
			"kind": "function",
			"line": 180,
			"protection": "public",
			"type": "void(string host, ushort port)",
			"name": "setVibeDistHost",
			"comment": "\n\tSets a VibeDist host to register with.\n"
		},
		{
			"kind": "function",
			"line": 186,
			"protection": "public",
			"type": "void()",
			"name": "startListening"
		},
		{
			"kind": "template",
			"line": 216,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 216,
					"type": "void(HttpServerResponse res)",
					"name": "render"
				}
			],
			"name": "render(string template_file,ALIASES...)",
			"comment": "\n\tRenders the given template and makes all ALIASES available to the template.\n\n\tThis currently suffers from multiple DMD bugs - use renderCompat() instead for the time being.\n\n\tYou can call this function as a member of HttpServerResponse using D's uniform function\n\tcall syntax.\n\n\tExamples:\n\t\t---\n\t\tstring title = \"Hello, World!\";\n\t\tint pageNumber = 1;\n\t\tres.render!(\"mytemplate.jd\", title, pageNumber);\n\t\t---\n"
		},
		{
			"kind": "template",
			"line": 226,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 226,
					"type": "void(T condition, HttpStatus statusCode, string message = null)",
					"name": "enforceHttp",
					"comment": "\n\tUtility function that throws a HttpStatusException if the _condition is not met.\n"
				}
			],
			"name": "enforceHttp(T)",
			"comment": "\n\tUtility function that throws a HttpStatusException if the _condition is not met.\n"
		},
		{
			"kind": "alias",
			"line": 237,
			"protection": "public",
			"type": "void delegate(HttpServerRequest req, HttpServerResponse res)",
			"name": "HttpServerRequestDelegate",
			"comment": "\n\n Delegate based request handler\n"
		},
		{
			"kind": "alias",
			"line": 239,
			"protection": "public",
			"type": "void function(HttpServerRequest req, HttpServerResponse res)",
			"name": "HttpServerRequestFunction",
			"comment": " Static function based request handler\n"
		},
		{
			"kind": "interface",
			"line": 241,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 243,
					"protection": "public",
					"type": "void(HttpServerRequest req, HttpServerResponse res)",
					"name": "handleRequest",
					"comment": " Handles incoming HTTP requests\n"
				}
			],
			"name": "IHttpServerRequestHandler",
			"comment": " Interface for class based request handlers\n"
		},
		{
			"kind": "class",
			"line": 247,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 249,
					"protection": "public",
					"type": "int",
					"name": "code",
					"comment": " The HTTP status code\n"
				},
				{
					"kind": "variable",
					"line": 251,
					"protection": "public",
					"type": "string",
					"name": "message",
					"comment": " The error message\n"
				},
				{
					"kind": "variable",
					"line": 253,
					"protection": "public",
					"type": "string",
					"name": "debugMessage",
					"comment": " Extended error message with debug information such as a stack trace\n"
				},
				{
					"kind": "variable",
					"line": 255,
					"protection": "public",
					"type": "object.Throwable",
					"name": "exception",
					"comment": " The error exception, if any\n"
				}
			],
			"name": "HttpServerErrorInfo",
			"comment": " Aggregates all information about an HTTP error status.\n"
		},
		{
			"kind": "alias",
			"line": 259,
			"protection": "public",
			"type": "void delegate(HttpServerRequest req, HttpServerResponse res, HttpServerErrorInfo error)",
			"name": "HttpServerErrorPageHandler",
			"comment": " Delegate type used for user defined error page generator callbacks.\n"
		},
		{
			"kind": "enum",
			"line": 266,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 267,
					"protection": "public",
					"name": "None"
				},
				{
					"kind": "enum member",
					"line": 269,
					"protection": "public",
					"name": "ParseURL",
					"comment": " Fills the .path, .queryString fields in the request\n"
				},
				{
					"kind": "enum member",
					"line": 271,
					"protection": "public",
					"name": "ParseQueryString",
					"comment": " Fills the .query field in the request\n"
				},
				{
					"kind": "enum member",
					"line": 273,
					"protection": "public",
					"name": "ParseFormBody",
					"comment": " Fills the .form field in the request\n"
				},
				{
					"kind": "enum member",
					"line": 275,
					"protection": "public",
					"name": "ParseJsonBody",
					"comment": " Fills the .json field in the request\n"
				},
				{
					"kind": "enum member",
					"line": 277,
					"protection": "public",
					"name": "ParseMultiPartBody",
					"comment": " Enables use of the .nextPart() method in the request\n"
				},
				{
					"kind": "enum member",
					"line": 279,
					"protection": "public",
					"name": "ParseCookies",
					"comment": " Fills the .cookies field in the request\n"
				}
			],
			"name": "HttpServerOption",
			"comment": "\n\tSpecifies optional features of the HTTP server.\n\n\tDisabling unneeded features can speed up the server or reduce its memory usage.\n"
		},
		{
			"kind": "class",
			"line": 288,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 294,
					"protection": "public",
					"type": "ushort",
					"name": "port",
					"comment": " The port on which the HTTP server is listening.\n\n\t\tThe default value is 80. If you are running a SSL enabled server you may want to set this\n\t\tto 443 instead.\n\t\n"
				},
				{
					"kind": "variable",
					"line": 300,
					"protection": "public",
					"type": "string[]",
					"name": "bindAddresses",
					"comment": " The interfaces on which the HTTP server is listening.\n\n\t\tBy default, the server will listen on all IPv4 and IPv6 interfaces.\n\t\n"
				},
				{
					"kind": "variable",
					"line": 307,
					"protection": "public",
					"type": "string",
					"name": "hostName",
					"comment": " Determines the server host name.\n\n\t\tIf multiple servers are listening on the same port, the host name will determine which one\n\t\tgets a request.\n\t\n"
				},
				{
					"kind": "variable",
					"line": 314,
					"protection": "public",
					"type": "HttpServerOption",
					"name": "options",
					"comment": " Configures optional features of the HTTP server\n\n\t\tDisabling unneeded features can improve performance or reduce the server\n\t\tload in case of invalid or unwanted requests (DoS).\n\t\n"
				},
				{
					"kind": "variable",
					"line": 323,
					"protection": "public",
					"type": "Duration",
					"name": "maxRequestTime",
					"comment": " Time of a request after which the connection is closed with an error; not supported yet\n"
				},
				{
					"kind": "variable",
					"line": 326,
					"protection": "public",
					"type": "Duration",
					"name": "keepAliveTimeout",
					"comment": " Maximum time between two request on a keep-alive connection\n"
				},
				{
					"kind": "variable",
					"line": 330,
					"protection": "public",
					"type": "ulong",
					"name": "maxRequestSize",
					"comment": " Maximum number of transferred bytes per request after which the connection is closed with\n an error; not supported yet\n"
				},
				{
					"kind": "variable",
					"line": 335,
					"protection": "public",
					"type": "ulong",
					"name": "maxRequestHeaderSize",
					"comment": "\tMaximum number of transferred bytes for the request header. This includes the request line \n the url and all headers. \n"
				},
				{
					"kind": "variable",
					"line": 337,
					"protection": "public",
					"type": "uint",
					"name": "maxRequestHeaderCount"
				},
				{
					"kind": "variable",
					"line": 340,
					"protection": "public",
					"type": "void delegate(HttpServerRequest req, HttpServerResponse res, HttpServerErrorInfo error)",
					"name": "errorPageHandler",
					"comment": " Sets a custom handler for displaying error pages for HTTP errors\n"
				},
				{
					"kind": "variable",
					"line": 343,
					"protection": "public",
					"type": "string",
					"name": "sslCertFile",
					"comment": " If set, a HTTPS server will be started instead of plain HTTP\n"
				},
				{
					"kind": "variable",
					"line": 345,
					"protection": "public",
					"type": "string",
					"name": "sslKeyFile",
					"comment": " ditto\n"
				},
				{
					"kind": "variable",
					"line": 348,
					"protection": "public",
					"type": "vibe.http.session.SessionStore",
					"name": "sessionStore",
					"comment": " Session management is enabled if a session store instance is provided\n"
				},
				{
					"kind": "variable",
					"line": 349,
					"protection": "public",
					"type": "string",
					"name": "sessionIdCookie"
				},
				{
					"kind": "variable",
					"line": 352,
					"protection": "public",
					"type": "string",
					"name": "serverString",
					"comment": "\n"
				},
				{
					"kind": "variable",
					"line": 362,
					"protection": "public",
					"type": "string",
					"name": "accessLogFormat",
					"comment": " Specifies the format used for the access log.\n\n\t\tThe log format is given using the Apache server syntax. By default NCSA combined is used.\n\n\t\t---\n\t\t\"%h - %u %t \\\"%r\\\" %s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\"\n\t\t---\n\t\n"
				},
				{
					"kind": "variable",
					"line": 365,
					"protection": "public",
					"type": "string",
					"name": "accessLogFile",
					"comment": " Spefifies the name of a file to which access log messages are appended.\n"
				},
				{
					"kind": "variable",
					"line": 368,
					"protection": "public",
					"type": "bool",
					"name": "accessLogToConsole",
					"comment": " If set, access log entries will be output to the console.\n"
				},
				{
					"kind": "function",
					"line": 371,
					"protection": "public",
					"type": "@property HttpServerSettings()",
					"name": "dup",
					"comment": " Returns a duplicate of the settings object.\n"
				}
			],
			"name": "HttpServerSettings",
			"comment": "\n\tContains all settings for configuring a basic HTTP server.\n\n\tThe defaults are sufficient for most normal uses.\n"
		},
		{
			"kind": "class",
			"line": 387,
			"protection": "public",
			"base": "Exception",
			"members": [
				{
					"kind": "constructor",
					"line": 392,
					"protection": "public",
					"type": "HttpStatusException(int status, string message = null, Throwable next = null, string file = __FILE__, int line = __LINE__)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 399,
					"protection": "public",
					"type": "const @property int()",
					"name": "status",
					"comment": " The HTTP status code\n"
				}
			],
			"name": "HttpStatusException",
			"comment": "\n\tThrowing this exception from within a request handler will produce a matching error page.\n"
		},
		{
			"kind": "class",
			"line": 405,
			"protection": "public",
			"base": "HttpRequest",
			"members": [
				{
					"kind": "variable",
					"line": 408,
					"protection": "public",
					"type": "string",
					"name": "peer",
					"comment": " The IP address of the client\n"
				},
				{
					"kind": "variable",
					"line": 414,
					"protection": "public",
					"type": "string",
					"name": "path",
					"comment": " The _path part of the URL.\n\n\t\t\tRemarks: This field is only set if HttpServerOption.ParseURL is set.\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 420,
					"protection": "public",
					"type": "string",
					"name": "username",
					"comment": " The user name part of the URL, if present.\n\n\t\t\tRemarks: This field is only set if HttpServerOption.ParseURL is set.\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 426,
					"protection": "public",
					"type": "string",
					"name": "password",
					"comment": " The _password part of the URL, if present.\n\n\t\t\tRemarks: This field is only set if HttpServerOption.ParseURL is set.\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 432,
					"protection": "public",
					"type": "string",
					"name": "queryString",
					"comment": " The _query string part of the URL.\n\n\t\t\tRemarks: This field is only set if HttpServerOption.ParseURL is set.\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 438,
					"protection": "public",
					"type": "string[string]",
					"name": "cookies",
					"comment": " Contains the list of _cookies that are stored on the client.\n\n\t\t\tRemarks: This field is only set if HttpServerOption.ParseCookies is set.\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 444,
					"protection": "public",
					"type": "string[string]",
					"name": "query",
					"comment": " Contains all _form fields supplied using the _query string.\n\n\t\t\tRemarks: This field is only set if HttpServerOption.ParseQueryString is set.\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 452,
					"protection": "public",
					"type": "string[string]",
					"name": "params",
					"comment": " A map of general parameters for the request.\n\n\t\t\tThis map is supposed to be used by middleware functionality to store\n\t\t\tinformation for later stages. For example vibe.http.router.UrlRouter uses this map\n\t\t\tto store the value of any named placeholders.\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 460,
					"protection": "public",
					"type": "vibe.stream.stream.InputStream",
					"name": "bodyReader",
					"comment": " Supplies the request body as a stream.\n\n\t\t\tIf the body has not already been read because one of the body parsers has\n\t\t\tprocessed it (e.g. HttpServerOption.ParseFormBody), it can be read from\n\t\t\tthis stream.\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 469,
					"protection": "public",
					"type": "Json",
					"name": "json",
					"comment": " Contains the parsed Json for a JSON request.\n\n\t\t\tRemarks:\n\t\t\t\tThis field is only set if HttpServerOption.ParseJsonBody is set.\n\n\t\t\t\tA JSON request must have the Content-Type \"application/json\".\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 479,
					"protection": "public",
					"type": "string[string]",
					"name": "form",
					"comment": " Contains the parsed parameters of a HTML POST _form request.\n\n\t\t\tRemarks:\n\t\t\t\tThis field is only set if HttpServerOption.ParseFormBody is set.\n\n\t\t\t\tA form request must either have the Content-Type\n\t\t\t\t\"application/x-www-form-urlencoded\" or \"multipart/form-data\".\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 487,
					"protection": "public",
					"type": "FilePart[string]",
					"name": "files",
					"comment": " Contains information about any uploaded file for a HTML _form request.\n\n\t\t\tRemarks:\n\t\t\t\tThis field is only set if HttpServerOption.ParseFormBody is set amd\n\t\t\t\tif the Content-Type is \"multipart/form-data\".\n\t\t\n"
				},
				{
					"kind": "variable",
					"line": 497,
					"protection": "public",
					"type": "vibe.http.session.Session",
					"name": "session",
					"comment": " The current Session object.\n\n\t\t\tThis field is set if HttpServerResponse.startSession() has been called\n\t\t\ton a previous response and if the client has sent back the matching\n\t\t\tcookie.\n\n\t\t\tRemarks: Requires the HttpServerOption.ParseCookies option.\n\t\t\n"
				},
				{
					"kind": "constructor",
					"line": 503,
					"protection": "public",
					"type": "HttpServerRequest()",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 508,
					"protection": "public",
					"type": "inout @property inout(SysTime)()",
					"name": "timeCreated"
				},
				{
					"kind": "function",
					"line": 510,
					"protection": "public",
					"type": "MultiPart()",
					"name": "nextPart"
				},
				{
					"kind": "function",
					"line": 523,
					"protection": "public",
					"type": "const @property string()",
					"name": "rootDir",
					"comment": " The relative path the the root folder.\n\n\t\tUsing this function instead of absolute URLs for embedded links can be\n\t\tuseful to avoid dead link when the site is piped through a\n\t\treverse-proxy.\n\n\t\tThe returned string always ends with a slash.\n\t\n"
				}
			],
			"name": "HttpServerRequest",
			"comment": "\n\tRepresents a HTTP request as received by the server side.\n"
		},
		{
			"kind": "class",
			"line": 534,
			"protection": "public",
			"base": "HttpResponse",
			"members": [
				{
					"kind": "constructor",
					"line": 550,
					"protection": "public",
					"type": "HttpServerResponse(Stream conn, HttpServerSettings settings, Allocator req_alloc)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 558,
					"protection": "public",
					"type": "@property SysTime()",
					"name": "timeFinalized"
				},
				{
					"kind": "function",
					"line": 562,
					"protection": "public",
					"type": "const @property bool()",
					"name": "headerWritten",
					"comment": " Determines if the HTTP header has already been written.\n\t\n"
				},
				{
					"kind": "function",
					"line": 566,
					"protection": "public",
					"type": "const bool()",
					"name": "isHeadResponse",
					"comment": " Determines if the response does not need a body.\n\t\n"
				},
				{
					"kind": "function",
					"line": 569,
					"protection": "public",
					"type": "void(const(ubyte[]) data, string content_type = null)",
					"name": "writeBody",
					"comment": " Writes the hole response body at once.\n"
				},
				{
					"kind": "function",
					"line": 576,
					"protection": "public",
					"type": "void(string data, string content_type = \"text/plain\")",
					"name": "writeBody",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 582,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 582,
							"type": "void(T data, int status = HttpStatus.OK)",
							"name": "writeJsonBody",
							"comment": " Writes a JSON message with the specified status\n"
						}
					],
					"name": "writeJsonBody(T)",
					"comment": " Writes a JSON message with the specified status\n"
				},
				{
					"kind": "function",
					"line": 590,
					"protection": "public",
					"type": "void()",
					"name": "writeVoidBody",
					"comment": " Writes the response with no body.\n\t\n"
				},
				{
					"kind": "function",
					"line": 605,
					"protection": "public",
					"type": "@property OutputStream()",
					"name": "bodyWriter",
					"comment": " A stream for writing the body of the HTTP response.\n\n\t\tNote that after 'bodyWriter' has been accessed for the first time, it\n\t\tis not allowed to change any header or the status code of the response.\n\t\n"
				},
				{
					"kind": "function",
					"line": 655,
					"protection": "public",
					"type": "void(string url, int status = 302)",
					"name": "redirect",
					"comment": " Sends a redirect request to the client.\n"
				},
				{
					"kind": "function",
					"line": 665,
					"protection": "public",
					"type": "Stream(string protocol)",
					"name": "switchProtocol",
					"comment": " Special method sending a SWITCHING_PROTOCOLS response to the client.\n\t\n"
				},
				{
					"kind": "function",
					"line": 673,
					"protection": "public",
					"type": "Cookie(string name, string value)",
					"name": "setCookie",
					"comment": " Sets the specified cookie value.\n"
				},
				{
					"kind": "function",
					"line": 687,
					"protection": "public",
					"type": "Session()",
					"name": "startSession",
					"comment": "\n\t\tInitiates a new session.\n\n\t\tThe session is stored in the SessionStore that was specified when\n\t\tcreating the server. Depending on this, the session can be persistent\n\t\tor temporary and specific to this server instance.\n\t\n"
				},
				{
					"kind": "function",
					"line": 698,
					"protection": "public",
					"type": "void()",
					"name": "terminateSession",
					"comment": "\n\t\tTerminates the current session (if any).\n\t\n"
				},
				{
					"kind": "function",
					"line": 705,
					"protection": "public",
					"type": "@property ulong()",
					"name": "bytesWritten"
				},
				{
					"kind": "template",
					"line": 729,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 729,
							"type": "void(Variant[] args...)",
							"name": "renderCompat",
							"comment": "\n\t\tCompatibility version of render() that takes a list of explicit names and types instead\n\t\tof variable aliases.\n\n\t\tThis version of render() works around a compiler bug in DMD (Issue 2962). You should use\n\t\tthis method instead of render() as long as this bug is not fixed.\n\n\t\tNote that the variables are copied and not referenced inside of the template - any\n\t\tmodification you do on them from within the template will get lost.\n\n\t\tExamples:\n\t\t\t---\n\t\t\tstring title = \"Hello, World!\";\n\t\t\tint pageNumber = 1;\n\t\t\tres.renderCompat!(\"mytemplate.jd\",\n\t\t\t\tstring, \"title\",\n\t\t\t\tint, \"pageNumber\")\n\t\t\t\t(Variant(title), Variant(pageNumber));\n\t\t\t---\n\t\n"
						}
					],
					"name": "renderCompat(string template_file,TYPES_AND_NAMES...)",
					"comment": "\n\t\tCompatibility version of render() that takes a list of explicit names and types instead\n\t\tof variable aliases.\n\n\t\tThis version of render() works around a compiler bug in DMD (Issue 2962). You should use\n\t\tthis method instead of render() as long as this bug is not fixed.\n\n\t\tNote that the variables are copied and not referenced inside of the template - any\n\t\tmodification you do on them from within the template will get lost.\n\n\t\tExamples:\n\t\t\t---\n\t\t\tstring title = \"Hello, World!\";\n\t\t\tint pageNumber = 1;\n\t\t\tres.renderCompat!(\"mytemplate.jd\",\n\t\t\t\tstring, \"title\",\n\t\t\t\tint, \"pageNumber\")\n\t\t\t\t(Variant(title), Variant(pageNumber));\n\t\t\t---\n\t\n"
				}
			],
			"name": "HttpServerResponse",
			"comment": "\n\tRepresents a HTTP response as sent from the server side.\n"
		},
		{
			"kind": "template",
			"line": 1200,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 1200,
					"type": "string(Allocator alloc, string fmt, ARGS args)",
					"name": "formatAlloc"
				}
			],
			"name": "formatAlloc(ARGS...)"
		}
	],
	"name": "vibe.http.server",
	"comment": "\n\tA HTTP 1.1/1.0 server implementation.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\counting.d",
	"members": [
		{
			"kind": "class",
			"line": 19,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 34,
					"protection": "public",
					"type": "LimitedInputStream(InputStream stream, ulong byte_limit, bool silent_limit = false)",
					"name": "this",
					"comment": " Constructs a limited stream from an existing input stream.\n\n\t\tParams:\n\t\t\tstream: the input stream to be wrapped\n\t\t\tbyte_limit: the maximum number of bytes readable from the constructed stream\n\t\t\tsilent_limit: if set, the stream will behave exactly like the original stream, but\n\t\t\t\twill throw an exception as soon as the limit is reached.\n\t\n"
				},
				{
					"kind": "function",
					"line": 43,
					"protection": "public",
					"type": "inout @property inout(InputStream)()",
					"name": "sourceStream",
					"comment": " The stream that is wrapped by this one\n"
				},
				{
					"kind": "function",
					"line": 45,
					"protection": "public",
					"type": "@property bool()",
					"name": "empty"
				},
				{
					"kind": "function",
					"line": 47,
					"protection": "public",
					"type": "@property ulong()",
					"name": "leastSize"
				},
				{
					"kind": "function",
					"line": 49,
					"protection": "public",
					"type": "@property bool()",
					"name": "dataAvailableForRead"
				},
				{
					"kind": "function",
					"line": 51,
					"protection": "public",
					"type": "const(ubyte)[]()",
					"name": "peek"
				},
				{
					"kind": "function",
					"line": 53,
					"protection": "public",
					"type": "void(ubyte[] dst)",
					"name": "read"
				}
			],
			"interfaces": [
				"InputStream"
			],
			"name": "LimitedInputStream",
			"comment": "\n\tWraps an existing stream, limiting the amount of data that can be read.\n"
		},
		{
			"kind": "class",
			"line": 69,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 74,
					"protection": "public",
					"type": "CountingOutputStream(OutputStream stream)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 80,
					"protection": "public",
					"type": "const @property ulong()",
					"name": "bytesWritten"
				},
				{
					"kind": "function",
					"line": 82,
					"protection": "public",
					"type": "void(const(ubyte[]) bytes, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 88,
					"protection": "public",
					"type": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 93,
					"protection": "public",
					"type": "void()",
					"name": "flush"
				},
				{
					"kind": "function",
					"line": 94,
					"protection": "public",
					"type": "void()",
					"name": "finalize"
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "CountingOutputStream",
			"comment": "\n\tWraps an existing output stream, counting the bytes that are written.\n"
		},
		{
			"kind": "class",
			"line": 100,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 105,
					"protection": "public",
					"type": "CountingInputStream(InputStream stream)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 111,
					"protection": "public",
					"type": "const @property ulong()",
					"name": "bytesRead"
				},
				{
					"kind": "function",
					"line": 113,
					"protection": "public",
					"type": "@property bool()",
					"name": "empty"
				},
				{
					"kind": "function",
					"line": 114,
					"protection": "public",
					"type": "@property ulong()",
					"name": "leastSize"
				},
				{
					"kind": "function",
					"line": 115,
					"protection": "public",
					"type": "@property bool()",
					"name": "dataAvailableForRead"
				},
				{
					"kind": "function",
					"line": 116,
					"protection": "public",
					"type": "const(ubyte)[]()",
					"name": "peek"
				},
				{
					"kind": "function",
					"line": 118,
					"protection": "public",
					"type": "void(ubyte[] dst)",
					"name": "read"
				}
			],
			"interfaces": [
				"InputStream"
			],
			"name": "CountingInputStream",
			"comment": "\n\tWraps an existing input stream, counting the bytes that are written.\n"
		},
		{
			"kind": "class",
			"line": 125,
			"protection": "public",
			"base": "Exception",
			"members": [
				{
					"kind": "constructor",
					"line": 128,
					"protection": "public",
					"type": "LimitException(string message, ulong limit, Throwable next = null, string file = __FILE__, int line = __LINE__)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 134,
					"protection": "public",
					"type": "const @property ulong()",
					"name": "limit",
					"comment": " The byte limit of the stream that emitted the exception\n"
				}
			],
			"name": "LimitException"
		}
	],
	"name": "vibe.stream.counting",
	"comment": "\n\tWrapper streams which count the number of bytes or limit the stream based on the number of\n\ttransferred bytes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\core\\log.d",
	"members": [
		{
			"kind": "function",
			"line": 26,
			"protection": "public",
			"type": "nothrow void(LogLevel level)",
			"name": "setLogLevel",
			"comment": " Sets the minimum log level to be printed.\n"
		},
		{
			"kind": "function",
			"line": 32,
			"protection": "public",
			"type": "void(bool enable)",
			"name": "setPlainLogging",
			"comment": " Disables output of thread/task ids with each log message\n"
		},
		{
			"kind": "function",
			"line": 38,
			"protection": "public",
			"type": "void(string filename, LogLevel min_level = cast(LogLevel)4)",
			"name": "setLogFile",
			"comment": " Sets a log file for disk logging\n"
		},
		{
			"kind": "template",
			"line": 51,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 51,
					"type": "nothrow void(string fmt, auto ref T args)",
					"name": "logTrace",
					"comment": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n"
				}
			],
			"name": "logTrace(T...)",
			"comment": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n"
		},
		{
			"kind": "template",
			"line": 53,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 53,
					"type": "nothrow void(string fmt, auto ref T args)",
					"name": "logDebug",
					"comment": " ditto\n"
				}
			],
			"name": "logDebug(T...)",
			"comment": " ditto\n"
		},
		{
			"kind": "template",
			"line": 55,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 55,
					"type": "nothrow void(string fmt, auto ref T args)",
					"name": "logInfo",
					"comment": " ditto\n"
				}
			],
			"name": "logInfo(T...)",
			"comment": " ditto\n"
		},
		{
			"kind": "template",
			"line": 57,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 57,
					"type": "nothrow void(string fmt, auto ref T args)",
					"name": "logWarn",
					"comment": " ditto\n"
				}
			],
			"name": "logWarn(T...)",
			"comment": " ditto\n"
		},
		{
			"kind": "template",
			"line": 59,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 59,
					"type": "nothrow void(string fmt, auto ref T args)",
					"name": "logError",
					"comment": " ditto\n"
				}
			],
			"name": "logError(T...)",
			"comment": " ditto\n"
		},
		{
			"kind": "template",
			"line": 62,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 62,
					"type": "nothrow void(LogLevel level, string fmt, auto ref T args)",
					"name": "log",
					"comment": " ditto\n"
				}
			],
			"name": "log(T...)",
			"comment": " ditto\n"
		},
		{
			"kind": "enum",
			"line": 113,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 114,
					"protection": "public",
					"name": "Trace"
				},
				{
					"kind": "enum member",
					"line": 115,
					"protection": "public",
					"name": "Debug"
				},
				{
					"kind": "enum member",
					"line": 116,
					"protection": "public",
					"name": "Info"
				},
				{
					"kind": "enum member",
					"line": 117,
					"protection": "public",
					"name": "Warn"
				},
				{
					"kind": "enum member",
					"line": 118,
					"protection": "public",
					"name": "Error"
				},
				{
					"kind": "enum member",
					"line": 119,
					"protection": "public",
					"name": "Fatal"
				},
				{
					"kind": "enum member",
					"line": 120,
					"protection": "public",
					"name": "None"
				}
			],
			"name": "LogLevel",
			"comment": " Specifies the log level for a particular log message.\n"
		}
	],
	"name": "vibe.core.log",
	"comment": "\n\tCentral logging facility for vibe.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\db\\redis\\redis.d",
	"members": [
		{
			"kind": "class",
			"line": 12,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 22,
					"protection": "public",
					"type": "RedisReply(TcpConnection conn)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 65,
					"protection": "public",
					"type": "@property bool()",
					"name": "hasNext"
				},
				{
					"kind": "template",
					"line": 67,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 67,
							"type": "T()",
							"name": "next"
						}
					],
					"name": "next(T : E[],E)"
				}
			],
			"name": "RedisReply"
		},
		{
			"kind": "class",
			"line": 83,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 91,
					"protection": "public",
					"type": "RedisClient()",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 93,
					"protection": "public",
					"type": "void(string host = \"127.0.0.1\", ushort port = cast(ushort)6379)",
					"name": "connect"
				},
				{
					"kind": "template",
					"line": 99,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 99,
							"type": "ubyte[][](ARGS args)",
							"name": "argsToUbyte"
						}
					],
					"name": "argsToUbyte(ARGS...)"
				},
				{
					"kind": "function",
					"line": 110,
					"protection": "public",
					"type": "uint(string[] keys...)",
					"name": "del"
				},
				{
					"kind": "function",
					"line": 114,
					"protection": "public",
					"type": "bool(string key)",
					"name": "exists"
				},
				{
					"kind": "function",
					"line": 118,
					"protection": "public",
					"type": "bool(string key, uint seconds)",
					"name": "expire"
				},
				{
					"kind": "function",
					"line": 122,
					"protection": "public",
					"type": "bool(string key, long timestamp)",
					"name": "expireAt"
				},
				{
					"kind": "function",
					"line": 126,
					"protection": "public",
					"type": "RedisReply(string pattern)",
					"name": "keys"
				},
				{
					"kind": "function",
					"line": 130,
					"protection": "public",
					"type": "bool(string key, string db)",
					"name": "move"
				},
				{
					"kind": "function",
					"line": 134,
					"protection": "public",
					"type": "bool(string key)",
					"name": "persists"
				},
				{
					"kind": "function",
					"line": 140,
					"protection": "public",
					"type": "string()",
					"name": "randomKey"
				},
				{
					"kind": "function",
					"line": 144,
					"protection": "public",
					"type": "void(string key, string newkey)",
					"name": "rename"
				},
				{
					"kind": "function",
					"line": 148,
					"protection": "public",
					"type": "bool(string key, string newkey)",
					"name": "renameNX"
				},
				{
					"kind": "function",
					"line": 154,
					"protection": "public",
					"type": "uint(string key)",
					"name": "ttl"
				},
				{
					"kind": "function",
					"line": 158,
					"protection": "public",
					"type": "string(string key)",
					"name": "type"
				},
				{
					"kind": "template",
					"line": 168,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 168,
							"type": "size_t(string key, T suffix)",
							"name": "append"
						}
					],
					"name": "append(T : E[],E)"
				},
				{
					"kind": "function",
					"line": 172,
					"protection": "public",
					"type": "int(string key, int value = 1)",
					"name": "decr"
				},
				{
					"kind": "template",
					"line": 176,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 176,
							"type": "T(string key)",
							"name": "get"
						}
					],
					"name": "get(T : E[],E)"
				},
				{
					"kind": "function",
					"line": 180,
					"protection": "public",
					"type": "bool(string key, uint offset)",
					"name": "getBit"
				},
				{
					"kind": "template",
					"line": 184,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 184,
							"type": "T(string key, size_t start, size_t end)",
							"name": "getRange"
						}
					],
					"name": "getRange(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 188,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 188,
							"type": "T(string key, T value)",
							"name": "getSet"
						}
					],
					"name": "getSet(T : E[],E)"
				},
				{
					"kind": "function",
					"line": 192,
					"protection": "public",
					"type": "int(string key, int value = 1)",
					"name": "incr"
				},
				{
					"kind": "function",
					"line": 196,
					"protection": "public",
					"type": "RedisReply(string[] keys)",
					"name": "mget"
				},
				{
					"kind": "template",
					"line": 200,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 200,
							"type": "void(ARGS args)",
							"name": "mset"
						}
					],
					"name": "mset(ARGS...)"
				},
				{
					"kind": "template",
					"line": 204,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 204,
							"type": "bool(ARGS args)",
							"name": "msetNX"
						}
					],
					"name": "msetNX(ARGS...)"
				},
				{
					"kind": "template",
					"line": 208,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 208,
							"type": "void(string key, T value)",
							"name": "set"
						}
					],
					"name": "set(T : E[],E)"
				},
				{
					"kind": "function",
					"line": 212,
					"protection": "public",
					"type": "bool(string key, uint offset, bool value)",
					"name": "setBit"
				},
				{
					"kind": "template",
					"line": 216,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 216,
							"type": "void(string key, size_t seconds, T value)",
							"name": "setEX"
						}
					],
					"name": "setEX(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 221,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 221,
							"type": "bool(string key, T value)",
							"name": "setNX"
						}
					],
					"name": "setNX(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 225,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 225,
							"type": "size_t(string key, size_t offset, T value)",
							"name": "setRange"
						}
					],
					"name": "setRange(T : E[],E)"
				},
				{
					"kind": "function",
					"line": 229,
					"protection": "public",
					"type": "uint(string key)",
					"name": "strlen"
				},
				{
					"kind": "function",
					"line": 237,
					"protection": "public",
					"type": "uint(string key, string[] fields...)",
					"name": "hdel"
				},
				{
					"kind": "function",
					"line": 242,
					"protection": "public",
					"type": "bool(string key, string field)",
					"name": "hexists"
				},
				{
					"kind": "template",
					"line": 246,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 246,
							"type": "T(string key, string field)",
							"name": "hget"
						}
					],
					"name": "hget(T : E[],E)"
				},
				{
					"kind": "function",
					"line": 250,
					"protection": "public",
					"type": "RedisReply(string key)",
					"name": "hgetAll"
				},
				{
					"kind": "function",
					"line": 254,
					"protection": "public",
					"type": "int(string key, string field, int value = 1)",
					"name": "hincr"
				},
				{
					"kind": "function",
					"line": 258,
					"protection": "public",
					"type": "RedisReply(string key)",
					"name": "hkeys"
				},
				{
					"kind": "function",
					"line": 262,
					"protection": "public",
					"type": "uint(string key)",
					"name": "hlen"
				},
				{
					"kind": "function",
					"line": 266,
					"protection": "public",
					"type": "RedisReply(string key, string[] fields...)",
					"name": "hmget"
				},
				{
					"kind": "template",
					"line": 271,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 271,
							"type": "void(string key, ARGS args)",
							"name": "hmset"
						}
					],
					"name": "hmset(ARGS...)"
				},
				{
					"kind": "template",
					"line": 276,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 276,
							"type": "bool(string key, ARGS args)",
							"name": "hmsetNX"
						}
					],
					"name": "hmsetNX(ARGS...)"
				},
				{
					"kind": "function",
					"line": 281,
					"protection": "public",
					"type": "RedisReply(string key)",
					"name": "hvals"
				},
				{
					"kind": "template",
					"line": 285,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 285,
							"type": "T(string key, size_t index)",
							"name": "lindex"
						}
					],
					"name": "lindex(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 289,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 289,
							"type": "size_t(string key, T1 pivot, T2 value)",
							"name": "linsertBefore"
						}
					],
					"name": "linsertBefore(T1,T2)"
				},
				{
					"kind": "template",
					"line": 293,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 293,
							"type": "size_t(string key, T1 pivot, T2 value)",
							"name": "linsertAfter"
						}
					],
					"name": "linsertAfter(T1,T2)"
				},
				{
					"kind": "function",
					"line": 297,
					"protection": "public",
					"type": "uint(string key)",
					"name": "llen"
				},
				{
					"kind": "template",
					"line": 301,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 301,
							"type": "T(string key)",
							"name": "lpop"
						}
					],
					"name": "lpop(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 305,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 305,
							"type": "size_t(string key, ARGS args)",
							"name": "lpush"
						}
					],
					"name": "lpush(ARGS...)"
				},
				{
					"kind": "template",
					"line": 310,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 310,
							"type": "size_t(string key, T value)",
							"name": "lpushX"
						}
					],
					"name": "lpushX(ARGS...)"
				},
				{
					"kind": "function",
					"line": 314,
					"protection": "public",
					"type": "RedisReply(string key, uint start, uint stop)",
					"name": "lrange"
				},
				{
					"kind": "template",
					"line": 318,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 318,
							"type": "size_t(string key, size_t count, T value)",
							"name": "lrem"
						}
					],
					"name": "lrem(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 322,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 322,
							"type": "void(string key, size_t index, T value)",
							"name": "lset"
						}
					],
					"name": "lset(T : E[],E)"
				},
				{
					"kind": "function",
					"line": 326,
					"protection": "public",
					"type": "void(string key, uint start, uint stop)",
					"name": "ltrim"
				},
				{
					"kind": "template",
					"line": 330,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 330,
							"type": "T(string key)",
							"name": "rpop"
						}
					],
					"name": "rpop(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 334,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 334,
							"type": "T(string key)",
							"name": "lpop"
						}
					],
					"name": "lpop(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 338,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 338,
							"type": "T(string key, string destination)",
							"name": "rpoplpush"
						}
					],
					"name": "rpoplpush(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 346,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 346,
							"type": "size_t(string key, ARGS args)",
							"name": "sadd"
						}
					],
					"name": "sadd(ARGS...)"
				},
				{
					"kind": "function",
					"line": 351,
					"protection": "public",
					"type": "uint(string key)",
					"name": "scard"
				},
				{
					"kind": "function",
					"line": 355,
					"protection": "public",
					"type": "RedisReply(string[] keys...)",
					"name": "sdiff"
				},
				{
					"kind": "function",
					"line": 359,
					"protection": "public",
					"type": "uint(string destination, string[] keys...)",
					"name": "sdiffStore"
				},
				{
					"kind": "function",
					"line": 364,
					"protection": "public",
					"type": "RedisReply(string[] keys)",
					"name": "sinter"
				},
				{
					"kind": "function",
					"line": 368,
					"protection": "public",
					"type": "uint(string destination, string[] keys...)",
					"name": "sinterStore"
				},
				{
					"kind": "template",
					"line": 373,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 373,
							"type": "bool(string key, T member)",
							"name": "sisMember"
						}
					],
					"name": "sisMember(T : E[],E)"
				},
				{
					"kind": "function",
					"line": 377,
					"protection": "public",
					"type": "bool(string key)",
					"name": "smembers"
				},
				{
					"kind": "template",
					"line": 381,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 381,
							"type": "bool(string source, string destination, T member)",
							"name": "smove"
						}
					],
					"name": "smove(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 385,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 385,
							"type": "T(string key)",
							"name": "spop"
						}
					],
					"name": "spop(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 389,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 389,
							"type": "T(string key)",
							"name": "srandMember"
						}
					],
					"name": "srandMember(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 393,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 393,
							"type": "size_t(string key, ARGS args)",
							"name": "srem"
						}
					],
					"name": "srem(ARGS...)"
				},
				{
					"kind": "function",
					"line": 398,
					"protection": "public",
					"type": "RedisReply(string[] keys...)",
					"name": "sunion"
				},
				{
					"kind": "function",
					"line": 402,
					"protection": "public",
					"type": "uint(string[] keys...)",
					"name": "sunionStore"
				},
				{
					"kind": "template",
					"line": 410,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 410,
							"type": "size_t(string key, ARGS args)",
							"name": "zadd"
						}
					],
					"name": "zadd(ARGS...)"
				},
				{
					"kind": "function",
					"line": 415,
					"protection": "public",
					"type": "uint(string key)",
					"name": "Zcard"
				},
				{
					"kind": "function",
					"line": 419,
					"protection": "public",
					"type": "uint(string key, double min, double max)",
					"name": "zcount"
				},
				{
					"kind": "function",
					"line": 423,
					"protection": "public",
					"type": "double(string key, double value, string member)",
					"name": "zincrby"
				},
				{
					"kind": "function",
					"line": 429,
					"protection": "public",
					"type": "RedisReply(string key, uint start, uint end, bool withScores = false)",
					"name": "zrange"
				},
				{
					"kind": "function",
					"line": 437,
					"protection": "public",
					"type": "int(string key, string member)",
					"name": "zrank"
				},
				{
					"kind": "function",
					"line": 441,
					"protection": "public",
					"type": "uint(string key, string[] members...)",
					"name": "zrem"
				},
				{
					"kind": "function",
					"line": 446,
					"protection": "public",
					"type": "uint(string key, int start, int stop)",
					"name": "zremRangeByRank"
				},
				{
					"kind": "function",
					"line": 450,
					"protection": "public",
					"type": "uint(string key, double min, double max)",
					"name": "zremRangeByScore"
				},
				{
					"kind": "function",
					"line": 454,
					"protection": "public",
					"type": "RedisReply(string key, uint start, uint end, bool withScores = false)",
					"name": "zrevRange"
				},
				{
					"kind": "function",
					"line": 460,
					"protection": "public",
					"type": "RedisReply(string key, double min, double max, bool withScores = false)",
					"name": "zrevRangeByScore"
				},
				{
					"kind": "function",
					"line": 466,
					"protection": "public",
					"type": "int(string key, string member)",
					"name": "zrevRank"
				},
				{
					"kind": "function",
					"line": 471,
					"protection": "public",
					"type": "RedisReply(string key, string member)",
					"name": "zscore"
				},
				{
					"kind": "function",
					"line": 488,
					"protection": "public",
					"type": "void(string password)",
					"name": "auth"
				},
				{
					"kind": "template",
					"line": 492,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 492,
							"type": "T(T data)",
							"name": "echo"
						}
					],
					"name": "echo(T : E[],E)"
				},
				{
					"kind": "function",
					"line": 496,
					"protection": "public",
					"type": "void()",
					"name": "ping"
				},
				{
					"kind": "function",
					"line": 500,
					"protection": "public",
					"type": "void()",
					"name": "quit"
				},
				{
					"kind": "function",
					"line": 503,
					"protection": "public",
					"type": "void(uint db_index)",
					"name": "select"
				},
				{
					"kind": "template",
					"line": 514,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 514,
							"type": "T(string parameter)",
							"name": "getConfig"
						}
					],
					"name": "getConfig(T : E[],E)"
				},
				{
					"kind": "template",
					"line": 518,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 518,
							"type": "void(string parameter, T value)",
							"name": "setConfig"
						}
					],
					"name": "setConfig(T : E[],E)"
				},
				{
					"kind": "function",
					"line": 522,
					"protection": "public",
					"type": "void()",
					"name": "configResetStat"
				},
				{
					"kind": "function",
					"line": 526,
					"protection": "public",
					"type": "uint()",
					"name": "dbSize"
				},
				{
					"kind": "function",
					"line": 533,
					"protection": "public",
					"type": "void()",
					"name": "flushAll"
				},
				{
					"kind": "function",
					"line": 537,
					"protection": "public",
					"type": "void()",
					"name": "flushDB"
				},
				{
					"kind": "function",
					"line": 541,
					"protection": "public",
					"type": "string()",
					"name": "info"
				},
				{
					"kind": "function",
					"line": 545,
					"protection": "public",
					"type": "long()",
					"name": "lastSave"
				},
				{
					"kind": "function",
					"line": 551,
					"protection": "public",
					"type": "void()",
					"name": "save"
				},
				{
					"kind": "function",
					"line": 555,
					"protection": "public",
					"type": "void()",
					"name": "shutdown"
				},
				{
					"kind": "function",
					"line": 559,
					"protection": "public",
					"type": "void(string host, ushort port)",
					"name": "slaveOf"
				},
				{
					"kind": "template",
					"line": 567,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 567,
							"type": "T(string command, in ubyte[][] args...)",
							"name": "request"
						}
					],
					"name": "request(T = RedisReply)"
				}
			],
			"name": "RedisClient"
		}
	],
	"name": "vibe.db.redis.redis"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\log.d",
	"members": [
		{
			"kind": "class",
			"line": 20,
			"protection": "public",
			"base": "HttpLogger",
			"members": [
				{
					"kind": "constructor",
					"line": 21,
					"protection": "public",
					"type": "HttpConsoleLogger(HttpServerSettings settings, string format)",
					"name": "this"
				}
			],
			"name": "HttpConsoleLogger"
		},
		{
			"kind": "class",
			"line": 32,
			"protection": "public",
			"base": "HttpLogger",
			"members": [
				{
					"kind": "constructor",
					"line": 37,
					"protection": "public",
					"type": "HttpFileLogger(HttpServerSettings settings, string format, string filename)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 43,
					"protection": "public",
					"type": "void()",
					"name": "close"
				}
			],
			"name": "HttpFileLogger"
		},
		{
			"kind": "class",
			"line": 57,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 63,
					"protection": "public",
					"type": "HttpLogger(HttpServerSettings settings, string format)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 69,
					"protection": "public",
					"type": "void()",
					"name": "close"
				},
				{
					"kind": "function",
					"line": 71,
					"protection": "public",
					"type": "void(HttpServerRequest req, HttpServerResponse res)",
					"name": "log"
				}
			],
			"name": "HttpLogger"
		},
		{
			"kind": "function",
			"line": 80,
			"protection": "public",
			"type": "string(string format, HttpServerRequest req, HttpServerResponse res, HttpServerSettings settings)",
			"name": "formatApacheLog"
		}
	],
	"name": "vibe.http.log",
	"comment": "\n\tA HTTP 1.1/1.0 server implementation.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\cursor.d",
	"members": [
		{
			"kind": "struct",
			"line": 25,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 50,
					"protection": "public",
					"type": "bool()",
					"name": "empty",
					"comment": "\n\t\tReturns true if there are more documents for this cursor.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n"
				},
				{
					"kind": "function",
					"line": 57,
					"protection": "public",
					"type": "int(int delegate(ref Bson obj) del)",
					"name": "opApply",
					"comment": "\n\t\tIterates over all remaining documents.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n"
				},
				{
					"kind": "function",
					"line": 74,
					"protection": "public",
					"type": "int(int delegate(ref uint idx, ref Bson obj) del)",
					"name": "opApply",
					"comment": "\n\t\tIterates over all remaining documents.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n"
				},
				{
					"kind": "function",
					"line": 25,
					"protection": "public",
					"type": "const void(ref const(MongoCursor) p)",
					"name": "__cpctor"
				},
				{
					"kind": "function",
					"line": 25,
					"protection": "public",
					"type": "ref MongoCursor(MongoCursor p)",
					"name": "opAssign"
				}
			],
			"name": "MongoCursor",
			"comment": "\n\tRepresents a cursor for a MongoDB query.\n\n\tUse foreach( doc; cursor ) to iterate over the list of documents.\n\n\tThis struct uses reference counting to destroy the underlying MongoDB cursor.\n"
		}
	],
	"name": "vibe.db.mongo.cursor",
	"comment": "\n\tMongoDB cursor abstraction\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\core\\connectionpool.d",
	"members": [
		{
			"kind": "class",
			"line": 25,
			"protection": "public",
			"members": [
				{
					"kind": "class",
					"line": 25,
					"protection": "public",
					"members": [
						{
							"kind": "variable",
							"line": 27,
							"type": "Connection delegate()",
							"name": "m_connectionFactory"
						},
						{
							"kind": "variable",
							"line": 28,
							"type": "Connection[]",
							"name": "m_connections"
						},
						{
							"kind": "variable",
							"line": 29,
							"type": "Connection[Fiber]",
							"name": "m_locks"
						},
						{
							"kind": "variable",
							"line": 30,
							"type": "int[Connection]",
							"name": "m_lockCount"
						},
						{
							"kind": "constructor",
							"line": 33,
							"type": "(Connection delegate() connection_factory)",
							"name": "this"
						},
						{
							"kind": "function",
							"line": 38,
							"type": "LockedConnection!(Connection)()",
							"name": "lockConnection"
						}
					],
					"name": "ConnectionPool"
				}
			],
			"name": "ConnectionPool(Connection : EventedObject)",
			"comment": "\n\tGeneric connection pool class.\n\n\tThe connection pool is creating connections using the supplied factory function as needed\n\twhenever lockConnection() is called. Connections are associated to the calling fiber, as long\n\tas any copy of the returned LockedConnection object still exists. Connections that are not\n\tassociated\n"
		},
		{
			"kind": "struct",
			"line": 68,
			"protection": "public",
			"members": [
				{
					"kind": "struct",
					"line": 68,
					"protection": "public",
					"members": [
						{
							"kind": "variable",
							"line": 70,
							"type": "ConnectionPool!(Connection)",
							"name": "m_pool"
						},
						{
							"kind": "variable",
							"line": 71,
							"type": "Fiber",
							"name": "m_fiber"
						},
						{
							"kind": "variable",
							"line": 74,
							"type": "Connection",
							"name": "m_conn"
						},
						{
							"kind": "constructor",
							"line": 78,
							"type": "(ConnectionPool!(Connection) pool, Connection conn)",
							"name": "this"
						}
					],
					"name": "LockedConnection"
				}
			],
			"name": "LockedConnection(Connection : EventedObject)"
		},
		{
			"kind": "class",
			"line": 115,
			"protection": "public",
			"members": [
				{
					"kind": "class",
					"line": 115,
					"protection": "public",
					"members": [
						{
							"kind": "variable",
							"line": 117,
							"type": "LockedConnection!(Connection)",
							"name": "m_lock"
						},
						{
							"kind": "variable",
							"line": 118,
							"type": "InputStream",
							"name": "m_stream"
						},
						{
							"kind": "constructor",
							"line": 122,
							"type": "(LockedConnection!(Connection) conn, InputStream str)",
							"name": "this"
						},
						{
							"kind": "function",
							"line": 128,
							"type": "bool()",
							"name": "empty"
						},
						{
							"kind": "function",
							"line": 130,
							"type": "ulong()",
							"name": "leastSize"
						},
						{
							"kind": "function",
							"line": 132,
							"type": "bool()",
							"name": "dataAvailableForRead"
						},
						{
							"kind": "function",
							"line": 134,
							"type": "const(ubyte)[]()",
							"name": "peek"
						},
						{
							"kind": "function",
							"line": 136,
							"type": "void(ubyte[] dst)",
							"name": "read"
						}
					],
					"name": "LockedInputStream"
				}
			],
			"name": "LockedInputStream(Connection : EventedObject)",
			"comment": "\n\tWraps an InputStream and automatically unlocks a locked connection as soon as all data has been\n\tread.\n"
		}
	],
	"name": "vibe.core.connectionpool",
	"comment": "\n\tGeneric connection pool for reusing persistent connections across fibers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\db.d",
	"members": [
		{
			"kind": "class",
			"line": 24,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "function",
					"line": 65,
					"protection": "public",
					"type": "Bson(string db, Bson command_and_options)",
					"name": "runCommand",
					"comment": "\n\t\tRuns a command on the specified database.\n\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Commands)\n\t\n"
				},
				{
					"kind": "function",
					"line": 71,
					"protection": "public",
					"type": "Bson(string db, string mask)",
					"name": "getLog",
					"comment": " See $(LINK http://www.mongodb.org/display/DOCS/getLog+Command)\n"
				},
				{
					"kind": "function",
					"line": 74,
					"protection": "public",
					"type": "Bson(string db, bool async = false)",
					"name": "fsync",
					"comment": " See $(LINK http://www.mongodb.org/display/DOCS/fsync+Command)\n"
				},
				{
					"kind": "function",
					"line": 77,
					"protection": "public",
					"type": "Bson(string db)",
					"name": "getLastError",
					"comment": " See $(LINK http://www.mongodb.org/display/DOCS/getLastError+Command) \n"
				},
				{
					"kind": "function",
					"line": 93,
					"protection": "public",
					"type": "MongoCollection(string name)",
					"name": "opIndex",
					"comment": "\n\t\tAccesses the collections inside this DB.\n\n\t \tExamples:\n\t \t---\n\t \tauto db = connectMongoDB(\"mongodb://localhost/mydatabase\");\n\t \tauto col = db[\"mycollection\"];\n\n\t \tauto db = connectMongoDB(\"mongodb://localhost\");\n\t \tauto col = db[\"mydatabase.mycollection\"];\n\t \t---\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\n"
				},
				{
					"kind": "function",
					"line": 129,
					"protection": "public",
					"type": "MongoCollection(string db_and_col)",
					"name": "getCollection",
					"comment": "\n Return: MongoCollection for the given database and collecting specified.\n\n If a default database has been set in the MongoClientSettings it is NOT used here.\n The full database.collection path must be specified.\n\n Example:\n ---\n auto col = db.getCollection(\"mydb.mycollection\");\n ---\n\n The opIndex function should be used to get a relative collection name where the\n default database is taken into consideration.\n\n Most user code should use opIndex.\n\t \n"
				}
			],
			"name": "MongoDB",
			"comment": "\n\tRepresents a single remote MongoDB.\n"
		}
	],
	"name": "vibe.db.mongo.db",
	"comment": "\n\tMongoDB class doing connection management.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\core\\net.d",
	"members": [
		{
			"kind": "function",
			"line": 25,
			"protection": "public",
			"type": "NetworkAddress(string host, ushort address_family = cast(ushort)0, bool use_dns = true)",
			"name": "resolveHost",
			"comment": "\n\tResolves the given host name/IP address string.\n\n\tSetting use_dns to false will only allow IP address strings but also guarantees\n\tthat the call will not block.\n"
		},
		{
			"kind": "function",
			"line": 42,
			"protection": "public",
			"type": "void(ushort port, void delegate(TcpConnection stream) connection_callback)",
			"name": "listenTcp",
			"comment": "\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. Each new connection gets its own fiber. The stream parameter\n\tthen allows to perform blocking I/O on the client socket.\n\n\tThe address parameter can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n"
		},
		{
			"kind": "function",
			"line": 48,
			"protection": "public",
			"type": "void(ushort port, void delegate(TcpConnection stream) connection_callback, string address)",
			"name": "listenTcp",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 58,
			"protection": "public",
			"type": "void(ushort port, void function(TcpConnection stream) connection_callback)",
			"name": "listenTcpS",
			"comment": "\n\tStarts listening on the specified port.\n\n\tThis function is the same as listenTcp but takes a function callback instead of a delegate.\n"
		},
		{
			"kind": "function",
			"line": 63,
			"protection": "public",
			"type": "void(ushort port, void function(TcpConnection stream) connection_callback, string address)",
			"name": "listenTcpS",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 71,
			"protection": "public",
			"type": "TcpConnection(string host, ushort port)",
			"name": "connectTcp",
			"comment": "\n\tEstablishes a connection to the given host/port.\n"
		},
		{
			"kind": "function",
			"line": 80,
			"protection": "public",
			"type": "UdpConnection(ushort port, string bind_address = \"0.0.0.0\")",
			"name": "listenUdp",
			"comment": "\n\tCreates a bound UDP socket suitable for sending and receiving packets.\n"
		},
		{
			"kind": "struct",
			"line": 89,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 98,
					"protection": "public",
					"type": "const @property ushort()",
					"name": "family",
					"comment": " Family (AF_) of the socket address.\n\t\n"
				},
				{
					"kind": "function",
					"line": 100,
					"protection": "public",
					"type": "@property void(ushort val)",
					"name": "family",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 104,
					"protection": "public",
					"type": "const @property ushort()",
					"name": "port",
					"comment": " The port in host byte order.\n\t\n"
				},
				{
					"kind": "function",
					"line": 113,
					"protection": "public",
					"type": "@property void(ushort val)",
					"name": "port",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 124,
					"protection": "public",
					"type": "inout @property inout(sockaddr)*()",
					"name": "sockAddr",
					"comment": " A pointer to a sockaddr struct suitable for passing to socket functions.\n\t\n"
				},
				{
					"kind": "function",
					"line": 128,
					"protection": "public",
					"type": "const @property int()",
					"name": "sockAddrLen",
					"comment": " Size of the sockaddr struct that is returned by sockAddr().\n\t\n"
				},
				{
					"kind": "function",
					"line": 136,
					"protection": "public",
					"type": "inout @property inout(sockaddr_in)*()",
					"name": "sockAddrInet4"
				},
				{
					"kind": "function",
					"line": 137,
					"protection": "public",
					"type": "inout @property inout(sockaddr_in6)*()",
					"name": "sockAddrInet6"
				}
			],
			"name": "NetworkAddress",
			"comment": "\n\tRepresents a network/socket address.\n"
		},
		{
			"kind": "interface",
			"line": 144,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 146,
					"protection": "public",
					"type": "@property void(bool enabled)",
					"name": "tcpNoDelay",
					"comment": " Used to disable Nagle's algorithm\n"
				},
				{
					"kind": "function",
					"line": 148,
					"protection": "public",
					"type": "const @property bool()",
					"name": "tcpNoDelay",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 151,
					"protection": "public",
					"type": "@property void(Duration duration)",
					"name": "readTimeout",
					"comment": " Controls the read time out after which the connection is closed automatically\n"
				},
				{
					"kind": "function",
					"line": 154,
					"protection": "public",
					"type": "const @property Duration()",
					"name": "readTimeout",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 157,
					"protection": "public",
					"type": "const @property bool()",
					"name": "connected",
					"comment": " The current connection status\n"
				},
				{
					"kind": "function",
					"line": 160,
					"protection": "public",
					"type": "const @property string()",
					"name": "peerAddress",
					"comment": " Returns the IP address of the connected peer.\n"
				},
				{
					"kind": "function",
					"line": 163,
					"protection": "public",
					"type": "void()",
					"name": "close",
					"comment": " Actively closes the connection.\n"
				},
				{
					"kind": "function",
					"line": 166,
					"protection": "public",
					"type": "bool(Duration timeout)",
					"name": "waitForData",
					"comment": " Sets a timeout until data has to be availabe for read. Returns false on timeout.\n"
				}
			],
			"interfaces": [
				"Stream",
				"EventedObject"
			],
			"name": "TcpConnection",
			"comment": "\n\tRepresents a single TCP connection.\n"
		},
		{
			"kind": "interface",
			"line": 173,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 176,
					"protection": "public",
					"type": "const @property string()",
					"name": "bindAddress",
					"comment": " Returns the address to which the UDP socket is bound.\n\t\n"
				},
				{
					"kind": "function",
					"line": 180,
					"protection": "public",
					"type": "const @property bool()",
					"name": "canBroadcast",
					"comment": " Determines if the socket is allowed to send to broadcast addresses.\n\t\n"
				},
				{
					"kind": "function",
					"line": 182,
					"protection": "public",
					"type": "@property void(bool val)",
					"name": "canBroadcast",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 189,
					"protection": "public",
					"type": "void(string host, ushort port)",
					"name": "connect",
					"comment": " Locks the UDP connection to a certain peer.\n\n\t\tOnce connected, the UdpConnection can only communicate with the specified peer.\n\t\tOtherwise communication with any reachable peer is possible.\n\t\n"
				},
				{
					"kind": "function",
					"line": 196,
					"protection": "public",
					"type": "void(const(ubyte[]) data, const(NetworkAddress*) peer_address = null)",
					"name": "send",
					"comment": " Sends a single packet.\n\n\t\tIf peer_address is given, the packet is send to that address. Otherwise the packet\n\t\twill be sent to the address specified by a call to connect().\n\t\n"
				},
				{
					"kind": "function",
					"line": 202,
					"protection": "public",
					"type": "ubyte[](ubyte[] buf = null, NetworkAddress* peer_address = null)",
					"name": "recv",
					"comment": " Receives a single packet.\n\n\t\tIf a buffer is given, it must be large enough to hold the full packet.\n\t\n"
				}
			],
			"interfaces": [
				"EventedObject"
			],
			"name": "UdpConnection",
			"comment": "\n\tRepresents a bound and possibly 'connected' UDP socket.\n"
		}
	],
	"name": "vibe.core.net",
	"comment": "\n\tTCP/UDP connection and server handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\templ\\utils.d",
	"members": [
		{
			"kind": "template",
			"line": 61,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 61,
					"type": "@property ()",
					"name": "inject",
					"comment": "\n\tAllows to pass additional variables to a function that renders a templated page.\n\n\tThis function is useful if you need to support additional layers of functionality that should\n\tbe available to your views, such as authentication. This function allows to define variables\n\tthat should be usable from templates using so called \"injectors\". Each injector is a template\n\tfunction that can add its own parameters.\n\n\tIf you should need explicit access to one of the parameters of an upstream injector, you can use\n\tthe InjectedParams!() template.\n\n\tNOTE: this function requires at least DMD 2.060, as it suffers from DMD BUG 2962.\n\n\tExamples:\n\n\t\tThe following example will render the template \"home.dt\" and make the variables 'userinfo',\n\t\t'something_else' and 'message' available. Before the 'page' function is called,\n\t\t'authInjector' and 'somethingInjector' can process the request and decide what to do.\n\n\t\t---\n\t\tvoid authInjector(alias Next, Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\tstring userinfo;\n\t\t\t// TODO: fill userinfo with content, throw an Unauthorized HTTP error etc.\n\t\t\tNext!(Aliases, userinfo)(req, res);\n\t\t}\n\n\t\tvoid somethingInjector(alias Next, Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\tstring something_else;\n\t\t\tNext!(Aliases, something_else)(req, res);\n\t\t}\n\n\t\tvoid page(Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\tstring message = \"Welcome to the example page!\"\n\t\t\tres.render!(\"home.dt\", Aliases, message);\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto router = new UrlRouter;\n\t\t\trouter.get(\"/\", inject!(page, authInjector, somethingInjector));\n\t\t}\n\t\t---\n"
				}
			],
			"name": "inject(alias Page,Injectors...)",
			"comment": "\n\tAllows to pass additional variables to a function that renders a templated page.\n\n\tThis function is useful if you need to support additional layers of functionality that should\n\tbe available to your views, such as authentication. This function allows to define variables\n\tthat should be usable from templates using so called \"injectors\". Each injector is a template\n\tfunction that can add its own parameters.\n\n\tIf you should need explicit access to one of the parameters of an upstream injector, you can use\n\tthe InjectedParams!() template.\n\n\tNOTE: this function requires at least DMD 2.060, as it suffers from DMD BUG 2962.\n\n\tExamples:\n\n\t\tThe following example will render the template \"home.dt\" and make the variables 'userinfo',\n\t\t'something_else' and 'message' available. Before the 'page' function is called,\n\t\t'authInjector' and 'somethingInjector' can process the request and decide what to do.\n\n\t\t---\n\t\tvoid authInjector(alias Next, Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\tstring userinfo;\n\t\t\t// TODO: fill userinfo with content, throw an Unauthorized HTTP error etc.\n\t\t\tNext!(Aliases, userinfo)(req, res);\n\t\t}\n\n\t\tvoid somethingInjector(alias Next, Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\tstring something_else;\n\t\t\tNext!(Aliases, something_else)(req, res);\n\t\t}\n\n\t\tvoid page(Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\tstring message = \"Welcome to the example page!\"\n\t\t\tres.render!(\"home.dt\", Aliases, message);\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto router = new UrlRouter;\n\t\t\trouter.get(\"/\", inject!(page, authInjector, somethingInjector));\n\t\t}\n\t\t---\n"
		},
		{
			"kind": "struct",
			"line": 95,
			"protection": "public",
			"members": [
				{
					"kind": "struct",
					"line": 95,
					"protection": "public",
					"members": [],
					"name": "InjectedParams"
				}
			],
			"name": "InjectedParams(Aliases)",
			"comment": "\n\tMakes the variable aliases passed to one of the injectors of the inject!() template accessible\n\tto the local function.\n\n\tExamples:\n\t\t---\n\t\tvoid authInjector(alias Next, Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\tstring userinfo;\n\t\t\t// TODO: fill userinfo with content, throw an Unauthorized HTTP error etc.\n\t\t\tNext!(Aliases, userinfo)(req, res);\n\t\t}\n\n\t\tvoid somethingInjector(alias Next, Aliases...)(HttpServerRequest req, HttpServerResponse res)\n\t\t{\n\t\t\t// access the userinfo variable:\n\t\t\tif( InjectedParams!Aliases.userinfo.length == 0 ) return;\n\n\t\t\t// it's also possible to declare a pseudo-\n\t\t\t// variable like this to access the parameters:\n\t\t\tInjectedParams!Aliases params;\n\t\t\tif( params.userinfo == \"peter\" )\n\t\t\t\tthrow Exception(\"Not allowed!\")\n\n\t\t\tNext!(Aliases)(req, res);\n\t\t}\n\t\t---\n"
		},
		{
			"kind": "template",
			"line": 100,
			"protection": "public",
			"members": [],
			"name": "localAliases(int i,ALIASES...)",
			"comment": " When mixed in, makes all ALIASES available in the local scope\n"
		},
		{
			"kind": "template",
			"line": 112,
			"protection": "public",
			"members": [],
			"name": "localAliasesCompat(int i,TYPES_AND_NAMES...)",
			"comment": " When mixed in, makes all ALIASES available in the local scope. Note that there must be a\n Variant[] args__ available that matches TYPES_AND_NAMES\n"
		}
	],
	"name": "vibe.templ.utils",
	"comment": "\n\tUtility functions for dealing with templates.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\templ\\diet.d",
	"members": [
		{
			"kind": "template",
			"line": 44,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 44,
					"type": "void(OutputStream stream__)",
					"name": "parseDietFile",
					"comment": "\n\tParses the given diet template at compile time and writes the resulting\n\tHTML code into 'stream'.\n\n\tNote that this function currently suffers from multiple DMD bugs in conjunction with local\n\tvariables passed as alias template parameters.\n"
				}
			],
			"name": "parseDietFile(string template_file,ALIASES...)",
			"comment": "\n\tParses the given diet template at compile time and writes the resulting\n\tHTML code into 'stream'.\n\n\tNote that this function currently suffers from multiple DMD bugs in conjunction with local\n\tvariables passed as alias template parameters.\n"
		},
		{
			"kind": "template",
			"line": 65,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 65,
					"type": "void(OutputStream stream__, Variant[] args__...)",
					"name": "parseDietFileCompat",
					"comment": "\n\tCompatibility version of parseDietFile().\n\n\tThis function should only be called indiretly through HttpServerResponse.renderCompat().\n\n"
				}
			],
			"name": "parseDietFileCompat(string template_file,TYPES_AND_NAMES...)",
			"comment": "\n\tCompatibility version of parseDietFile().\n\n\tThis function should only be called indiretly through HttpServerResponse.renderCompat().\n\n"
		},
		{
			"kind": "function",
			"line": 86,
			"protection": "public",
			"type": "void(string name, string function(string, int indent) filter)",
			"name": "registerDietTextFilter",
			"comment": "\n\tRegisters a new text filter for use in Diet templates.\n\n\tThe filter will be available using :filtername inside of the template. The following filters are\n\tpredefined: css, javascript, markdown\n"
		},
		{
			"kind": "template",
			"line": 110,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 110,
					"type": "string()",
					"name": "dietParser"
				}
			],
			"name": "dietParser(string template_file)"
		}
	],
	"name": "vibe.templ.diet",
	"comment": "\n\tImplements a compile-time Diet template parser.\n\n\tDiet templates are an more or less compatible incarnation of Jade templates but with\n\tembedded D source instead of JavaScript. The Diet syntax reference is found at\n\t$(LINK http://vibed.org/templates/diet).\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\path.d",
	"members": [
		{
			"kind": "struct",
			"line": 24,
			"protection": "public",
			"members": [
				{
					"kind": "constructor",
					"line": 32,
					"protection": "public",
					"type": "ref Path(string pathstr)",
					"name": "this",
					"comment": " Constructs a Path object by parsing a path string.\n"
				},
				{
					"kind": "constructor",
					"line": 41,
					"protection": "public",
					"type": "ref Path(immutable(PathEntry)[] nodes, bool absolute)",
					"name": "this",
					"comment": " Constructs a path object from a list of PathEntry objects.\n"
				},
				{
					"kind": "constructor",
					"line": 48,
					"protection": "public",
					"type": "ref Path(PathEntry entry)",
					"name": "this",
					"comment": " Constructs a relative path with one path entry.\n"
				},
				{
					"kind": "function",
					"line": 54,
					"protection": "public",
					"type": "const @property bool()",
					"name": "absolute",
					"comment": " Determines if the path is absolute.\n"
				},
				{
					"kind": "function",
					"line": 57,
					"protection": "public",
					"type": "void()",
					"name": "normalize",
					"comment": " Resolves all '.' and '..' path entries as far as possible.\n"
				},
				{
					"kind": "function",
					"line": 77,
					"protection": "public",
					"type": "const string(bool in_url = false)",
					"name": "toString",
					"comment": " Converts the Path back to a string representation using slashes.\n"
				},
				{
					"kind": "function",
					"line": 97,
					"protection": "public",
					"type": "const string()",
					"name": "toNativeString",
					"comment": " Converts the Path object to a native path string (backslash as path separator on Windows).\n"
				},
				{
					"kind": "function",
					"line": 119,
					"protection": "public",
					"type": "const bool(const(Path) rhs)",
					"name": "startsWith",
					"comment": " Tests if `rhs` is an anchestor or the same as this path. \n"
				},
				{
					"kind": "function",
					"line": 128,
					"protection": "public",
					"type": "const Path(const(Path) parentPath)",
					"name": "relativeTo",
					"comment": " Computes the relative path from `parentPath` to this path.\n"
				},
				{
					"kind": "function",
					"line": 141,
					"protection": "public",
					"type": "const @property PathEntry()",
					"name": "head",
					"comment": " The last entry of the path\n"
				},
				{
					"kind": "function",
					"line": 144,
					"protection": "public",
					"type": "const @property Path()",
					"name": "parentPath",
					"comment": " The parent path\n"
				},
				{
					"kind": "function",
					"line": 147,
					"protection": "public",
					"type": "const @property immutable(PathEntry)[]()",
					"name": "nodes",
					"comment": " The ist of path entries of which this path is composed\n"
				},
				{
					"kind": "function",
					"line": 150,
					"protection": "public",
					"type": "const @property uint()",
					"name": "length",
					"comment": " The number of path entries of which this path is composed\n"
				},
				{
					"kind": "function",
					"line": 153,
					"protection": "public",
					"type": "const @property bool()",
					"name": "empty",
					"comment": " True if the path contains no entries\n"
				},
				{
					"kind": "function",
					"line": 156,
					"protection": "public",
					"type": "const @property bool()",
					"name": "endsWithSlash",
					"comment": " Determines if the path ends with a slash (i.e. is a directory)\n"
				},
				{
					"kind": "function",
					"line": 158,
					"protection": "public",
					"type": "@property void(bool v)",
					"name": "endsWithSlash",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 161,
					"protection": "public",
					"type": "const @property bool()",
					"name": "external",
					"comment": " Determines if this path goes outside of its base path (i.e. begins with '..').\n"
				},
				{
					"kind": "function",
					"line": 163,
					"protection": "public",
					"type": "const PathEntry(uint idx)",
					"name": "opIndex"
				},
				{
					"kind": "function",
					"line": 164,
					"protection": "public",
					"type": "const Path(uint start, uint end)",
					"name": "opSlice"
				},
				{
					"kind": "template",
					"line": 169,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 169,
							"type": "const size_t()",
							"name": "opDollar"
						}
					],
					"name": "opDollar(int dim) if (dim == 0)"
				},
				{
					"kind": "template",
					"line": 172,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 172,
							"type": "const Path(const Path rhs)",
							"name": "opBinary"
						}
					],
					"name": "opBinary(string OP) if (OP == \"~\")"
				},
				{
					"kind": "template",
					"line": 195,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 195,
							"type": "const Path(string rhs)",
							"name": "opBinary"
						}
					],
					"name": "opBinary(string OP) if (OP == \"~\")"
				},
				{
					"kind": "template",
					"line": 196,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 196,
							"type": "const Path(PathEntry rhs)",
							"name": "opBinary"
						}
					],
					"name": "opBinary(string OP) if (OP == \"~\")"
				},
				{
					"kind": "template",
					"line": 197,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 197,
							"type": "void(string rhs)",
							"name": "opOpAssign"
						}
					],
					"name": "opOpAssign(string OP) if (OP == \"~\")"
				},
				{
					"kind": "template",
					"line": 198,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 198,
							"type": "void(PathEntry rhs)",
							"name": "opOpAssign"
						}
					],
					"name": "opOpAssign(string OP) if (OP == \"~\")"
				},
				{
					"kind": "template",
					"line": 199,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 199,
							"type": "void(Path rhs)",
							"name": "opOpAssign"
						}
					],
					"name": "opOpAssign(string OP) if (OP == \"~\")"
				},
				{
					"kind": "function",
					"line": 201,
					"protection": "public",
					"type": "const bool(ref const(Path) rhs)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 211,
					"protection": "public",
					"type": "const int(ref const(Path) rhs)",
					"name": "opCmp"
				},
				{
					"kind": "function",
					"line": 24,
					"protection": "public",
					"type": "bool(const(void*) p, const(void*) q)",
					"name": "__xopEquals"
				}
			],
			"name": "Path",
			"comment": "\n\tRepresents an absolute or relative file system path.\n\n\tThis struct allows to do safe operations on paths, such as concatenation and sub paths. Checks\n\tare done to disallow invalid operations such as concatenating two absolute paths. It also\n\tvalidates path strings and allows for easy checking of malicious relative paths.\n"
		},
		{
			"kind": "struct",
			"line": 223,
			"protection": "public",
			"members": [
				{
					"kind": "constructor",
					"line": 228,
					"protection": "public",
					"type": "ref PathEntry(string str)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 234,
					"protection": "public",
					"type": "const string()",
					"name": "toString"
				},
				{
					"kind": "template",
					"line": 236,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 236,
							"type": "const Path(PathEntry rhs)",
							"name": "opBinary"
						}
					],
					"name": "opBinary(string OP) if (OP == \"~\")"
				},
				{
					"kind": "function",
					"line": 238,
					"protection": "public",
					"type": "const bool(ref const(PathEntry) rhs)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 239,
					"protection": "public",
					"type": "const bool(string rhs)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 240,
					"protection": "public",
					"type": "const int(ref const(PathEntry) rhs)",
					"name": "opCmp"
				},
				{
					"kind": "function",
					"line": 241,
					"protection": "public",
					"type": "const int(string rhs)",
					"name": "opCmp"
				},
				{
					"kind": "function",
					"line": 223,
					"protection": "public",
					"type": "bool(const(void*) p, const(void*) q)",
					"name": "__xopEquals"
				}
			],
			"name": "PathEntry"
		},
		{
			"kind": "function",
			"line": 252,
			"protection": "public",
			"type": "string(string basepath, string subpath)",
			"name": "joinPath",
			"comment": " Joins two path strings. subpath must be relative.\n"
		},
		{
			"kind": "function",
			"line": 260,
			"protection": "public",
			"type": "PathEntry[](string path)",
			"name": "splitPath",
			"comment": " Splits up a path string into its elements/folders\n"
		}
	],
	"name": "vibe.inet.path",
	"comment": "\n\tContains routines for high level path handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\ssl.d",
	"members": [
		{
			"kind": "enum",
			"line": 26,
			"protection": "public",
			"base": "int",
			"members": [
				{
					"kind": "enum member",
					"line": 27,
					"protection": "public",
					"name": "Connecting"
				},
				{
					"kind": "enum member",
					"line": 28,
					"protection": "public",
					"name": "Accepting"
				},
				{
					"kind": "enum member",
					"line": 29,
					"protection": "public",
					"name": "Connected"
				}
			],
			"name": "SslStreamState"
		},
		{
			"kind": "class",
			"line": 32,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 43,
					"protection": "public",
					"type": "SslStream(Stream underlying, SslContext ctx, SslStreamState state)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 78,
					"protection": "public",
					"type": "@property bool()",
					"name": "empty"
				},
				{
					"kind": "function",
					"line": 83,
					"protection": "public",
					"type": "@property ulong()",
					"name": "leastSize"
				},
				{
					"kind": "function",
					"line": 89,
					"protection": "public",
					"type": "@property bool()",
					"name": "dataAvailableForRead"
				},
				{
					"kind": "function",
					"line": 94,
					"protection": "public",
					"type": "const(ubyte)[]()",
					"name": "peek"
				},
				{
					"kind": "function",
					"line": 101,
					"protection": "public",
					"type": "void(ubyte[] dst)",
					"name": "read"
				},
				{
					"kind": "function",
					"line": 114,
					"protection": "public",
					"type": "void(const(ubyte[]) bytes_, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 140,
					"protection": "public",
					"type": "void()",
					"name": "flush"
				},
				{
					"kind": "function",
					"line": 145,
					"protection": "public",
					"type": "void()",
					"name": "finalize"
				},
				{
					"kind": "function",
					"line": 152,
					"protection": "public",
					"type": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
					"name": "write"
				}
			],
			"interfaces": [
				"Stream"
			],
			"name": "SslStream"
		}
	],
	"name": "vibe.stream.ssl",
	"comment": "\n\tSSL/TLS stream implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\form.d",
	"members": [
		{
			"kind": "struct",
			"line": 31,
			"protection": "public",
			"members": [
				{
					"kind": "variable",
					"line": 32,
					"protection": "public",
					"type": "StrMapCI",
					"name": "headers"
				},
				{
					"kind": "variable",
					"line": 33,
					"protection": "public",
					"type": "PathEntry",
					"name": "filename"
				},
				{
					"kind": "variable",
					"line": 34,
					"protection": "public",
					"type": "Path",
					"name": "tempPath"
				},
				{
					"kind": "function",
					"line": 31,
					"protection": "public",
					"type": "const bool(const(FilePart) p)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 31,
					"protection": "public",
					"type": "bool(const(void*) p, const(void*) q)",
					"name": "__xopEquals"
				}
			],
			"name": "FilePart"
		},
		{
			"kind": "function",
			"line": 40,
			"protection": "public",
			"type": "bool(ref string[string] fields, ref FilePart[string] files, string content_type, InputStream body_reader, uint max_line_length)",
			"name": "parseFormData",
			"comment": "\n\tParses the form given by content_type and body_reader.\n"
		},
		{
			"kind": "function",
			"line": 60,
			"protection": "public",
			"type": "void(string str, ref string[string] params)",
			"name": "parseUrlEncodedForm",
			"comment": "\n\tParses a url encoded form (query string format) and puts the key/value pairs into params.\n"
		},
		{
			"kind": "template",
			"line": 223,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 223,
					"type": "void(UrlRouter router, I instance, string url_prefix, MethodStyle style = MethodStyle.Unaltered)",
					"name": "registerFormInterface",
					"comment": "\n\tGenerates a form based interface to the given instance.\n\n\tEach function is callable with either GET or POST using form encoded\n\tparameters.  All methods of I that start with \"get\", \"query\", \"add\", \"create\",\n\t\"post\" are made available via the URL url_prefix~method_name. A method named\n\t\"index\" will be made available via url_prefix. method_name is generated from\n\tthe original method name ba the same rules as for\n\tvibe.http.rest.registerRestInterface. All these methods might take a\n\tHttpServerRequest parameter and a HttpServerResponse parameter, but don't have\n\tto.\n\n\tAll additional parameters will be filled with available form-data fields.\n\tEvery parameter name has to match a form field name. The registered handler\n\twill throw an exception if no overload is found that is compatible with all\n\tavailable form data fields.\n\n\tFor a thorough example of how to use this method, see the form_interface\n\texample in the examples directory.\n\n\tSee_Also: registerFormMethod, vibe.http.rest.registerRestInterface\n\n\tParams:\n\t\trouter = The router the found methods are registered with.\n\n\t\tinstance = The instance whose methods should be called via the registered URLs.\n\n\t\turl_prefix = The prefix before the method name. A method named getWelcomePage\n\t\twith a given url_prefix=\"/mywebapp/welcomePage/\" would be made available as\n\t\t\"/mywebapp/welcomePage/getWelcomePage\" if MethodStyle is Unaltered.\n\n\t\tstyle = How the url part representing the method name should be altered.\n\n\tExamples:\n\n\t---\n\tclass FrontEnd {\n\t\t// GET /\n\t\tvoid index(HttpServerResponse res)\n\t\t{\n\t\t\tres.render!(\"index.dt\");\n\t\t}\n\n\t\t/// GET /files?folder=...\n\t\tvoid getFiles(HttpServerRequest req, HttpServerResponse res, string folder)\n\t\t{\n\t\t\tres.render!(\"files.dt\", req, folder);\n\t\t}\n\n\t\t/// POST /login\n\t\tvoid login(HttpServerRequest req, HttpServerResponse res, string username,\n\t\t\tstring password)\n\t\t{\n\t\t\tif( username != \"tester\" || password != \"secret\" )\n\t\t\t\tthrow new HttpStatusException(HttpStatus.Unauthorized);\n\t\t\tauto session = req.session;\n\t\t\tif( !session ) session = res.startSession();\n\t\t\tsession[\"username\"] = username;\n\t\t\tres.redirect(\"/\");\n\t\t}\n\t}\n\n\tstatic this()\n\t{\n\t\tauto settings = new HttpServerSettings;\n\t\tsettings.port = 8080;\n\t\tauto router = new UrlRouter;\n\t\tregisterFormInterface(router, new FrontEnd);\n\t\tlistenHttp(settings, router);\n\t}\n\t---\n\n"
				}
			],
			"name": "registerFormInterface(I)",
			"comment": "\n\tGenerates a form based interface to the given instance.\n\n\tEach function is callable with either GET or POST using form encoded\n\tparameters.  All methods of I that start with \"get\", \"query\", \"add\", \"create\",\n\t\"post\" are made available via the URL url_prefix~method_name. A method named\n\t\"index\" will be made available via url_prefix. method_name is generated from\n\tthe original method name ba the same rules as for\n\tvibe.http.rest.registerRestInterface. All these methods might take a\n\tHttpServerRequest parameter and a HttpServerResponse parameter, but don't have\n\tto.\n\n\tAll additional parameters will be filled with available form-data fields.\n\tEvery parameter name has to match a form field name. The registered handler\n\twill throw an exception if no overload is found that is compatible with all\n\tavailable form data fields.\n\n\tFor a thorough example of how to use this method, see the form_interface\n\texample in the examples directory.\n\n\tSee_Also: registerFormMethod, vibe.http.rest.registerRestInterface\n\n\tParams:\n\t\trouter = The router the found methods are registered with.\n\n\t\tinstance = The instance whose methods should be called via the registered URLs.\n\n\t\turl_prefix = The prefix before the method name. A method named getWelcomePage\n\t\twith a given url_prefix=\"/mywebapp/welcomePage/\" would be made available as\n\t\t\"/mywebapp/welcomePage/getWelcomePage\" if MethodStyle is Unaltered.\n\n\t\tstyle = How the url part representing the method name should be altered.\n\n\tExamples:\n\n\t---\n\tclass FrontEnd {\n\t\t// GET /\n\t\tvoid index(HttpServerResponse res)\n\t\t{\n\t\t\tres.render!(\"index.dt\");\n\t\t}\n\n\t\t/// GET /files?folder=...\n\t\tvoid getFiles(HttpServerRequest req, HttpServerResponse res, string folder)\n\t\t{\n\t\t\tres.render!(\"files.dt\", req, folder);\n\t\t}\n\n\t\t/// POST /login\n\t\tvoid login(HttpServerRequest req, HttpServerResponse res, string username,\n\t\t\tstring password)\n\t\t{\n\t\t\tif( username != \"tester\" || password != \"secret\" )\n\t\t\t\tthrow new HttpStatusException(HttpStatus.Unauthorized);\n\t\t\tauto session = req.session;\n\t\t\tif( !session ) session = res.startSession();\n\t\t\tsession[\"username\"] = username;\n\t\t\tres.redirect(\"/\");\n\t\t}\n\t}\n\n\tstatic this()\n\t{\n\t\tauto settings = new HttpServerSettings;\n\t\tsettings.port = 8080;\n\t\tauto router = new UrlRouter;\n\t\tregisterFormInterface(router, new FrontEnd);\n\t\tlistenHttp(settings, router);\n\t}\n\t---\n\n"
		},
		{
			"kind": "template",
			"line": 249,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 249,
					"type": "void(UrlRouter router, I instance, string url_prefix, MethodStyle style = MethodStyle.Unaltered)",
					"name": "registerFormMethod",
					"comment": "\n\tRegisters just a single method.\n\n\tFor details see registerFormInterface. This method does exactly the\n\tsame, but instead of registering found methods that match a scheme it just\n\tregisters the method specified.\n\n\tSee_Also: registerFormInterface\n\n\tParams:\n\t\tmethod = The name of the method to register. It might be\n\t\toverloaded, one overload has to match any given form data, otherwise an error is triggered.\n"
				}
			],
			"name": "registerFormMethod(string method,I)",
			"comment": "\n\tRegisters just a single method.\n\n\tFor details see registerFormInterface. This method does exactly the\n\tsame, but instead of registering found methods that match a scheme it just\n\tregisters the method specified.\n\n\tSee_Also: registerFormInterface\n\n\tParams:\n\t\tmethod = The name of the method to register. It might be\n\t\toverloaded, one overload has to match any given form data, otherwise an error is triggered.\n"
		}
	],
	"name": "vibe.http.form",
	"comment": "\n\tContains HTTP form parsing and construction routines.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\core\\core.d",
	"members": [
		{
			"kind": "function",
			"line": 50,
			"protection": "public",
			"type": "int()",
			"name": "runEventLoop",
			"comment": "\n\n\n\tStarts the vibe event loop.\n\n\tNote that this function is usually called automatically by the vibe framework. However, if\n\tyou provide your own main() function, you need to call it manually.\n\n\tThe event loop will continue running during the whole life time of the application.\n\tTasks will be started and handled from within the event loop.\n"
		},
		{
			"kind": "function",
			"line": 69,
			"protection": "public",
			"type": "int()",
			"name": "start"
		},
		{
			"kind": "function",
			"line": 77,
			"protection": "public",
			"type": "void()",
			"name": "exitEventLoop",
			"comment": "\n\tStops the currently running event loop.\n\n\tCalling this function will cause the event loop to stop event processing and\n\tthe corresponding call to runEventLoop() will return to its caller.\n"
		},
		{
			"kind": "function",
			"line": 88,
			"protection": "public",
			"type": "int()",
			"name": "processEvents",
			"comment": "\n\tProcess all pending events without blocking.\n\n\tChecks if events are ready to trigger immediately, and run their callbacks if so.\n"
		},
		{
			"kind": "function",
			"line": 96,
			"protection": "public",
			"type": "void(void delegate() del)",
			"name": "setIdleHandler",
			"comment": "\n\tSets a callback that is called whenever no events are left in the event queue.\n"
		},
		{
			"kind": "function",
			"line": 108,
			"protection": "public",
			"type": "Task(void delegate() task)",
			"name": "runTask",
			"comment": "\n\tRuns a new asynchronous task.\n\n\ttask will be called synchronously from within the vibeRunTask call. It will\n\tcontinue to run until vibeYield() or any of the I/O or wait functions is\n\tcalled.\n"
		},
		{
			"kind": "function",
			"line": 135,
			"protection": "public",
			"type": "void(void delegate() task)",
			"name": "runWorkerTask",
			"comment": "\n\tRuns a new asynchronous task in a worker thread.\n\n\tNOTE: the interface of this function will change in the future to ensure that no unprotected\n\tdata is passed between threads!\n\n\tNOTE: You should not use this function yet and it currently behaves just like runTask.\n"
		},
		{
			"kind": "function",
			"line": 155,
			"protection": "public",
			"type": "void()",
			"name": "yield",
			"comment": "\n\tSuspends the execution of the calling task to let other tasks and events be\n\thandled.\n\n\tCalling this function in short intervals is recommended if long CPU\n\tcomputations are carried out by a task. It can also be used in conjunction\n\twith Signals to implement cross-fiber events with no polling.\n"
		},
		{
			"kind": "function",
			"line": 167,
			"protection": "public",
			"type": "void()",
			"name": "rawYield",
			"comment": "\n\tYields execution of this task until an event wakes it up again.\n\n\tBeware that the task will starve if no event wakes it up.\n"
		},
		{
			"kind": "function",
			"line": 175,
			"protection": "public",
			"type": "void(Duration timeout)",
			"name": "sleep",
			"comment": "\n\tSuspends the execution of the calling task for the specified amount of time.\n"
		},
		{
			"kind": "function",
			"line": 194,
			"protection": "public",
			"type": "Timer(Duration timeout, void delegate() callback, bool periodic = false)",
			"name": "setTimer",
			"comment": "\n\tReturns a new armed timer.\n\n\tParams:\n\t\ttimeout = Determines the minimum amount of time that elapses before the timer fires.\n\t\tcallback = This delegate will be called when the timer fires\n\t\tperiodic = Speficies if the timer fires repeatedly or only once\n\n\tReturns:\n\t\tReturns a Timer object that can be used to identify and modify the timer.\n"
		},
		{
			"kind": "template",
			"line": 208,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 208,
					"type": "void(string name, T value)",
					"name": "setTaskLocal",
					"comment": "\n\tSets a variable specific to the calling task/fiber.\n\n\tRemarks:\n\t\tThis function also works if called from outside if a fiber. In this case, it will work\n\t\ton a thread local storage.\n"
				}
			],
			"name": "setTaskLocal(T)",
			"comment": "\n\tSets a variable specific to the calling task/fiber.\n\n\tRemarks:\n\t\tThis function also works if called from outside if a fiber. In this case, it will work\n\t\ton a thread local storage.\n"
		},
		{
			"kind": "template",
			"line": 222,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 222,
					"type": "T(string name)",
					"name": "getTaskLocal",
					"comment": "\n\tReturns a task/fiber specific variable.\n\n\tRemarks:\n\t\tThis function also works if called from outside if a fiber. In this case, it will work\n\t\ton a thread local storage.\n"
				}
			],
			"name": "getTaskLocal(T)",
			"comment": "\n\tReturns a task/fiber specific variable.\n\n\tRemarks:\n\t\tThis function also works if called from outside if a fiber. In this case, it will work\n\t\ton a thread local storage.\n"
		},
		{
			"kind": "function",
			"line": 238,
			"protection": "public",
			"type": "bool(string name)",
			"name": "isTaskLocalSet",
			"comment": "\n\tReturns a task/fiber specific variable.\n\n\tRemarks:\n\t\tThis function also works if called from outside if a fiber. In this case, it will work\n\t\ton a thread local storage.\n"
		},
		{
			"kind": "function",
			"line": 254,
			"protection": "public",
			"type": "void(uint sz)",
			"name": "setTaskStackSize",
			"comment": "\n\tSets the stack size for tasks.\n\n\tThe default stack size is set to 16 KiB, which is sufficient for most tasks. Tuning this value\n\tcan be used to reduce memory usage for great numbers of concurrent tasks or to allow applications\n\twith heavy stack use.\n\n\tNote that this function must be called before any task is started to have an effect.\n"
		},
		{
			"kind": "function",
			"line": 267,
			"protection": "public",
			"type": "void()",
			"name": "enableWorkerThreads",
			"comment": "\n\tEnables multithreaded worker task processing.\n\n\tThis function will start up a number of worker threads that will process tasks started using\n\trunWorkerTask(). runTask() will still execute tasks on the calling thread.\n\n\tNote that this functionality is experimental right now and is not recommended for general use.\n"
		},
		{
			"kind": "variable",
			"line": 283,
			"protection": "public",
			"type": "string",
			"name": "VibeVersionString",
			"comment": "\n\tA version string representing the current vibe version\n"
		}
	],
	"name": "vibe.core.core",
	"comment": "\n\tThis module contains the core functionality of the vibe framework.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\collection.d",
	"members": [
		{
			"kind": "struct",
			"line": 49,
			"protection": "public",
			"members": [
				{
					"kind": "constructor",
					"line": 55,
					"protection": "public",
					"type": "ref MongoCollection(MongoDB db, string collection_name)",
					"name": "this"
				},
				{
					"kind": "template",
					"line": 68,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 68,
							"type": "void(T selector, U update, UpdateFlags flags = UpdateFlags.None)",
							"name": "update",
							"comment": "\n\t\tPerforms an update operation on documents matching 'selector', updating them with 'update'.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Updating)\n\t\n"
						}
					],
					"name": "update(T,U)",
					"comment": "\n\t\tPerforms an update operation on documents matching 'selector', updating them with 'update'.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Updating)\n\t\n"
				},
				{
					"kind": "template",
					"line": 80,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 80,
							"type": "void(T document_or_documents, InsertFlags flags = InsertFlags.None)",
							"name": "insert",
							"comment": "\n\t\tInserts new documents into the collection.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Inserting)\n\t\n"
						}
					],
					"name": "insert(T)",
					"comment": "\n\t\tInserts new documents into the collection.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Inserting)\n\t\n"
				},
				{
					"kind": "template",
					"line": 98,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 98,
							"type": "MongoCursor(T query, U returnFieldSelector, QueryFlags flags = QueryFlags.None, int num_skip = 0, int num_docs_per_chunk = 0)",
							"name": "find",
							"comment": "\n\t\tQueries the collection for existing documents.\n\n\t\tIf no arguments are passed to find(), all documents of the collection will be returned.\n\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t\n"
						}
					],
					"name": "find(T,U)",
					"comment": "\n\t\tQueries the collection for existing documents.\n\n\t\tIf no arguments are passed to find(), all documents of the collection will be returned.\n\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t\n"
				},
				{
					"kind": "template",
					"line": 105,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 105,
							"type": "MongoCursor(T query)",
							"name": "find",
							"comment": " ditto\n"
						}
					],
					"name": "find(T)",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 107,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 107,
							"type": "MongoCursor()",
							"name": "find",
							"comment": " ditto\n"
						}
					],
					"name": "find()",
					"comment": " ditto\n"
				},
				{
					"kind": "template",
					"line": 116,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 116,
							"type": "Bson(T query, U returnFieldSelector = null, QueryFlags flags = QueryFlags.None)",
							"name": "findOne",
							"comment": "\n\t\tQueries the collection for existing documents.\n\n\t\tReturns: the first match or null\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t\n"
						}
					],
					"name": "findOne(T,U = typeof(null))",
					"comment": "\n\t\tQueries the collection for existing documents.\n\n\t\tReturns: the first match or null\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t\n"
				},
				{
					"kind": "template",
					"line": 129,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 129,
							"type": "void(T selector, DeleteFlags flags = DeleteFlags.None)",
							"name": "remove",
							"comment": "\n\t\tRemoves documents from the collection.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Removing)\n\t\n"
						}
					],
					"name": "remove(T)",
					"comment": "\n\t\tRemoves documents from the collection.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Removing)\n\t\n"
				},
				{
					"kind": "template",
					"line": 141,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 141,
							"type": "Bson(T query, U update, V returnFieldSelector = null)",
							"name": "findAndModify",
							"comment": "\n\t\tCombines a modify and find operation to a single atomic operation.\n\n\t\tThrows Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/findAndModify+Command)\n\t\n"
						}
					],
					"name": "findAndModify(T,U,V)",
					"comment": "\n\t\tCombines a modify and find operation to a single atomic operation.\n\n\t\tThrows Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/findAndModify+Command)\n\t\n"
				},
				{
					"kind": "template",
					"line": 163,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 163,
							"type": "ulong(T query)",
							"name": "count",
							"comment": "\n\t\tCounts the results of the specified query expression.\n\n\t\tThrows Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{count%28%29}})\n\t\n"
						}
					],
					"name": "count(T)",
					"comment": "\n\t\tCounts the results of the specified query expression.\n\n\t\tThrows Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{count%28%29}})\n\t\n"
				}
			],
			"name": "MongoCollection",
			"comment": "\n\tRepresents a single collection inside a MongoDB.\n\n\tAll methods take arbitrary types for Bson arguments. serializeToBson() is implicitly called on\n\tthem before they are send to the database. The following example shows some possible ways\n\tto specify objects.\n\n\tExamples:\n\n\t---\n\tMongoDB db = connectMongoDB(\"127.0.0.1\");\n\tMongoCollection users = m_db[\"myapp.users\"];\n\n\t// canonical version using a Bson object\n\tusers.insert(Bson([\"name\": Bson(\"admin\"), \"password\": Bson(\"secret\")]));\n\n\t// short version using a string[string] AA that is automatically\n\t// serialized to Bson\n\tusers.insert([\"name\": \"admin\", \"password\": \"secret\"]);\n\n\t// BSON specific types are also serialized automatically\n\tBsonObjectId uid = ...;\n\tBson usr = users.find([\"_id\": uid]);\n\n\t// JSON is another possibility\n\tJson jusr = parseJson(\"{\\\"name\\\": \\\"admin\\\", \\\"password\\\": \\\"secret\\\"}\");\n\tusers.insert(jusr);\n\t---\n"
		}
	],
	"name": "vibe.db.mongo.collection",
	"comment": "\n\tMongoCollection class\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\textfilter\\urlencode.d",
	"members": [
		{
			"kind": "function",
			"line": 19,
			"protection": "public",
			"type": "string(string str)",
			"name": "urlEncode",
			"comment": " Returns the URL encoded version of a given string.\n"
		},
		{
			"kind": "function",
			"line": 29,
			"protection": "public",
			"type": "string(string str)",
			"name": "urlDecode",
			"comment": " Returns the decoded version of a given URL encoded string.\n"
		},
		{
			"kind": "template",
			"line": 39,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 39,
					"type": "void(ref R dst, string str, string allowed_chars = null)",
					"name": "filterUrlEncode",
					"comment": " Writes the URL encoded version of the given string to an output range.\n"
				}
			],
			"name": "filterUrlEncode(R)",
			"comment": " Writes the URL encoded version of the given string to an output range.\n"
		},
		{
			"kind": "template",
			"line": 63,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 63,
					"type": "void(ref R dst, string str)",
					"name": "filterUrlDecode",
					"comment": " Writes the decoded version of the given URL encoded string to an output range.\n"
				}
			],
			"name": "filterUrlDecode(R)",
			"comment": " Writes the decoded version of the given URL encoded string to an output range.\n"
		}
	],
	"name": "vibe.textfilter.urlencode",
	"comment": "\n\tURL-encode implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\url.d",
	"members": [
		{
			"kind": "struct",
			"line": 24,
			"protection": "public",
			"members": [
				{
					"kind": "constructor",
					"line": 38,
					"protection": "public",
					"type": "ref Url(string schema, string host, ushort port, Path path)",
					"name": "this",
					"comment": " Constructs a new URL object from its components.\n"
				},
				{
					"kind": "function",
					"line": 51,
					"protection": "public",
					"type": "Url(string str)",
					"name": "parse",
					"comment": " Constructs a URL from its string representation.\n\n\t\tTODO: additional validation required (e.g. valid host and user names and port)\n\t\n"
				},
				{
					"kind": "function",
					"line": 110,
					"protection": "public",
					"type": "const @property string()",
					"name": "schema",
					"comment": " The schema/protocol part of the URL\n"
				},
				{
					"kind": "function",
					"line": 112,
					"protection": "public",
					"type": "@property void(string v)",
					"name": "schema",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 115,
					"protection": "public",
					"type": "const @property string()",
					"name": "pathString",
					"comment": " The path part of the URL in the original string form\n"
				},
				{
					"kind": "function",
					"line": 118,
					"protection": "public",
					"type": "const @property Path()",
					"name": "path",
					"comment": " The path part of the URL\n"
				},
				{
					"kind": "function",
					"line": 120,
					"protection": "public",
					"type": "@property void(Path p)",
					"name": "path",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 128,
					"protection": "public",
					"type": "const @property string()",
					"name": "host",
					"comment": " The host part of the URL (depends on the schema)\n"
				},
				{
					"kind": "function",
					"line": 130,
					"protection": "public",
					"type": "@property void(string v)",
					"name": "host",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 133,
					"protection": "public",
					"type": "const @property ushort()",
					"name": "port",
					"comment": " The port part of the URL (optional)\n"
				},
				{
					"kind": "function",
					"line": 135,
					"protection": "public",
					"type": "@property void(ushort v)",
					"name": "port",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 138,
					"protection": "public",
					"type": "const @property string()",
					"name": "username",
					"comment": " The user name part of the URL (optional)\n"
				},
				{
					"kind": "function",
					"line": 140,
					"protection": "public",
					"type": "@property void(string v)",
					"name": "username",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 143,
					"protection": "public",
					"type": "const @property string()",
					"name": "password",
					"comment": " The password part of the URL (optional)\n"
				},
				{
					"kind": "function",
					"line": 145,
					"protection": "public",
					"type": "@property void(string v)",
					"name": "password",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 148,
					"protection": "public",
					"type": "const @property string()",
					"name": "queryString",
					"comment": " The query string part of the URL (optional)\n"
				},
				{
					"kind": "function",
					"line": 150,
					"protection": "public",
					"type": "@property void(string v)",
					"name": "queryString",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 153,
					"protection": "public",
					"type": "const @property string()",
					"name": "anchor",
					"comment": " The anchor part of the URL (optional)\n"
				},
				{
					"kind": "function",
					"line": 156,
					"protection": "public",
					"type": "const @property string()",
					"name": "localURI",
					"comment": " The path part plus query string and anchor\n"
				},
				{
					"kind": "function",
					"line": 172,
					"protection": "public",
					"type": "@property void(string str)",
					"name": "localURI",
					"comment": " ditto\n"
				},
				{
					"kind": "function",
					"line": 191,
					"protection": "public",
					"type": "const @property Url()",
					"name": "parentUrl",
					"comment": " The URL to the parent path with query string and anchor stripped.\n"
				},
				{
					"kind": "function",
					"line": 203,
					"protection": "public",
					"type": "const string()",
					"name": "toString",
					"comment": " Converts this URL object to its string representation.\n"
				},
				{
					"kind": "function",
					"line": 224,
					"protection": "public",
					"type": "const bool(const(Url) rhs)",
					"name": "startsWith"
				},
				{
					"kind": "template",
					"line": 231,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 231,
							"type": "const Url(Path rhs)",
							"name": "opBinary"
						}
					],
					"name": "opBinary(string OP) if (OP == \"~\")"
				},
				{
					"kind": "template",
					"line": 232,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 232,
							"type": "const Url(PathEntry rhs)",
							"name": "opBinary"
						}
					],
					"name": "opBinary(string OP) if (OP == \"~\")"
				},
				{
					"kind": "template",
					"line": 233,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 233,
							"type": "void(Path rhs)",
							"name": "opOpAssign"
						}
					],
					"name": "opOpAssign(string OP) if (OP == \"~\")"
				},
				{
					"kind": "template",
					"line": 234,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 234,
							"type": "void(PathEntry rhs)",
							"name": "opOpAssign"
						}
					],
					"name": "opOpAssign(string OP) if (OP == \"~\")"
				},
				{
					"kind": "function",
					"line": 236,
					"protection": "public",
					"type": "const bool(ref const(Url) rhs)",
					"name": "opEquals"
				},
				{
					"kind": "function",
					"line": 243,
					"protection": "public",
					"type": "const int(ref const(Url) rhs)",
					"name": "opCmp"
				},
				{
					"kind": "function",
					"line": 24,
					"protection": "public",
					"type": "bool(const(void*) p, const(void*) q)",
					"name": "__xopEquals"
				}
			],
			"name": "Url",
			"comment": "\n\tRepresents a URL decomposed into its components.\n"
		}
	],
	"name": "vibe.inet.url",
	"comment": "\n\tURL parsing routines.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\urltransfer.d",
	"members": [
		{
			"kind": "function",
			"line": 26,
			"protection": "public",
			"type": "InputStream(string url_, HttpClient client = null)",
			"name": "download",
			"comment": "\n\tDownloads a file from the specified URL.\n\n\tAny redirects will be followed until the actual file resource is reached or if the redirection\n\tlimit of 10 is reached. Note that only HTTP(S) is currently supported.\n"
		},
		{
			"kind": "function",
			"line": 66,
			"protection": "public",
			"type": "InputStream(Url url, HttpClient client = null)",
			"name": "download",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 72,
			"protection": "public",
			"type": "void(string url, string filename)",
			"name": "download",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 81,
			"protection": "public",
			"type": "void(Url url, Path filename)",
			"name": "download",
			"comment": " ditto\n"
		}
	],
	"name": "vibe.inet.urltransfer",
	"comment": "\n\tDownloading and uploading of data from/to URLs.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\utils\\memory.d",
	"members": [
		{
			"kind": "function",
			"line": 21,
			"protection": "public",
			"type": "Allocator()",
			"name": "defaultAllocator"
		},
		{
			"kind": "function",
			"line": 36,
			"protection": "public",
			"type": "Allocator()",
			"name": "manualAllocator"
		},
		{
			"kind": "template",
			"line": 47,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 47,
					"type": "(Allocator allocator, ARGS args)",
					"name": "allocObject"
				}
			],
			"name": "allocObject(T,bool MANAGED = true,ARGS...)"
		},
		{
			"kind": "template",
			"line": 64,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 64,
					"type": "T[](Allocator allocator, size_t n)",
					"name": "allocArray"
				}
			],
			"name": "allocArray(T,bool MANAGED = true)"
		},
		{
			"kind": "interface",
			"line": 85,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 86,
					"protection": "public",
					"type": "void[](uint sz)",
					"name": "alloc"
				},
				{
					"kind": "function",
					"line": 87,
					"protection": "public",
					"type": "void[](void[] mem, uint new_sz)",
					"name": "realloc"
				},
				{
					"kind": "function",
					"line": 88,
					"protection": "public",
					"type": "void(void[] mem)",
					"name": "free"
				}
			],
			"name": "Allocator"
		},
		{
			"kind": "class",
			"line": 91,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 99,
					"protection": "public",
					"type": "DebugAllocator(Allocator base_allocator)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 104,
					"protection": "public",
					"type": "const @property uint()",
					"name": "allocatedBlockCount"
				},
				{
					"kind": "function",
					"line": 105,
					"protection": "public",
					"type": "const @property uint()",
					"name": "bytesAllocated"
				},
				{
					"kind": "function",
					"line": 106,
					"protection": "public",
					"type": "const @property uint()",
					"name": "maxBytesAllocated"
				},
				{
					"kind": "function",
					"line": 108,
					"protection": "public",
					"type": "void[](uint sz)",
					"name": "alloc"
				},
				{
					"kind": "function",
					"line": 122,
					"protection": "public",
					"type": "void[](void[] mem, uint new_size)",
					"name": "realloc"
				},
				{
					"kind": "function",
					"line": 136,
					"protection": "public",
					"type": "void(void[] mem)",
					"name": "free"
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "DebugAllocator"
		},
		{
			"kind": "class",
			"line": 147,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "function",
					"line": 148,
					"protection": "public",
					"type": "void[](uint sz)",
					"name": "alloc"
				},
				{
					"kind": "function",
					"line": 149,
					"protection": "public",
					"type": "void[](void[] mem, uint new_size)",
					"name": "realloc"
				},
				{
					"kind": "function",
					"line": 150,
					"protection": "public",
					"type": "void(void[] mem)",
					"name": "free"
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "MallocAllocator"
		},
		{
			"kind": "class",
			"line": 153,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "function",
					"line": 154,
					"protection": "public",
					"type": "void[](uint sz)",
					"name": "alloc"
				},
				{
					"kind": "function",
					"line": 155,
					"protection": "public",
					"type": "void[](void[] mem, uint new_size)",
					"name": "realloc"
				},
				{
					"kind": "function",
					"line": 156,
					"protection": "public",
					"type": "void(void[] mem)",
					"name": "free"
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "GCAllocator"
		},
		{
			"kind": "class",
			"line": 159,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 165,
					"protection": "public",
					"type": "AutoFreeListAllocator(Allocator base_allocator)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 173,
					"protection": "public",
					"type": "void[](uint sz)",
					"name": "alloc"
				},
				{
					"kind": "function",
					"line": 186,
					"protection": "public",
					"type": "void[](void[] data, uint sz)",
					"name": "realloc"
				},
				{
					"kind": "function",
					"line": 198,
					"protection": "public",
					"type": "void(void[] data)",
					"name": "free"
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "AutoFreeListAllocator"
		},
		{
			"kind": "class",
			"line": 210,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "struct",
					"line": 211,
					"protection": "public",
					"members": [
						{
							"kind": "variable",
							"line": 211,
							"protection": "public",
							"type": "Pool*",
							"name": "next"
						},
						{
							"kind": "variable",
							"line": 211,
							"protection": "public",
							"type": "void[]",
							"name": "data"
						},
						{
							"kind": "variable",
							"line": 211,
							"protection": "public",
							"type": "void[]",
							"name": "remaining"
						}
					],
					"name": "Pool"
				},
				{
					"kind": "struct",
					"line": 212,
					"protection": "public",
					"members": [
						{
							"kind": "variable",
							"line": 212,
							"protection": "public",
							"type": "Destructor*",
							"name": "next"
						},
						{
							"kind": "variable",
							"line": 212,
							"protection": "public",
							"type": "void function(void*)",
							"name": "destructor"
						},
						{
							"kind": "variable",
							"line": 212,
							"protection": "public",
							"type": "void*",
							"name": "object"
						}
					],
					"name": "Destructor"
				},
				{
					"kind": "constructor",
					"line": 221,
					"protection": "public",
					"type": "PoolAllocator(uint pool_size, Allocator base)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 227,
					"protection": "public",
					"type": "void[](uint sz)",
					"name": "alloc"
				},
				{
					"kind": "function",
					"line": 262,
					"protection": "public",
					"type": "void[](void[] arr, uint newsize)",
					"name": "realloc"
				},
				{
					"kind": "function",
					"line": 281,
					"protection": "public",
					"type": "void(void[] mem)",
					"name": "free"
				},
				{
					"kind": "function",
					"line": 285,
					"protection": "public",
					"type": "void()",
					"name": "freeAll"
				},
				{
					"kind": "function",
					"line": 306,
					"protection": "public",
					"type": "void()",
					"name": "reset"
				},
				{
					"kind": "template",
					"line": 320,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 320,
							"type": "(void* ptr)",
							"name": "destroy"
						}
					],
					"name": "destroy(T)"
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "PoolAllocator"
		},
		{
			"kind": "class",
			"line": 327,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 338,
					"protection": "public",
					"type": "FreeListAlloc(uint elem_size, Allocator base_allocator)",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 346,
					"protection": "public",
					"type": "const @property uint()",
					"name": "elementSize"
				},
				{
					"kind": "function",
					"line": 348,
					"protection": "public",
					"type": "void[](uint sz)",
					"name": "alloc"
				},
				{
					"kind": "function",
					"line": 367,
					"protection": "public",
					"type": "void[](void[] mem, uint sz)",
					"name": "realloc"
				},
				{
					"kind": "function",
					"line": 374,
					"protection": "public",
					"type": "void(void[] mem)",
					"name": "free"
				}
			],
			"interfaces": [
				"Allocator"
			],
			"name": "FreeListAlloc"
		},
		{
			"kind": "template",
			"line": 385,
			"protection": "public",
			"members": [
				{
					"kind": "variable",
					"line": 387,
					"name": "ElemSize"
				},
				{
					"kind": "template",
					"line": 395,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 395,
							"type": "TR(ARGS args)",
							"name": "alloc"
						}
					],
					"name": "alloc(ARGS...)"
				},
				{
					"kind": "function",
					"line": 404,
					"type": "void(TR obj)",
					"name": "free"
				}
			],
			"name": "FreeListObjectAlloc(T,bool USE_GC = true,bool INIT = true)"
		},
		{
			"kind": "template",
			"line": 415,
			"protection": "public",
			"members": [],
			"name": "AllocSize(T)"
		},
		{
			"kind": "struct",
			"line": 422,
			"protection": "public",
			"members": [
				{
					"kind": "struct",
					"line": 422,
					"protection": "public",
					"members": [
						{
							"kind": "variable",
							"line": 423,
							"name": "ElemSize"
						},
						{
							"kind": "variable",
							"line": 431,
							"type": "TR",
							"name": "m_object"
						},
						{
							"kind": "variable",
							"line": 432,
							"type": "size_t",
							"name": "m_magic"
						},
						{
							"kind": "template",
							"line": 434,
							"protection": "public",
							"members": [
								{
									"kind": "function",
									"line": 434,
									"type": "FreeListRef(ARGS args)",
									"name": "opCall"
								}
							],
							"name": "opCall(ARGS...)"
						},
						{
							"kind": "function",
							"line": 466,
							"type": "void(FreeListRef other)",
							"name": "opAssign"
						},
						{
							"kind": "function",
							"line": 476,
							"type": "void()",
							"name": "clear"
						},
						{
							"kind": "function",
							"line": 499,
							"type": "const const(TR)()",
							"name": "get"
						},
						{
							"kind": "function",
							"line": 500,
							"type": "TR()",
							"name": "get"
						},
						{
							"kind": "function",
							"line": 503,
							"type": "int()",
							"name": "refCount"
						}
					],
					"name": "FreeListRef"
				}
			],
			"name": "FreeListRef(T,bool INIT = true)"
		}
	],
	"name": "vibe.utils.memory",
	"comment": "\n\tUtiltiy functions for memory management\n\n\tNote that this module currently is a big sand box for testing allocation related stuff.\n\tNothing here, including the interfaces, is final but rather a lot of experimentation.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\appmain.d",
	"members": [
		{
			"kind": "function",
			"line": 33,
			"protection": "public",
			"type": "int(string[] args)",
			"name": "main",
			"comment": "\n\tThe predefined vibe.d application entry point.\n\n\tThis function will automatically be executed if you import the module vibe.d in your code. It\n\twill perform default command line parsing and starts the event loop.\n"
		}
	],
	"name": "vibe.appmain",
	"comment": "\n\tProvides vibe based applications with a central program entry point.\n\n\tThis module is included automatically through the import 'vibe.d'. It will provide a default\n\tapplication entry point which parses command line arguments, reads the global vibe configuration\n\tfile, and starts the event loop.\n\n\tThe application itself then just has to initialize itself from within a 'static this' module\n\tconstructor and perform the appropriate calls to listen for connections or other operations.\n\n\tIf you want to provide your own main() function, you have to import 'vibe.vibe' instead of\n\t'vibe.d'. Be sure to call start() at the end of your main function in this case. Also beware\n\tthat any global configuration is not applied in this case and features such as priviledge\n\tlowering are not in place.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\crypto\\passwordhash.d",
	"members": [
		{
			"kind": "function",
			"line": 37,
			"protection": "public",
			"type": "string(string password, string additional_salt = null)",
			"name": "generateSimplePasswordHash",
			"comment": "\n\tGenerates a psasword hash using MD5 together with a 32-bit salt.\n\n\tParams:\n\t\tpassword = The password for which a one-way hash is to be computed\n\t\tadditional_salt = An optional string that is used to compute the final\n\t\t\thash. The same string must be given to testSimplePassword to\n\t\t\tverify a password later. If this string is kept secret, it can\n\t\t\tenhance the security of this function.\n\n\tReturns:\n\t\tA base64 encoded string containing the salt and the hash value is returned.\n\n\tRemarks:\n\t\tMD5 is not considered safe and is computationally cheap. Although the\n\t\tuse of salt helps a bit, using this fuction is discouraged for systems\n\t\twhere security matters.\n\n\tSee_Also:\n\t\ttestSimplePasswordHash, vibe.crypto.md5\n"
		},
		{
			"kind": "function",
			"line": 62,
			"protection": "public",
			"type": "bool(string hashstring, string password, string additional_salt = null)",
			"name": "testSimplePasswordHash",
			"comment": "\n\tTests a password hash generated using generateSimplePasswordHash.\n\n\tParams:\n\t\thashstring: The string that was returned by a call to\n\t\t\tgenerateSimplePasswordHash\n\t\tpassword: Password string to test against the hash\n\t\tadditional_salt: The same optional salt that was given to the original\n\t\t\tcall to generateSimplePasswordHash\n\n\tReturns:\n\t\tReturns true iff the password matches the specified hash.\n\n\tSee_Also:\n\t\tgenerateSimplePasswordHash, vibe.crypto.md5\n"
		}
	],
	"name": "vibe.crypto.passwordhash",
	"comment": "\n\tPassword hashing routines\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\utils\\array.d",
	"members": [
		{
			"kind": "template",
			"line": 16,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 16,
					"type": "void(ref T[] array, T item)",
					"name": "removeFromArray"
				}
			],
			"name": "removeFromArray(T)"
		},
		{
			"kind": "template",
			"line": 25,
			"protection": "public",
			"members": [
				{
					"kind": "function",
					"line": 25,
					"type": "void(ref T[] array, size_t idx)",
					"name": "removeFromArrayIdx"
				}
			],
			"name": "removeFromArrayIdx(T)"
		},
		{
			"kind": "struct",
			"line": 32,
			"protection": "public",
			"members": [
				{
					"kind": "struct",
					"line": 32,
					"protection": "public",
					"members": [
						{
							"kind": "alias",
							"line": 33,
							"type": "Unqual!(E)",
							"name": "ElemType"
						},
						{
							"kind": "variable",
							"line": 35,
							"type": "ElemType[]",
							"name": "m_data"
						},
						{
							"kind": "variable",
							"line": 36,
							"type": "ElemType[]",
							"name": "m_remaining"
						},
						{
							"kind": "variable",
							"line": 37,
							"type": "Allocator",
							"name": "m_alloc"
						},
						{
							"kind": "constructor",
							"line": 40,
							"type": "(Allocator alloc)",
							"name": "this"
						},
						{
							"kind": "function",
							"line": 47,
							"type": "void(size_t amt)",
							"name": "reserve"
						},
						{
							"kind": "function",
							"line": 60,
							"type": "void(E el)",
							"name": "put"
						},
						{
							"kind": "function",
							"line": 67,
							"type": "void(ArrayType arr)",
							"name": "put"
						},
						{
							"kind": "function",
							"line": 104,
							"type": "ArrayType()",
							"name": "data"
						},
						{
							"kind": "function",
							"line": 106,
							"type": "void(size_t min_free)",
							"name": "grow"
						}
					],
					"name": "AllocAppender"
				}
			],
			"name": "AllocAppender(ArrayType : E[],E)"
		},
		{
			"kind": "class",
			"line": 118,
			"protection": "public",
			"members": [
				{
					"kind": "class",
					"line": 118,
					"protection": "public",
					"members": [
						{
							"kind": "alias",
							"line": 119,
							"type": "Unqual!(E)",
							"name": "ElemType"
						},
						{
							"kind": "variable",
							"line": 121,
							"type": "ElemType[NELEM]",
							"name": "m_data"
						},
						{
							"kind": "variable",
							"line": 122,
							"type": "ElemType[]",
							"name": "m_remaining"
						},
						{
							"kind": "constructor",
							"line": 125,
							"type": "()",
							"name": "this"
						},
						{
							"kind": "function",
							"line": 130,
							"type": "void(E el)",
							"name": "put"
						},
						{
							"kind": "function",
							"line": 160,
							"type": "void(ArrayType arr)",
							"name": "put"
						},
						{
							"kind": "function",
							"line": 166,
							"type": "ArrayType()",
							"name": "data"
						}
					],
					"name": "FixedAppender"
				}
			],
			"name": "FixedAppender(ArrayType : E[],uint NELEM,E)"
		}
	],
	"name": "vibe.utils.array",
	"comment": "\n\tUtiltiy functions for array processing\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\memory.d",
	"members": [
		{
			"kind": "class",
			"line": 22,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 27,
					"protection": "public",
					"type": "MemoryOutputStream(Allocator alloc = defaultAllocator())",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 33,
					"protection": "public",
					"type": "void(uint nbytes)",
					"name": "reserve",
					"comment": " Reserves space for data - useful for optimization.\n"
				},
				{
					"kind": "function",
					"line": 39,
					"protection": "public",
					"type": "@property ubyte[]()",
					"name": "data",
					"comment": " An array with all data written to the stream so far.\n"
				},
				{
					"kind": "function",
					"line": 41,
					"protection": "public",
					"type": "void(const(ubyte[]) bytes, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 46,
					"protection": "public",
					"type": "void()",
					"name": "flush"
				},
				{
					"kind": "function",
					"line": 50,
					"protection": "public",
					"type": "void()",
					"name": "finalize"
				},
				{
					"kind": "function",
					"line": 54,
					"protection": "public",
					"type": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
					"name": "write"
				}
			],
			"interfaces": [
				"OutputStream"
			],
			"name": "MemoryOutputStream",
			"comment": " OutputStream that collects the written data in memory and allows to query it\n\tas a byte array.\n"
		},
		{
			"kind": "class",
			"line": 64,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "constructor",
					"line": 78,
					"protection": "public",
					"type": "MemoryStream(ubyte[] data, bool writable = true)",
					"name": "this",
					"comment": " Creates a new stream with the given data array as its contents.\n\n\t\tParams:\n\t\t\tdata = The data array\n\t\t\twritable = Flag that controls whether the data array may be changed\n\t\n"
				},
				{
					"kind": "function",
					"line": 89,
					"protection": "public",
					"type": "@property void(uint size)",
					"name": "peekWindow",
					"comment": " Controls the maximum size of the array returned by peek().\n\n\t\tThis property is mainly useful for debugging purposes.\n\t\n"
				},
				{
					"kind": "function",
					"line": 91,
					"protection": "public",
					"type": "@property bool()",
					"name": "empty"
				},
				{
					"kind": "function",
					"line": 92,
					"protection": "public",
					"type": "@property ulong()",
					"name": "leastSize"
				},
				{
					"kind": "function",
					"line": 93,
					"protection": "public",
					"type": "@property bool()",
					"name": "dataAvailableForRead"
				},
				{
					"kind": "function",
					"line": 94,
					"protection": "public",
					"type": "const nothrow @property ulong()",
					"name": "size"
				},
				{
					"kind": "function",
					"line": 95,
					"protection": "public",
					"type": "const nothrow @property bool()",
					"name": "readable"
				},
				{
					"kind": "function",
					"line": 96,
					"protection": "public",
					"type": "const nothrow @property bool()",
					"name": "writable"
				},
				{
					"kind": "function",
					"line": 98,
					"protection": "public",
					"type": "void(ulong offset)",
					"name": "seek"
				},
				{
					"kind": "function",
					"line": 99,
					"protection": "public",
					"type": "nothrow ulong()",
					"name": "tell"
				},
				{
					"kind": "function",
					"line": 100,
					"protection": "public",
					"type": "const(ubyte)[]()",
					"name": "peek"
				},
				{
					"kind": "function",
					"line": 101,
					"protection": "public",
					"type": "void(ubyte[] dst)",
					"name": "read"
				},
				{
					"kind": "function",
					"line": 102,
					"protection": "public",
					"type": "void(const(ubyte[]) bytes, bool do_flush = true)",
					"name": "write"
				},
				{
					"kind": "function",
					"line": 103,
					"protection": "public",
					"type": "void()",
					"name": "flush"
				},
				{
					"kind": "function",
					"line": 104,
					"protection": "public",
					"type": "void()",
					"name": "finalize"
				},
				{
					"kind": "function",
					"line": 105,
					"protection": "public",
					"type": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
					"name": "write"
				}
			],
			"interfaces": [
				"RandomAccessStream"
			],
			"name": "MemoryStream",
			"comment": "\n\tProvides a random access stream interface for accessing an array of bytes.\n"
		}
	],
	"name": "vibe.stream.memory",
	"comment": "\n\tIn-memory streams\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
},
{
	"kind": "module",
	"file": "..\\source\\vibe\\http\\client.d",
	"members": [
		{
			"kind": "function",
			"line": 40,
			"protection": "public",
			"type": "HttpClientResponse(string url, scope void delegate(HttpClientRequest req) requester = null)",
			"name": "requestHttp",
			"comment": "\n\n\n\tPerforms a HTTP request on the specified URL.\n\n\tThe 'requester' parameter allows to customize the request and to specify the request body for\n\tnon-GET requests.\n"
		},
		{
			"kind": "function",
			"line": 45,
			"protection": "public",
			"type": "HttpClientResponse(Url url, scope void delegate(HttpClientRequest req) requester = null)",
			"name": "requestHttp",
			"comment": " ditto\n"
		},
		{
			"kind": "function",
			"line": 67,
			"protection": "public",
			"type": "LockedConnection!(HttpClient)(string host, ushort port = cast(ushort)0, bool ssl = false)",
			"name": "connectHttp",
			"comment": "\n\tReturns a HttpClient proxy that is connected to the specified host.\n\n\tInternally, a connection pool is used to reuse already existing connections.\n"
		},
		{
			"kind": "class",
			"line": 92,
			"protection": "public",
			"base": "Object",
			"members": [
				{
					"kind": "variable",
					"line": 93,
					"protection": "public",
					"type": "int",
					"name": "MaxHttpHeaderLineLength"
				},
				{
					"kind": "constructor",
					"line": 105,
					"protection": "public",
					"type": "HttpClient()",
					"name": "this"
				},
				{
					"kind": "function",
					"line": 110,
					"protection": "public",
					"type": "void()",
					"name": "acquire"
				},
				{
					"kind": "function",
					"line": 111,
					"protection": "public",
					"type": "void()",
					"name": "release"
				},
				{
					"kind": "function",
					"line": 112,
					"protection": "public",
					"type": "bool()",
					"name": "isOwner"
				},
				{
					"kind": "function",
					"line": 114,
					"protection": "public",
					"type": "void(string server, ushort port = cast(ushort)80, bool ssl = false)",
					"name": "connect"
				},
				{
					"kind": "function",
					"line": 123,
					"protection": "public",
					"type": "void()",
					"name": "disconnect"
				},
				{
					"kind": "function",
					"line": 133,
					"protection": "public",
					"type": "HttpClientResponse(scope void delegate(HttpClientRequest req) requester)",
					"name": "request"
				}
			],
			"interfaces": [
				"EventedObject"
			],
			"name": "HttpClient",
			"comment": "\n\n"
		},
		{
			"kind": "class",
			"line": 206,
			"protection": "public",
			"base": "HttpRequest",
			"members": [
				{
					"kind": "function",
					"line": 216,
					"protection": "public",
					"type": "void(InputStream data, ulong length)",
					"name": "writeBody"
				},
				{
					"kind": "function",
					"line": 222,
					"protection": "public",
					"type": "void(ubyte[] data, string content_type = null)",
					"name": "writeBody"
				},
				{
					"kind": "function",
					"line": 229,
					"protection": "public",
					"type": "void(string[string] form)",
					"name": "writeBody"
				},
				{
					"kind": "template",
					"line": 234,
					"protection": "public",
					"members": [
						{
							"kind": "function",
							"line": 234,
							"type": "void(T data)",
							"name": "writeJsonBody"
						}
					],
					"name": "writeJsonBody(T)"
				},
				{
					"kind": "function",
					"line": 239,
					"protection": "public",
					"type": "void(MultiPart part)",
					"name": "writePart"
				},
				{
					"kind": "function",
					"line": 244,
					"protection": "public",
					"type": "@property OutputStream()",
					"name": "bodyWriter"
				}
			],
			"name": "HttpClientRequest"
		},
		{
			"kind": "class",
			"line": 272,
			"protection": "public",
			"base": "HttpResponse",
			"members": [
				{
					"kind": "variable",
					"line": 273,
					"protection": "public",
					"type": "vibe.stream.stream.InputStream",
					"name": "bodyReader"
				},
				{
					"kind": "function",
					"line": 275,
					"protection": "public",
					"type": "Json()",
					"name": "readJson"
				}
			],
			"name": "HttpClientResponse"
		}
	],
	"name": "vibe.http.client",
	"comment": "\n\tA simple HTTP/1.1 client implementation.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
}
]