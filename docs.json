{
"vibe.data.bson": {
	"kind": "module",
	"file": "..\\source\\vibe\\data\\bson.d",
	"ddoc": "\n\tBSON serialization and value handling.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"aliases": [
			[
				{
					"kind": "alias",
					"protection": "public",
					"nestedName": "bdata_t",
					"name": "bdata_t"
				}
			]
		],
		"structs": [
			[
				{
					"ddoc": "\n\tRepresents a BSON value.\n\n\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"ddoc": "\n\t\tCreates a new BSON value using raw data.\n\n\t\tA slice of the first bytes of 'data' is stored, containg the data related to the value. An\n\t\texception is thrown if 'data' is too short.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(Type type, immutable(ubyte)[] data)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Type",
													"qualifiedName": "Type",
													"name": "Type",
													"moduleName": "",
													"attributes": []
												},
												"name": "type"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"modifiers": [
															"immutable"
														],
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							],
							[
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(double value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(string value, Type type = cast(Type)cast(ubyte)2u)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											},
											{
												"defaultValue": "cast(Type",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Type",
													"qualifiedName": "Type",
													"name": "Type",
													"moduleName": "",
													"attributes": []
												},
												"name": "type"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(Bson[string] value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"keyType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"typeClass": "associative array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Bson",
														"qualifiedName": "vibe.data.bson.Bson",
														"name": "Bson",
														"moduleName": "vibe.data.bson"
													},
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(Bson[] value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Bson",
														"qualifiedName": "vibe.data.bson.Bson",
														"name": "Bson",
														"moduleName": "vibe.data.bson"
													},
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(BsonBinData value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "BsonBinData",
													"qualifiedName": "vibe.data.bson.BsonBinData",
													"name": "BsonBinData",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(BsonObjectID value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "BsonObjectID",
													"qualifiedName": "vibe.data.bson.BsonObjectID",
													"name": "BsonObjectID",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(bool value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(BsonDate value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "BsonDate",
													"qualifiedName": "vibe.data.bson.BsonDate",
													"name": "BsonDate",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(typeof(null))",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"typeclass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "typeof",
														"qualifiedName": "typeof",
														"name": "typeof",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "null",
																"qualifiedName": "null",
																"name": "null",
																"moduleName": "",
																"attributes": []
															}
														}
													],
													"attributes": []
												}
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(BsonRegex value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "BsonRegex",
													"qualifiedName": "vibe.data.bson.BsonRegex",
													"name": "BsonRegex",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(int value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(BsonTimestamp value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "BsonTimestamp",
													"qualifiedName": "vibe.data.bson.BsonTimestamp",
													"name": "BsonTimestamp",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(long value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tInitializes a new BSON value from the given D type.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Bson.this",
									"type": {
										"text": "ref Bson(Json value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"enums": [
							[
								{
									"kind": "enum",
									"protection": "public",
									"members": [
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.End",
											"name": "End"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Double",
											"name": "Double"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.String",
											"name": "String"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Object",
											"name": "Object"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Array",
											"name": "Array"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.BinData",
											"name": "BinData"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Undefined",
											"name": "Undefined"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.ObjectID",
											"name": "ObjectID"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Bool",
											"name": "Bool"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Date",
											"name": "Date"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Null",
											"name": "Null"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Regex",
											"name": "Regex"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.DBRef",
											"name": "DBRef"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Code",
											"name": "Code"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Symbol",
											"name": "Symbol"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.CodeWScope",
											"name": "CodeWScope"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Int",
											"name": "Int"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Timestamp",
											"name": "Timestamp"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.Long",
											"name": "Long"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.MinKey",
											"name": "MinKey"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Bson.Type.MaxKey",
											"name": "MaxKey"
										}
									],
									"nestedName": "Bson.Type",
									"name": "Type",
									"baseType": {
										"kind": "type",
										"text": "ubyte",
										"typeClass": "primitive",
										"nestedName": "ubyte",
										"qualifiedName": "ubyte",
										"name": "ubyte",
										"moduleName": "",
										"attributes": []
									}
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.EmptyObject",
									"type": {
										"text": "@property Bson()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "EmptyObject"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns the raw data representing this BSON value (not including the field name and type).\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.data",
									"type": {
										"text": "const @property immutable(ubyte)[]()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"immutable"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "data"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.isNull",
									"type": {
										"text": "const bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "isNull"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.length",
									"type": {
										"text": "const @property uint()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "length"
								}
							],
							[
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(Bson other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(double value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(string value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(const(Bson[string]) value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"keyType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"typeClass": "associative array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Bson",
														"qualifiedName": "vibe.data.bson.Bson",
														"name": "Bson",
														"moduleName": "vibe.data.bson"
													},
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(const(Bson[]) value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Bson",
														"qualifiedName": "vibe.data.bson.Bson",
														"name": "Bson",
														"moduleName": "vibe.data.bson"
													},
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(BsonBinData value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "BsonBinData",
													"qualifiedName": "vibe.data.bson.BsonBinData",
													"name": "BsonBinData",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(BsonObjectID value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "BsonObjectID",
													"qualifiedName": "vibe.data.bson.BsonObjectID",
													"name": "BsonObjectID",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(bool value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(BsonDate value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "BsonDate",
													"qualifiedName": "vibe.data.bson.BsonDate",
													"name": "BsonDate",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(typeof(null))",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "typeof",
														"qualifiedName": "typeof",
														"name": "typeof",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "null",
																"qualifiedName": "null",
																"name": "null",
																"moduleName": "",
																"attributes": []
															}
														}
													],
													"attributes": []
												}
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(BsonRegex value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "BsonRegex",
													"qualifiedName": "vibe.data.bson.BsonRegex",
													"name": "BsonRegex",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(int value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(BsonTimestamp value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "BsonTimestamp",
													"qualifiedName": "vibe.data.bson.BsonTimestamp",
													"name": "BsonTimestamp",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(long value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAssigns a D type to a BSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opAssign",
									"type": {
										"text": "void(Json value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								}
							],
							[
								{
									"ddoc": "\n\t\tConverts the BSON value to a D value.\n\n\t\tIf the BSON type of the value does not match the D type, an exception is thrown.\n\t\n",
									"kind": "function",
									"templateName": "opCast(T)",
									"nestedName": "Bson.opCast",
									"type": {
										"text": "const T()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "opCast"
								},
								{
									"kind": "function",
									"ddoc": "\n\t\tConverts the BSON value to a D value.\n\n\t\tIf the BSON type of the value does not match the D type, an exception is thrown.\n\t\n",
									"templateName": "get(T)",
									"nestedName": "Bson.get",
									"type": {
										"text": "const T()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "get"
								}
							],
							[
								{
									"kind": "function",
									"ddoc": "\n\t\tAllows to access existing fields of a JSON object using dot syntax.\n\t\n",
									"templateName": "opDispatch(string prop)",
									"nestedName": "Bson.opDispatch",
									"type": {
										"text": "inout inout(Bson)()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [],
										"attributes": [
											"inout"
										]
									},
									"name": "opDispatch"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opEquals",
									"type": {
										"text": "const bool(ref const(Bson) other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opIndex",
									"type": {
										"text": "inout inout(Bson)(string idx)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "idx"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opIndex"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opIndex",
									"type": {
										"text": "inout inout(Bson)(uint idx)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "idx"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opIndex"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.opIndexAssign",
									"type": {
										"text": "void(Bson value, string idx)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "value"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "idx"
											}
										],
										"attributes": []
									},
									"name": "opIndexAssign"
								}
							],
							[
								{
									"ddoc": " Returns the native type for this BSON if it matches the current runtime type.\n\n\t\tIf the runtime type does not match the given native type, the 'def' parameter is returned\n\t\tinstead.\n\t\n",
									"kind": "function",
									"templateName": "opt(T)",
									"nestedName": "Bson.opt",
									"type": {
										"text": "inout inout(T)(T def = T.init)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"defaultValue": "T.init",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "def"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opt"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns the BSON type of this value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Bson.type",
									"type": {
										"text": "const @property Type()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Type",
											"qualifiedName": "Type",
											"name": "Type",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "type"
								}
							]
						]
					},
					"nestedName": "Bson",
					"name": "Bson"
				}
			],
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonBinData.this",
									"type": {
										"text": "ref BsonBinData(Type type, immutable(ubyte)[] data)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonBinData",
											"qualifiedName": "vibe.data.bson.BsonBinData",
											"name": "BsonBinData",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Type",
													"qualifiedName": "Type",
													"name": "Type",
													"moduleName": "",
													"attributes": []
												},
												"name": "type"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"modifiers": [
															"immutable"
														],
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"enums": [
							[
								{
									"kind": "enum",
									"protection": "public",
									"members": [
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.Generic",
											"name": "Generic"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.Function",
											"name": "Function"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.BinaryOld",
											"name": "BinaryOld"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.UUID",
											"name": "UUID"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.MD5",
											"name": "MD5"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "BsonBinData.Type.UserDefined",
											"name": "UserDefined"
										}
									],
									"nestedName": "BsonBinData.Type",
									"name": "Type",
									"baseType": {
										"kind": "type",
										"text": "ubyte",
										"typeClass": "primitive",
										"nestedName": "ubyte",
										"qualifiedName": "ubyte",
										"name": "ubyte",
										"moduleName": "",
										"attributes": []
									}
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonBinData.rawData",
									"type": {
										"text": "const @property immutable(ubyte)[]()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"immutable"
												],
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "rawData"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonBinData.type",
									"type": {
										"text": "const @property Type()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Type",
											"qualifiedName": "Type",
											"name": "Type",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "type"
								}
							]
						]
					},
					"nestedName": "BsonBinData",
					"name": "BsonBinData"
				}
			],
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonDate.this",
									"type": {
										"text": "ref BsonDate(long time)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonDate",
											"qualifiedName": "vibe.data.bson.BsonDate",
											"name": "BsonDate",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "time"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonDate.this",
									"type": {
										"text": "ref BsonDate(SysTime time)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonDate",
											"qualifiedName": "vibe.data.bson.BsonDate",
											"name": "BsonDate",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "SysTime",
													"qualifiedName": "SysTime",
													"name": "SysTime",
													"moduleName": "",
													"attributes": []
												},
												"name": "time"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.opCmp",
									"type": {
										"text": "const int(ref const(BsonDate) other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonDate",
													"qualifiedName": "vibe.data.bson.BsonDate",
													"name": "BsonDate",
													"moduleName": "vibe.data.bson",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opCmp"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.opEquals",
									"type": {
										"text": "const bool(ref const(BsonDate) other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "BsonDate",
													"qualifiedName": "vibe.data.bson.BsonDate",
													"name": "BsonDate",
													"moduleName": "vibe.data.bson",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.toString",
									"type": {
										"text": "const string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.toSysTime",
									"type": {
										"text": "const SysTime()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SysTime",
											"qualifiedName": "SysTime",
											"name": "SysTime",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toSysTime"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.value",
									"type": {
										"text": "const @property long()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "long",
											"qualifiedName": "long",
											"name": "long",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "value"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonDate.value",
									"type": {
										"text": "@property void(long v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "value"
								}
							]
						]
					},
					"nestedName": "BsonDate",
					"name": "BsonDate"
				}
			],
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonObjectID.this",
									"type": {
										"text": "ref BsonObjectID(const(ubyte[]) bytes)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonObjectID",
											"qualifiedName": "vibe.data.bson.BsonObjectID",
											"name": "BsonObjectID",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonObjectID.createDateID",
									"type": {
										"text": "BsonObjectID(SysTime date)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonObjectID",
											"qualifiedName": "vibe.data.bson.BsonObjectID",
											"name": "BsonObjectID",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "SysTime",
													"qualifiedName": "SysTime",
													"name": "SysTime",
													"moduleName": "",
													"attributes": []
												},
												"name": "date"
											}
										],
										"attributes": []
									},
									"name": "createDateID"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonObjectID.fromHexString",
									"type": {
										"text": "BsonObjectID(string str)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonObjectID",
											"qualifiedName": "vibe.data.bson.BsonObjectID",
											"name": "BsonObjectID",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "str"
											}
										],
										"attributes": []
									},
									"name": "fromHexString"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonObjectID.generate",
									"type": {
										"text": "BsonObjectID()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonObjectID",
											"qualifiedName": "vibe.data.bson.BsonObjectID",
											"name": "BsonObjectID",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "generate"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonObjectID.toString",
									"type": {
										"text": "const string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonObjectID.valid",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "valid"
								}
							]
						]
					},
					"nestedName": "BsonObjectID",
					"name": "BsonObjectID"
				}
			],
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonRegex.this",
									"type": {
										"text": "ref BsonRegex(string expr, string options)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonRegex",
											"qualifiedName": "vibe.data.bson.BsonRegex",
											"name": "BsonRegex",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "expr"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "options"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonRegex.expression",
									"type": {
										"text": "const @property string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "expression"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "BsonRegex.options",
									"type": {
										"text": "const @property string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "options"
								}
							]
						]
					},
					"nestedName": "BsonRegex",
					"name": "BsonRegex"
				}
			],
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "BsonTimestamp.this",
									"type": {
										"text": "ref BsonTimestamp(long time)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "BsonTimestamp",
											"qualifiedName": "vibe.data.bson.BsonTimestamp",
											"name": "BsonTimestamp",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "time"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						]
					},
					"nestedName": "BsonTimestamp",
					"name": "BsonTimestamp"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"templateName": "deserializeBson(T)",
					"nestedName": "deserializeBson",
					"type": {
						"text": "void(ref T dst, Bson src)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Bson",
									"qualifiedName": "vibe.data.bson.Bson",
									"name": "Bson",
									"moduleName": "vibe.data.bson",
									"attributes": []
								},
								"name": "src"
							}
						],
						"attributes": []
					},
					"name": "deserializeBson"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "fromBsonData(T)",
					"nestedName": "fromBsonData",
					"type": {
						"text": "T(in ubyte[] v)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "T",
							"qualifiedName": "T",
							"name": "T",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "ubyte",
										"qualifiedName": "ubyte",
										"name": "ubyte",
										"moduleName": ""
									},
									"attributes": [
										"in"
									]
								},
								"name": "v"
							}
						],
						"attributes": []
					},
					"name": "fromBsonData"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "putCString(R)",
					"nestedName": "putCString",
					"type": {
						"text": "void(R dst, string str)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": []
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "putCString"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "serializeToBson(T)",
					"nestedName": "serializeToBson",
					"type": {
						"text": "Bson(T value)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Bson",
							"qualifiedName": "vibe.data.bson.Bson",
							"name": "Bson",
							"moduleName": "vibe.data.bson"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "value"
							}
						],
						"attributes": []
					},
					"name": "serializeToBson"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "toBigEndianData(T)",
					"nestedName": "toBigEndianData",
					"type": {
						"text": "ubyte[](T v)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "ubyte",
								"qualifiedName": "ubyte",
								"name": "ubyte",
								"moduleName": ""
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "v"
							}
						],
						"attributes": []
					},
					"name": "toBigEndianData"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "toBsonData(T)",
					"nestedName": "toBsonData",
					"type": {
						"text": "ubyte[](T v)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "ubyte",
								"qualifiedName": "ubyte",
								"name": "ubyte",
								"moduleName": ""
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "v"
							}
						],
						"attributes": []
					},
					"name": "toBsonData"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "writeBson(R) if (isOutputRange!(R,ubyte))",
					"nestedName": "writeBson",
					"type": {
						"text": "Bson.Type(ref R dst, in const(Json) value)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Bson.Type",
							"qualifiedName": "Bson.Type",
							"name": "Type",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"modifiers": [
										"const"
									],
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": [
										"in"
									]
								},
								"name": "value"
							}
						],
						"attributes": []
					},
					"name": "writeBson"
				}
			]
		]
	},
	"name": "vibe.data.bson"
},
"vibe.templ.diet": {
	"kind": "module",
	"file": "..\\source\\vibe\\templ\\diet.d",
	"ddoc": "\n\tImplements a compile-time Diet template parser.\n\n\tDiet templates are an more or less compatible incarnation of Jade templates but with\n\tembedded D source instead of JavaScript. The Jade language specification is found at\n\t$(LINK https://github.com/visionmedia/jade) and provides a good overview of all the supported\n\tfeatures, as well as some that are not yet implemented for Diet templates.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"templates": [
			[
				{
					"kind": "template",
					"protection": "public",
					"members": {
					},
					"nestedName": "localAliases(int i,ALIASES...)",
					"name": "localAliases(int i,ALIASES...)"
				}
			],
			[
				{
					"kind": "template",
					"protection": "public",
					"members": {
					},
					"nestedName": "localAliasesCompat(int i,TYPES_AND_NAMES...)",
					"name": "localAliasesCompat(int i,TYPES_AND_NAMES...)"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"templateName": "_toString(T)",
					"nestedName": "_toString",
					"type": {
						"text": "string(T v)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "v"
							}
						],
						"attributes": []
					},
					"name": "_toString"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "buildSpecialTag(alias node_stack)",
					"nestedName": "buildSpecialTag",
					"type": {
						"text": "string(string tag, int level, ref bool in_string)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "tag"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "level"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "bool",
									"qualifiedName": "bool",
									"name": "bool",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "in_string"
							}
						],
						"attributes": []
					},
					"name": "buildSpecialTag"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "cttostring(T)",
					"nestedName": "cttostring",
					"type": {
						"text": "string(T x)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "x"
							}
						],
						"attributes": []
					},
					"name": "cttostring"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "dietParser(string template_file)",
					"nestedName": "dietParser",
					"type": {
						"text": "string()",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "dietParser"
				}
			],
			[
				{
					"ddoc": "\n\tParses the given diet template at compile time and writes the resulting\n\tHTML code into 'stream'.\n\n\tNote that this function currently suffers from multiple DMD bugs in conjunction with local\n\tvariables passed as alias template parameters.\n",
					"kind": "function",
					"templateName": "parseDietFile(string template_file,ALIASES...)",
					"nestedName": "parseDietFile",
					"type": {
						"text": "void(OutputStream stream__)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "OutputStream",
									"qualifiedName": "vibe.stream.stream.OutputStream",
									"name": "OutputStream",
									"moduleName": "vibe.stream.stream",
									"attributes": []
								},
								"name": "stream__"
							}
						],
						"attributes": []
					},
					"name": "parseDietFile"
				}
			],
			[
				{
					"ddoc": "\n\tCompatibility version of parseDietFile().\n\n\tThis function should only be called indiretly through HttpServerResponse.renderCompat().\n\n",
					"kind": "function",
					"templateName": "parseDietFileCompat(string template_file,TYPES_AND_NAMES...)",
					"nestedName": "parseDietFileCompat",
					"type": {
						"text": "void(OutputStream stream__, Variant[] args__)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "OutputStream",
									"qualifiedName": "vibe.stream.stream.OutputStream",
									"name": "OutputStream",
									"moduleName": "vibe.stream.stream",
									"attributes": []
								},
								"name": "stream__"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "Variant",
										"qualifiedName": "Variant",
										"name": "Variant",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "args__"
							}
						],
						"attributes": []
					},
					"name": "parseDietFileCompat"
				}
			]
		]
	},
	"name": "vibe.templ.diet"
},
"vibe.http.session": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\session.d",
	"ddoc": "\n\tCookie based session support.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\tSession store for storing a session in local memory.\n\n\tIf the server is running as a single instance (no thread or process clustering), this kind of\n\tsession store provies the fastest and simplest way to store sessions. In any other case,\n\ta persistent session store based on a database is necessary.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "MemorySessionStore.this",
									"type": {
										"text": "MemorySessionStore()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MemorySessionStore",
											"qualifiedName": "vibe.http.session.MemorySessionStore",
											"name": "MemorySessionStore",
											"moduleName": "vibe.http.session"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.create",
									"type": {
										"text": "Session()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Session",
											"qualifiedName": "vibe.http.session.Session",
											"name": "Session",
											"moduleName": "vibe.http.session"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "create"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.destroy",
									"type": {
										"text": "void(string id)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											}
										],
										"attributes": []
									},
									"name": "destroy"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.get",
									"type": {
										"text": "const string(string id, string name, string defaultVal = null)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "defaultVal"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "get"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.isKeySet",
									"type": {
										"text": "const bool(string id, string key)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "isKeySet"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.open",
									"type": {
										"text": "Session(string id)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Session",
											"qualifiedName": "vibe.http.session.Session",
											"name": "Session",
											"moduleName": "vibe.http.session"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											}
										],
										"attributes": []
									},
									"name": "open"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MemorySessionStore.set",
									"type": {
										"text": "void(string id, string name, string value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "set"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MemorySessionStore",
					"interfaces": [
						{
							"kind": "type",
							"text": "SessionStore",
							"typeClass": "primitive",
							"nestedName": "SessionStore",
							"qualifiedName": "vibe.http.session.SessionStore",
							"name": "SessionStore",
							"moduleName": "vibe.http.session",
							"attributes": []
						}
					],
					"name": "MemorySessionStore"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a single HTTP session.\n\n\tIndexing the session object with string keys allows to store arbitrary key/value pairs.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Returns the unique session id of this session.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Session.id",
									"type": {
										"text": "const @property string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "id"
								}
							],
							[
								{
									"ddoc": " Queries the session for the existence of a particular key.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Session.isKeySet",
									"type": {
										"text": "const bool(string key)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "isKeySet"
								}
							],
							[
								{
									"ddoc": " Gets/sets a key/value pair stored within the session.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Session.opIndex",
									"type": {
										"text": "const string(string name)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opIndex"
								},
								{
									"ddoc": " Gets/sets a key/value pair stored within the session.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Session.opIndexAssign",
									"type": {
										"text": "void(string value, string name)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											}
										],
										"attributes": []
									},
									"name": "opIndexAssign"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Session",
					"name": "Session"
				}
			]
		],
		"interfaces": [
			[
				{
					"ddoc": "\n\tInterface for a basic session store.\n\n\tA sesseion store is responsible for storing the id and the associated key/value pairs of a\n\tsession.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.create",
									"type": {
										"text": "Session()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Session",
											"qualifiedName": "vibe.http.session.Session",
											"name": "Session",
											"moduleName": "vibe.http.session"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "create"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.destroy",
									"type": {
										"text": "void(string id)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											}
										],
										"attributes": []
									},
									"name": "destroy"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.get",
									"type": {
										"text": "const string(string id, string name, string defaultVal = null)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "defaultVal"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "get"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.isKeySet",
									"type": {
										"text": "const bool(string id, string key)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "isKeySet"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.open",
									"type": {
										"text": "Session(string id)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Session",
											"qualifiedName": "vibe.http.session.Session",
											"name": "Session",
											"moduleName": "vibe.http.session"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											}
										],
										"attributes": []
									},
									"name": "open"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SessionStore.set",
									"type": {
										"text": "void(string id, string name, string value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "id"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "set"
								}
							]
						]
					},
					"nestedName": "SessionStore",
					"name": "SessionStore"
				}
			]
		]
	},
	"name": "vibe.http.session"
},
"vibe.core.process": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\process.d",
	"ddoc": "\n\tProcess spawning and controlling\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "PROCESS_INFORMATION.dwProcessId",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "dwProcessId"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "PROCESS_INFORMATION.dwThreadId",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "dwThreadId"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "PROCESS_INFORMATION.hProcess",
									"type": {
										"kind": "type",
										"text": "void*",
										"typeClass": "pointer",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "hProcess"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "PROCESS_INFORMATION.hThread",
									"type": {
										"kind": "type",
										"text": "void*",
										"typeClass": "pointer",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "hThread"
								}
							]
						]
					},
					"nestedName": "PROCESS_INFORMATION",
					"name": "PROCESS_INFORMATION"
				}
			],
			[
				{
					"kind": "struct",
					"protection": "public",
					"nestedName": "SECURITY_ATTRIBUTES",
					"name": "SECURITY_ATTRIBUTES"
				}
			],
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.cb",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "cb"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.cbReserved2",
									"type": {
										"kind": "type",
										"text": "ushort",
										"typeClass": "primitive",
										"nestedName": "ushort",
										"qualifiedName": "ushort",
										"name": "ushort",
										"moduleName": "",
										"attributes": []
									},
									"name": "cbReserved2"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.dwFillAttribute",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "dwFillAttribute"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.dwFlags",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "dwFlags"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.dwX",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "dwX"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.dwXCountChars",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "dwXCountChars"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.dwXSize",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "dwXSize"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.dwY",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "dwY"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.dwYCountChars",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "dwYCountChars"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.dwYSize",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "dwYSize"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.hStdError",
									"type": {
										"kind": "type",
										"text": "void*",
										"typeClass": "pointer",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "hStdError"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.hStdInput",
									"type": {
										"kind": "type",
										"text": "void*",
										"typeClass": "pointer",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "hStdInput"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.hStdOutput",
									"type": {
										"kind": "type",
										"text": "void*",
										"typeClass": "pointer",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "hStdOutput"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.lpDesktop",
									"type": {
										"kind": "type",
										"text": "wchar*",
										"typeClass": "pointer",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "wchar",
											"qualifiedName": "wchar",
											"name": "wchar",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "lpDesktop"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.lpReserved",
									"type": {
										"kind": "type",
										"text": "wchar*",
										"typeClass": "pointer",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "wchar",
											"qualifiedName": "wchar",
											"name": "wchar",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "lpReserved"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.lpReserved2",
									"type": {
										"kind": "type",
										"text": "ubyte*",
										"typeClass": "pointer",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ubyte",
											"qualifiedName": "ubyte",
											"name": "ubyte",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "lpReserved2"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.lpTitle",
									"type": {
										"kind": "type",
										"text": "wchar*",
										"typeClass": "pointer",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "wchar",
											"qualifiedName": "wchar",
											"name": "wchar",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "lpTitle"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "STARTUPINFOW.wShowWindow",
									"type": {
										"kind": "type",
										"text": "ushort",
										"typeClass": "primitive",
										"nestedName": "ushort",
										"qualifiedName": "ushort",
										"name": "ushort",
										"moduleName": "",
										"attributes": []
									},
									"name": "wShowWindow"
								}
							]
						]
					},
					"nestedName": "STARTUPINFOW",
					"name": "STARTUPINFOW"
				}
			]
		],
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Process.this",
									"type": {
										"text": "Process(int pid)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Process",
											"qualifiedName": "vibe.core.process.Process",
											"name": "Process",
											"moduleName": "vibe.core.process"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "pid"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Process.id",
									"type": {
										"text": "const @property int()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "id"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Process.term",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "term"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Process",
					"name": "Process"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "CreateProcessW",
					"type": {
						"text": "extern (Windows) int(const(wchar)* lpApplicationName, wchar* lpCommandLine, SECURITY_ATTRIBUTES* lpProcessAttributes, SECURITY_ATTRIBUTES* lpThreadAttributes, int bInheritHandles, uint dwCreationFlags, void* lpEnvironment, const(wchar)* lpCurrentDirectory, STARTUPINFOW* lpStartupInfo, PROCESS_INFORMATION* lpProcessInformation)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "int",
							"qualifiedName": "int",
							"name": "int",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "pointer",
									"elementType": {
										"kind": "type",
										"modifiers": [
											"const"
										],
										"typeClass": "primitive",
										"nestedName": "wchar",
										"qualifiedName": "wchar",
										"name": "wchar",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "lpApplicationName"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "pointer",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "wchar",
										"qualifiedName": "wchar",
										"name": "wchar",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "lpCommandLine"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "pointer",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "SECURITY_ATTRIBUTES",
										"qualifiedName": "vibe.core.process.SECURITY_ATTRIBUTES",
										"name": "SECURITY_ATTRIBUTES",
										"moduleName": "vibe.core.process"
									},
									"attributes": []
								},
								"name": "lpProcessAttributes"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "pointer",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "SECURITY_ATTRIBUTES",
										"qualifiedName": "vibe.core.process.SECURITY_ATTRIBUTES",
										"name": "SECURITY_ATTRIBUTES",
										"moduleName": "vibe.core.process"
									},
									"attributes": []
								},
								"name": "lpThreadAttributes"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "bInheritHandles"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "uint",
									"qualifiedName": "uint",
									"name": "uint",
									"moduleName": "",
									"attributes": []
								},
								"name": "dwCreationFlags"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "pointer",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "lpEnvironment"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "pointer",
									"elementType": {
										"kind": "type",
										"modifiers": [
											"const"
										],
										"typeClass": "primitive",
										"nestedName": "wchar",
										"qualifiedName": "wchar",
										"name": "wchar",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "lpCurrentDirectory"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "pointer",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "STARTUPINFOW",
										"qualifiedName": "vibe.core.process.STARTUPINFOW",
										"name": "STARTUPINFOW",
										"moduleName": "vibe.core.process"
									},
									"attributes": []
								},
								"name": "lpStartupInfo"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "pointer",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "PROCESS_INFORMATION",
										"qualifiedName": "vibe.core.process.PROCESS_INFORMATION",
										"name": "PROCESS_INFORMATION",
										"moduleName": "vibe.core.process"
									},
									"attributes": []
								},
								"name": "lpProcessInformation"
							}
						],
						"attributes": [
							"extern(Windows)"
						]
					},
					"name": "CreateProcessW"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "spawnProcess",
					"type": {
						"text": "Process(string executable, string[] args, string working_dir)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Process",
							"qualifiedName": "vibe.core.process.Process",
							"name": "Process",
							"moduleName": "vibe.core.process"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "executable"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "args"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "working_dir"
							}
						],
						"attributes": []
					},
					"name": "spawnProcess"
				}
			]
		]
	},
	"name": "vibe.core.process"
},
"vibe.core.file": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\file.d",
	"ddoc": "\n\tFile handling.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FileMode.Read",
							"name": "Read"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "FileMode.CreateTrunc",
							"name": "CreateTrunc"
						}
					],
					"nestedName": "FileMode",
					"name": "FileMode",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "protected",
									"nestedName": "FileStream.this",
									"type": {
										"text": "FileStream(string path, FileMode mode)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "FileStream",
											"qualifiedName": "vibe.core.file.FileStream",
											"name": "FileStream",
											"moduleName": "vibe.core.file"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "FileMode",
													"qualifiedName": "vibe.core.file.FileMode",
													"name": "FileMode",
													"moduleName": "vibe.core.file",
													"attributes": []
												},
												"name": "mode"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.close",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "close"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.empty",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.fd",
									"type": {
										"text": "@property int()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "fd"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.finalize",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.flush",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.leastSize",
									"type": {
										"text": "const @property ulong()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.readAll",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readAll"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.readLine",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0, string linesep = \"\\x0d\\x0a\")",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readLine"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.readable",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "readable"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.seek",
									"type": {
										"text": "void(ulong offset)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "offset"
											}
										],
										"attributes": []
									},
									"name": "seek"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.size",
									"type": {
										"text": "const @property ulong()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "size"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.writable",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "writable"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "FileStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "FileStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "Stream",
							"typeClass": "primitive",
							"nestedName": "Stream",
							"qualifiedName": "vibe.stream.stream.Stream",
							"name": "Stream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "FileStream"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "openFile",
					"type": {
						"text": "FileStream(string path, FileMode mode = cast(FileMode)0)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "FileStream",
							"qualifiedName": "vibe.core.file.FileStream",
							"name": "FileStream",
							"moduleName": "vibe.core.file"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "path"
							},
							{
								"defaultValue": "cast(FileMode",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "FileMode",
									"qualifiedName": "vibe.core.file.FileMode",
									"name": "FileMode",
									"moduleName": "vibe.core.file",
									"attributes": []
								},
								"name": "mode"
							}
						],
						"attributes": []
					},
					"name": "openFile"
				}
			]
		]
	},
	"name": "vibe.core.file"
},
"vibe.crypto.ssl": {
	"kind": "module",
	"file": "..\\source\\vibe\\crypto\\ssl.d",
	"ddoc": "\n\tContains the SSLContext class used for SSL based network connections.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SSLVersion.SSLv23",
							"name": "SSLv23"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SSLVersion.SSLv3",
							"name": "SSLv3"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SSLVersion.TLSv1",
							"name": "TLSv1"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SSLVersion.DTLSv1",
							"name": "DTLSv1"
						}
					],
					"nestedName": "SSLVersion",
					"name": "SSLVersion",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"classes": [
			[
				{
					"ddoc": "\n\n\n\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "SSLContext.this",
									"type": {
										"text": "SSLContext(string cert_file, string key_file, SSLVersion ver = cast(SSLVersion)0)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SSLContext",
											"qualifiedName": "vibe.crypto.ssl.SSLContext",
											"name": "SSLContext",
											"moduleName": "vibe.crypto.ssl"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "cert_file"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key_file"
											},
											{
												"defaultValue": "cast(SSLVersion",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "SSLVersion",
													"qualifiedName": "vibe.crypto.ssl.SSLVersion",
													"name": "SSLVersion",
													"moduleName": "vibe.crypto.ssl",
													"attributes": []
												},
												"name": "ver"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "SSLContext.this",
									"type": {
										"text": "SSLContext(SSLVersion ver = cast(SSLVersion)0)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SSLContext",
											"qualifiedName": "vibe.crypto.ssl.SSLContext",
											"name": "SSLContext",
											"moduleName": "vibe.crypto.ssl"
										},
										"parameters": [
											{
												"defaultValue": "cast(SSLVersion",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "SSLVersion",
													"qualifiedName": "vibe.crypto.ssl.SSLVersion",
													"name": "SSLVersion",
													"moduleName": "vibe.crypto.ssl",
													"attributes": []
												},
												"name": "ver"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "SSLContext.createClientCtx",
									"type": {
										"text": "ssl_st*()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "pointer",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ssl_st",
												"qualifiedName": "ssl_st",
												"name": "ssl_st",
												"moduleName": ""
											}
										},
										"parameters": [],
										"attributes": []
									},
									"name": "createClientCtx"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "SSLContext",
					"name": "SSLContext"
				}
			]
		]
	},
	"name": "vibe.crypto.ssl"
},
"vibe.core.tcp": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\tcp.d",
	"ddoc": "\n\tTCP connection and server handling.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\n\n\tRepresents a single TCP connection.\n\n\tNote that a TcpConnection object lives inside a single fiber. When passing a connection\n\tto another fiber, pullToTask() has to be called once by the new owner.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "protected",
									"nestedName": "TcpConnection.this",
									"type": {
										"text": "TcpConnection(TcpContext* ctx)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "TcpConnection",
											"qualifiedName": "vibe.core.tcp.TcpConnection",
											"name": "TcpConnection",
											"moduleName": "vibe.core.tcp"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "TcpContext",
														"qualifiedName": "vibe.core.tcp.TcpContext",
														"name": "TcpContext",
														"moduleName": "vibe.core.tcp"
													},
													"attributes": []
												},
												"name": "ctx"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"aliases": [
							[
								{
									"kind": "alias",
									"protection": "public",
									"nestedName": "TcpConnection.write",
									"name": "write"
								}
							]
						],
						"functions": [
							[
								{
									"ddoc": " Accepts an SSL intiation from the remote peer.\n\n\t\tAfter this call, all subsequent reads/writes will be encrypted.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.acceptSSL",
									"type": {
										"text": "void(SSLContext ctx)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "SSLContext",
													"qualifiedName": "vibe.crypto.ssl.SSLContext",
													"name": "SSLContext",
													"moduleName": "vibe.crypto.ssl",
													"attributes": []
												},
												"name": "ctx"
											}
										],
										"attributes": []
									},
									"name": "acceptSSL"
								}
							],
							[
								{
									"ddoc": "\n\t\tMakes the current task the sole owner of this connection.\n\n\t\tAll events specific to this connection will go to the current task afterwards.\n\t\tNote that any other method of TcpConnection may only be called after\n\t\tacquire() has been called, if the connection was not already owned by the task.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.acquire",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "acquire"
								}
							],
							[
								{
									"ddoc": " Closes the connection.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.close",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "close"
								}
							],
							[
								{
									"ddoc": " The 'connected' status of this connection\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.connected",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "connected"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.dataAvailableForRead",
									"type": {
										"text": "@property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dataAvailableForRead"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.empty",
									"type": {
										"text": "@property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.finalize",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"ddoc": " Causes any buffered data to be written.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.flush",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"ddoc": " Initiates an SSL encrypted connection.\n\n\t\tAfter this call, all subsequent reads/writes will be encrypted.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.initiateSSL",
									"type": {
										"text": "void(SSLContext ctx)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "SSLContext",
													"qualifiedName": "vibe.crypto.ssl.SSLContext",
													"name": "SSLContext",
													"moduleName": "vibe.crypto.ssl",
													"attributes": []
												},
												"name": "ctx"
											}
										],
										"attributes": []
									},
									"name": "initiateSSL"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.leastSize",
									"type": {
										"text": "@property ulong()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.peerAddress",
									"type": {
										"text": "const @property string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "peerAddress"
								}
							],
							[
								{
									"ddoc": " Reads as many bytes as 'dst' can hold.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.readAll",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readAll"
								}
							],
							[
								{
									"ddoc": " Reads one line terminated by CRLF.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.readLine",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0, string linesep = \"\\x0d\\x0a\")",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readLine"
								}
							],
							[
								{
									"ddoc": " Makes this connection unowned so that no events are handled anymore.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.release",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "release"
								}
							],
							[
								{
									"ddoc": " Enables/disables Nagle's algorithm for this connection (enabled by default).\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.tcpNoDelay",
									"type": {
										"text": "@property void(bool enabled)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "enabled"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "tcpNoDelay"
								}
							],
							[
								{
									"ddoc": " Writes the given byte array.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "TcpConnection.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "TcpConnection",
					"interfaces": [
						{
							"kind": "type",
							"text": "Stream",
							"typeClass": "primitive",
							"nestedName": "Stream",
							"qualifiedName": "vibe.stream.stream.Stream",
							"name": "Stream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "TcpConnection"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": " Establishes a connection to the given host/port.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "connectTcp",
					"type": {
						"text": "TcpConnection(string host, ushort port)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "TcpConnection",
							"qualifiedName": "vibe.core.tcp.TcpConnection",
							"name": "TcpConnection",
							"moduleName": "vibe.core.tcp"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "host"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							}
						],
						"attributes": []
					},
					"name": "connectTcp"
				}
			],
			[
				{
					"ddoc": " Generic version of vibeListenTcp with support for arbitrary sockaddr types.\n",
					"kind": "function",
					"templateName": "listenTcpGeneric(SOCKADDR)",
					"nestedName": "listenTcpGeneric",
					"type": {
						"text": "int(int af, SOCKADDR* sock_addr, ushort port, void delegate(TcpConnection conn) connection_callback)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "int",
							"qualifiedName": "int",
							"name": "int",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "af"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "pointer",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "SOCKADDR",
										"qualifiedName": "SOCKADDR",
										"name": "SOCKADDR",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "sock_addr"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.tcp.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.tcp",
												"attributes": []
											},
											"name": "conn"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							}
						],
						"attributes": []
					},
					"name": "listenTcpGeneric"
				}
			],
			[
				{
					"ddoc": "\n\n\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcpS",
					"type": {
						"text": "void(ushort port, void function(TcpConnection stream) connection_callback)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeclass": "function",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.tcp.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.tcp",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							}
						],
						"attributes": []
					},
					"name": "listenTcpS"
				},
				{
					"ddoc": "\n\n\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcpS",
					"type": {
						"text": "void(ushort port, void function(TcpConnection stream) connection_callback, uint ip4_addr)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeclass": "function",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.tcp.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.tcp",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "uint",
									"qualifiedName": "uint",
									"name": "uint",
									"moduleName": "",
									"attributes": []
								},
								"name": "ip4_addr"
							}
						],
						"attributes": []
					},
					"name": "listenTcpS"
				},
				{
					"ddoc": "\n\n\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcpS",
					"type": {
						"text": "void(ushort port, void function(TcpConnection stream) connection_callback, in6_addr ip6_addr)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeclass": "function",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.tcp.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.tcp",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "in6_addr",
									"qualifiedName": "in6_addr",
									"name": "in6_addr",
									"moduleName": "",
									"attributes": []
								},
								"name": "ip6_addr"
							}
						],
						"attributes": []
					},
					"name": "listenTcpS"
				},
				{
					"ddoc": "\n\n\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcpS",
					"type": {
						"text": "void(ushort port, void function(TcpConnection stream) connection_callback, string address)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeclass": "function",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.tcp.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.tcp",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "address"
							}
						],
						"attributes": []
					},
					"name": "listenTcpS"
				},
				{
					"ddoc": "\n\n\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcp",
					"type": {
						"text": "void(ushort port, void delegate(TcpConnection stream) connection_callback)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.tcp.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.tcp",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							}
						],
						"attributes": []
					},
					"name": "listenTcp"
				},
				{
					"ddoc": "\n\n\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcp",
					"type": {
						"text": "void(ushort port, void delegate(TcpConnection stream) connection_callback, uint ip4_addr)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.tcp.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.tcp",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "uint",
									"qualifiedName": "uint",
									"name": "uint",
									"moduleName": "",
									"attributes": []
								},
								"name": "ip4_addr"
							}
						],
						"attributes": []
					},
					"name": "listenTcp"
				},
				{
					"ddoc": "\n\n\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcp",
					"type": {
						"text": "void(ushort port, void delegate(TcpConnection stream) connection_callback, in6_addr ip6_addr)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.tcp.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.tcp",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "in6_addr",
									"qualifiedName": "in6_addr",
									"name": "in6_addr",
									"moduleName": "",
									"attributes": []
								},
								"name": "ip6_addr"
							}
						],
						"attributes": []
					},
					"name": "listenTcp"
				},
				{
					"ddoc": "\n\n\n\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. The 'stream' parameter then allows to perform pseudo-blocking\n\ti/o on the client socket.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenTcp",
					"type": {
						"text": "void(ushort port, void delegate(TcpConnection stream) connection_callback, string address)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							},
							{
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "TcpConnection",
												"qualifiedName": "vibe.core.tcp.TcpConnection",
												"name": "TcpConnection",
												"moduleName": "vibe.core.tcp",
												"attributes": []
											},
											"name": "stream"
										}
									],
									"attributes": []
								},
								"name": "connection_callback"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "address"
							}
						],
						"attributes": []
					},
					"name": "listenTcp"
				}
			]
		]
	},
	"name": "vibe.core.tcp"
},
"vibe.http.server": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\server.d",
	"ddoc": "\n\tA HTTP 1.1/1.0 server implementation.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
	"members": {
		"aliases": [
			[
				{
					"ddoc": " Delegate type used for user defined error page generator callbacks.\n",
					"kind": "alias",
					"protection": "public",
					"nestedName": "HttpServerErrorPageHandler",
					"name": "HttpServerErrorPageHandler"
				}
			],
			[
				{
					"ddoc": "\n\n Delegate based request handler\n",
					"kind": "alias",
					"protection": "public",
					"nestedName": "HttpServerRequestDelegate",
					"name": "HttpServerRequestDelegate"
				}
			],
			[
				{
					"ddoc": " Static function based request handler\n",
					"kind": "alias",
					"protection": "public",
					"nestedName": "HttpServerRequestFunction",
					"name": "HttpServerRequestFunction"
				}
			]
		],
		"enums": [
			[
				{
					"ddoc": "\n\tSpecifies optional features of the HTTP server.\n\n\tDisabling unneeded features can speed up the server or reduce its memory usage.\n",
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.None",
							"name": "None"
						},
						{
							"ddoc": " Fills the .path, .queryString fields in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseURL",
							"name": "ParseURL"
						},
						{
							"ddoc": " Fills the .query field in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseQueryString",
							"name": "ParseQueryString"
						},
						{
							"ddoc": " Fills the .form field in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseFormBody",
							"name": "ParseFormBody"
						},
						{
							"ddoc": " Fills the .json field in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseJsonBody",
							"name": "ParseJsonBody"
						},
						{
							"ddoc": " Enables use of the .nextPart() method in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseMultiPartBody",
							"name": "ParseMultiPartBody"
						},
						{
							"ddoc": " Fills the .cookies field in the request\n",
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpServerOption.ParseCookies",
							"name": "ParseCookies"
						}
					],
					"nestedName": "HttpServerOption",
					"name": "HttpServerOption",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"classes": [
			[
				{
					"ddoc": " Throwing this exception from within a request handler will produce a matching error page.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpServerError.this",
									"type": {
										"text": "HttpServerError(int status, string message = null)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpServerError",
											"qualifiedName": "vibe.http.server.HttpServerError",
											"name": "HttpServerError",
											"moduleName": "vibe.http.server"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "status"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "message"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerError.status",
									"type": {
										"text": "const @property int()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "status"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Exception",
						"typeClass": "primitive",
						"nestedName": "Exception",
						"qualifiedName": "Exception",
						"name": "Exception",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpServerError",
					"name": "HttpServerError"
				}
			],
			[
				{
					"ddoc": " Aggregates all information about an HTTP error status.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"variables": [
							[
								{
									"ddoc": " The HTTP status code\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerErrorInfo.code",
									"type": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									},
									"name": "code"
								}
							],
							[
								{
									"ddoc": " Extended error message with debug information such as a stack trace\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerErrorInfo.debugMessage",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "debugMessage"
								}
							],
							[
								{
									"ddoc": " The error message\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerErrorInfo.message",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "message"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpServerErrorInfo",
					"name": "HttpServerErrorInfo"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a HTTP request as received by the server side.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerRequest.nextPart",
									"type": {
										"text": "MultiPart()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MultiPart",
											"qualifiedName": "vibe.http.common.MultiPart",
											"name": "MultiPart",
											"moduleName": "vibe.http.common"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "nextPart"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerRequest.rootDir",
									"type": {
										"text": "const @property string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "rootDir"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerRequest.timeCreated",
									"type": {
										"text": "@property SysTime()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SysTime",
											"qualifiedName": "SysTime",
											"name": "SysTime",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "timeCreated"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.bodyReader",
									"type": {
										"kind": "type",
										"text": "vibe.stream.stream.InputStream",
										"typeClass": "primitive",
										"nestedName": "InputStream",
										"qualifiedName": "vibe.stream.stream.InputStream",
										"name": "InputStream",
										"moduleName": "vibe.stream.stream",
										"attributes": []
									},
									"name": "bodyReader"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.cookies",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "string[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "cookies"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.data",
									"type": {
										"kind": "type",
										"text": "ubyte[]",
										"typeClass": "array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ubyte",
											"qualifiedName": "ubyte",
											"name": "ubyte",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "data"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.form",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "string[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "form"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.json",
									"type": {
										"kind": "type",
										"text": "Json",
										"typeClass": "primitive",
										"nestedName": "Json",
										"qualifiedName": "vibe.data.json.Json",
										"name": "Json",
										"moduleName": "vibe.data.json",
										"attributes": []
									},
									"name": "json"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.params",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "string[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "params"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.password",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "password"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.path",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "path"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.peer",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "peer"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.query",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "string[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "query"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.querystring",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "querystring"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.session",
									"type": {
										"kind": "type",
										"text": "vibe.http.session.Session",
										"typeClass": "primitive",
										"nestedName": "Session",
										"qualifiedName": "vibe.http.session.Session",
										"name": "Session",
										"moduleName": "vibe.http.session",
										"attributes": []
									},
									"name": "session"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerRequest.username",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "username"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "HttpRequest",
						"typeClass": "primitive",
						"nestedName": "HttpRequest",
						"qualifiedName": "vibe.http.common.HttpRequest",
						"name": "HttpRequest",
						"moduleName": "vibe.http.common",
						"attributes": []
					},
					"nestedName": "HttpServerRequest",
					"name": "HttpServerRequest"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a HTTP response as sent from the server side.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " A stream for writing the body of the HTTP response.\n\n\t\tNote that after 'bodyWriter' has been accessed for the first time, it\n\t\tis not allowed to change any header or the status code of the response.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.bodyWriter",
									"type": {
										"text": "@property OutputStream()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "OutputStream",
											"qualifiedName": "vibe.stream.stream.OutputStream",
											"name": "OutputStream",
											"moduleName": "vibe.stream.stream"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "bodyWriter"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.bytesWritten",
									"type": {
										"text": "@property ulong()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "bytesWritten"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.headerWritten",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "headerWritten"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.isHeadResponse",
									"type": {
										"text": "const bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "isHeadResponse"
								}
							],
							[
								{
									"ddoc": " Sends a redirect request to the client.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.redirect",
									"type": {
										"text": "void(string url, int status = 302)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url"
											},
											{
												"defaultValue": "302",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "status"
											}
										],
										"attributes": []
									},
									"name": "redirect"
								}
							],
							[
								{
									"kind": "function",
									"ddoc": "\n\t\tRenders the given template and makes all ALIASES available to the template.\n\n\t\tThis currently suffers from multiple DMD compiler bugs - use renderCompat() instead for the\n\t\ttime being.\n\n\t\tExamples:\n\t\t\t---\n\t\t\tstring title = \"Hello, World!\";\n\t\t\tint pageNumber = 1;\n\t\t\tres.render!(\"mytemplate.jd\", title, pageNumber);\n\t\t\t---\n\t\n",
									"templateName": "render(string template_file,ALIASES...)",
									"nestedName": "HttpServerResponse.render",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "render"
								}
							],
							[
								{
									"ddoc": "\n\t\tCompatibility version of render() that takes a list of explicit names and types instead\n\t\tof variable aliases.\n\n\t\tThis version of render() works around a compiler bug in DMD (Issue 2962). You should use\n\t\tthis method instead of render() as long as this bug is not fixed.\n\n\t\tNote that the variables are copied and not referenced inside of the template - any\n\t\tmodification you do on them from within the template will get lost.\n\n\t\tExamples:\n\t\t\t---\n\t\t\tstring title = \"Hello, World!\";\n\t\t\tint pageNumber = 1;\n\t\t\tres.renderCompat!(\"mytemplate.jd\",\n\t\t\t\tstring, \"title\",\n\t\t\t\tint, \"pageNumber\")\n\t\t\t\t(Variant(title), Variant(pageNumber));\n\t\t\t---\n\t\n",
									"kind": "function",
									"templateName": "renderCompat(string template_file,TYPES_AND_NAMES...)",
									"nestedName": "HttpServerResponse.renderCompat",
									"type": {
										"text": "void(Variant[] args...)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Variant",
														"qualifiedName": "Variant",
														"name": "Variant",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "args..."
											}
										],
										"attributes": []
									},
									"name": "renderCompat"
								}
							],
							[
								{
									"ddoc": " Sets the specified cookie value.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.setCookie",
									"type": {
										"text": "Cookie(string name, string value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "setCookie"
								}
							],
							[
								{
									"ddoc": "\n\t\tInitiates a new session.\n\n\t\tThe session is stored in the SessionStore that was specified when\n\t\tcreating the server. Depending on this, the session can be persistent\n\t\tor temporary and specific to this server instance.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.startSession",
									"type": {
										"text": "Session()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Session",
											"qualifiedName": "vibe.http.session.Session",
											"name": "Session",
											"moduleName": "vibe.http.session"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "startSession"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.switchProtocol",
									"type": {
										"text": "TcpConnection(string protocol)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "TcpConnection",
											"qualifiedName": "vibe.core.tcp.TcpConnection",
											"name": "TcpConnection",
											"moduleName": "vibe.core.tcp"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "protocol"
											}
										],
										"attributes": []
									},
									"name": "switchProtocol"
								}
							],
							[
								{
									"ddoc": "\n\t\tTerminates the current session (if any).\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.terminateSession",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "terminateSession"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.timeFinalized",
									"type": {
										"text": "@property SysTime()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SysTime",
											"qualifiedName": "SysTime",
											"name": "SysTime",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "timeFinalized"
								}
							],
							[
								{
									"ddoc": " Writes the hole body of the response at once.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.writeBody",
									"type": {
										"text": "void(const(ubyte[]) data, string content_type = null)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "content_type"
											}
										],
										"attributes": []
									},
									"name": "writeBody"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.writeBody",
									"type": {
										"text": "void(string data, string content_type = \"text/plain\")",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "text/plain\"",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "content_type"
											}
										],
										"attributes": []
									},
									"name": "writeBody"
								}
							],
							[
								{
									"ddoc": " Writes a JSON message with the specified status\n",
									"kind": "function",
									"templateName": "writeJsonBody(T)",
									"nestedName": "HttpServerResponse.writeJsonBody",
									"type": {
										"text": "void(T data, int status = HttpStatus.OK)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "HttpStatus.OK",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "status"
											}
										],
										"attributes": []
									},
									"name": "writeJsonBody"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "writeLine(T...)",
									"nestedName": "HttpServerResponse.writeLine",
									"type": {
										"text": "void(string fmt, T args)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "fmt"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "args"
											}
										],
										"attributes": []
									},
									"name": "writeLine"
								}
							],
							[
								{
									"ddoc": " Writes the response with no body.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerResponse.writeVoidBody",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "writeVoidBody"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "HttpResponse",
						"typeClass": "primitive",
						"nestedName": "HttpResponse",
						"qualifiedName": "vibe.http.common.HttpResponse",
						"name": "HttpResponse",
						"moduleName": "vibe.http.common",
						"attributes": []
					},
					"nestedName": "HttpServerResponse",
					"name": "HttpServerResponse"
				}
			],
			[
				{
					"ddoc": "\n\tContains all settings for configuring a basic HTTP server.\n\n\tThe defaults are sufficient for most normal uses.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpServerSettings.dup",
									"type": {
										"text": "@property HttpServerSettings()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpServerSettings",
											"qualifiedName": "vibe.http.server.HttpServerSettings",
											"name": "HttpServerSettings",
											"moduleName": "vibe.http.server"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "dup"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.accessLogFormat",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "accessLogFormat"
								}
							],
							[
								{
									"ddoc": " The interfaces on which the HTTP server is listening.\n\n\t\tBy default, the server will listen on all IPv4 and IPv6 interfaces.\n\t\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.bindAddresses",
									"type": {
										"kind": "type",
										"text": "string[]",
										"typeClass": "array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "bindAddresses"
								}
							],
							[
								{
									"ddoc": " Sets a custom handler for displaying error pages for HTTP errors\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.errorPageHandler",
									"type": {
										"text": "void delegate(HttpServerRequest req, HttpServerResponse res, HttpServerErrorInfo error)",
										"typeclass": "delegate",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerRequest",
													"qualifiedName": "vibe.http.server.HttpServerRequest",
													"name": "HttpServerRequest",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "req"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerResponse",
													"qualifiedName": "vibe.http.server.HttpServerResponse",
													"name": "HttpServerResponse",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "res"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerErrorInfo",
													"qualifiedName": "vibe.http.server.HttpServerErrorInfo",
													"name": "HttpServerErrorInfo",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "error"
											}
										],
										"attributes": []
									},
									"name": "errorPageHandler"
								}
							],
							[
								{
									"ddoc": " Determines the server host name.\n\n\t\tIf multiple servers are listening on the same port, the host name will determine which one\n\t\tgets a request.\n\t\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.hostName",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "hostName"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.maxRequestHeaderCount",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "maxRequestHeaderCount"
								}
							],
							[
								{
									"ddoc": "\tMaximum number of transferred bytes for the request header. This includes the request line \n the url and all headers. \n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.maxRequestHeaderSize",
									"type": {
										"kind": "type",
										"text": "ulong",
										"typeClass": "primitive",
										"nestedName": "ulong",
										"qualifiedName": "ulong",
										"name": "ulong",
										"moduleName": "",
										"attributes": []
									},
									"name": "maxRequestHeaderSize"
								}
							],
							[
								{
									"ddoc": " Maximum number of transferred bytes per request after which the connection is closed with\n an error; not supported yet\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.maxRequestSize",
									"type": {
										"kind": "type",
										"text": "ulong",
										"typeClass": "primitive",
										"nestedName": "ulong",
										"qualifiedName": "ulong",
										"name": "ulong",
										"moduleName": "",
										"attributes": []
									},
									"name": "maxRequestSize"
								}
							],
							[
								{
									"ddoc": " Time [s] of a request after which the connection is closed with an error; not supported yet\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.maxRequestTime",
									"type": {
										"kind": "type",
										"text": "uint",
										"typeClass": "primitive",
										"nestedName": "uint",
										"qualifiedName": "uint",
										"name": "uint",
										"moduleName": "",
										"attributes": []
									},
									"name": "maxRequestTime"
								}
							],
							[
								{
									"ddoc": " Configures optional features of the HTTP server\n\n\t\tDisabling unneeded features can improve performance or reduce the server\n\t\tload in case of invalid or unwanted requests (DoS).\n\t\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.options",
									"type": {
										"kind": "type",
										"text": "HttpServerOption",
										"typeClass": "primitive",
										"nestedName": "HttpServerOption",
										"qualifiedName": "vibe.http.server.HttpServerOption",
										"name": "HttpServerOption",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "options"
								}
							],
							[
								{
									"ddoc": " The port on which the HTTP server is listening.\n\n\t\tThe default value is 80. If you are running a SSL enabled server you may want to set this\n\t\tto 443 instead.\n\t\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.port",
									"type": {
										"kind": "type",
										"text": "ushort",
										"typeClass": "primitive",
										"nestedName": "ushort",
										"qualifiedName": "ushort",
										"name": "ushort",
										"moduleName": "",
										"attributes": []
									},
									"name": "port"
								}
							],
							[
								{
									"ddoc": "\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.serverString",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "serverString"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.sessionIdCookie",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "sessionIdCookie"
								}
							],
							[
								{
									"ddoc": " Session management is enabled if a session store instance is provided\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.sessionStore",
									"type": {
										"kind": "type",
										"text": "vibe.http.session.SessionStore",
										"typeClass": "primitive",
										"nestedName": "SessionStore",
										"qualifiedName": "vibe.http.session.SessionStore",
										"name": "SessionStore",
										"moduleName": "vibe.http.session",
										"attributes": []
									},
									"name": "sessionStore"
								}
							],
							[
								{
									"ddoc": " If set, a HTTPS server will be started instead of plain HTTP\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.sslCertFile",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "sslCertFile"
								},
								{
									"ddoc": " If set, a HTTPS server will be started instead of plain HTTP\n",
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpServerSettings.sslKeyFile",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "sslKeyFile"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpServerSettings",
					"name": "HttpServerSettings"
				}
			]
		],
		"interfaces": [
			[
				{
					"ddoc": " Interface for class based request handlers\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Handles incoming HTTP requests\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "IHttpServerRequestHandler.handleRequest",
									"type": {
										"text": "void(HttpServerRequest req, HttpServerResponse res)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerRequest",
													"qualifiedName": "vibe.http.server.HttpServerRequest",
													"name": "HttpServerRequest",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "req"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerResponse",
													"qualifiedName": "vibe.http.server.HttpServerResponse",
													"name": "HttpServerResponse",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "res"
											}
										],
										"attributes": []
									},
									"name": "handleRequest"
								}
							]
						]
					},
					"nestedName": "IHttpServerRequestHandler",
					"name": "IHttpServerRequestHandler"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\n\n\tStarts a HTTP server listening on the specified port.\n\n\t'request_task' will be called for each HTTP request that is made. The\n\t'res' parameter of the callback then has to be filled with the response\n\tdata.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n\n\trequest_task can be either HttpServerRequestDelegate/HttpServerRequestFunction\n\tor a class/struct with a member function 'handleRequest' that has the same\n\tsignature as HttpServerRequestDelegate/Function.\n\n\tNote that if the application has been started with the --disthost command line\n\tswitch, listenHttp() will automatically listen on the specified VibeDist host\n\tinstead of locally. This allows for a seemless switch from single-host to\n\tmulti-host scenarios without changing the code. If you need to listen locally,\n\tuse listenHttpPlain() instead.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttp",
					"type": {
						"text": "void(HttpServerSettings settings, void delegate(HttpServerRequest req, HttpServerResponse res) request_handler)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerRequest",
												"qualifiedName": "vibe.http.server.HttpServerRequest",
												"name": "HttpServerRequest",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "req"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerResponse",
												"qualifiedName": "vibe.http.server.HttpServerResponse",
												"name": "HttpServerResponse",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "res"
										}
									],
									"attributes": []
								},
								"name": "request_handler"
							}
						],
						"attributes": []
					},
					"name": "listenHttp"
				},
				{
					"ddoc": "\n\n\n\tStarts a HTTP server listening on the specified port.\n\n\t'request_task' will be called for each HTTP request that is made. The\n\t'res' parameter of the callback then has to be filled with the response\n\tdata.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n\n\trequest_task can be either HttpServerRequestDelegate/HttpServerRequestFunction\n\tor a class/struct with a member function 'handleRequest' that has the same\n\tsignature as HttpServerRequestDelegate/Function.\n\n\tNote that if the application has been started with the --disthost command line\n\tswitch, listenHttp() will automatically listen on the specified VibeDist host\n\tinstead of locally. This allows for a seemless switch from single-host to\n\tmulti-host scenarios without changing the code. If you need to listen locally,\n\tuse listenHttpPlain() instead.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttp",
					"type": {
						"text": "void(HttpServerSettings settings, void function(HttpServerRequest req, HttpServerResponse res) request_handler)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"typeclass": "function",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerRequest",
												"qualifiedName": "vibe.http.server.HttpServerRequest",
												"name": "HttpServerRequest",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "req"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerResponse",
												"qualifiedName": "vibe.http.server.HttpServerResponse",
												"name": "HttpServerResponse",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "res"
										}
									],
									"attributes": []
								},
								"name": "request_handler"
							}
						],
						"attributes": []
					},
					"name": "listenHttp"
				},
				{
					"ddoc": "\n\n\n\tStarts a HTTP server listening on the specified port.\n\n\t'request_task' will be called for each HTTP request that is made. The\n\t'res' parameter of the callback then has to be filled with the response\n\tdata.\n\n\tThe 'ip4_addr' or 'ip6_addr' parameters can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n\n\trequest_task can be either HttpServerRequestDelegate/HttpServerRequestFunction\n\tor a class/struct with a member function 'handleRequest' that has the same\n\tsignature as HttpServerRequestDelegate/Function.\n\n\tNote that if the application has been started with the --disthost command line\n\tswitch, listenHttp() will automatically listen on the specified VibeDist host\n\tinstead of locally. This allows for a seemless switch from single-host to\n\tmulti-host scenarios without changing the code. If you need to listen locally,\n\tuse listenHttpPlain() instead.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttp",
					"type": {
						"text": "void(HttpServerSettings settings, IHttpServerRequestHandler request_handler)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "IHttpServerRequestHandler",
									"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
									"name": "IHttpServerRequestHandler",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "request_handler"
							}
						],
						"attributes": []
					},
					"name": "listenHttp"
				}
			],
			[
				{
					"ddoc": "\n\tStarts a HTTP server listening on the specified port.\n\n\tThis is the same as listenHttp() except that it does not use a VibeDist host for\n\tremote listening, even if specified on the command line.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttpPlain",
					"type": {
						"text": "void(HttpServerSettings settings, void delegate(HttpServerRequest req, HttpServerResponse res) request_handler)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerRequest",
												"qualifiedName": "vibe.http.server.HttpServerRequest",
												"name": "HttpServerRequest",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "req"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerResponse",
												"qualifiedName": "vibe.http.server.HttpServerResponse",
												"name": "HttpServerResponse",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "res"
										}
									],
									"attributes": []
								},
								"name": "request_handler"
							}
						],
						"attributes": []
					},
					"name": "listenHttpPlain"
				}
			],
			[
				{
					"ddoc": "\n\tSets a VibeDist host to register with.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "setVibeDistHost",
					"type": {
						"text": "void(string host, ushort port)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "host"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							}
						],
						"attributes": []
					},
					"name": "setVibeDistHost"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "startListening",
					"type": {
						"text": "void()",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "startListening"
				}
			],
			[
				{
					"ddoc": "\n\tProvides a HTTP request handler that responds with a static redirection to the specified URL.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "staticRedirect",
					"type": {
						"text": "void delegate(HttpServerRequest req, HttpServerResponse res)(string url)",
						"typeclass": "function",
						"returnType": {
							"typeclass": "delegate",
							"returnType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "void",
								"qualifiedName": "void",
								"name": "void",
								"moduleName": ""
							},
							"parameters": [
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerRequest",
										"qualifiedName": "vibe.http.server.HttpServerRequest",
										"name": "HttpServerRequest",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "req"
								},
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerResponse",
										"qualifiedName": "vibe.http.server.HttpServerResponse",
										"name": "HttpServerResponse",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "res"
								}
							]
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "url"
							}
						],
						"attributes": []
					},
					"name": "staticRedirect"
				}
			],
			[
				{
					"kind": "function",
					"ddoc": "\n\tProvides a HTTP request handler that responds with a static Diet template.\n",
					"templateName": "staticTemplate(string template_file)",
					"nestedName": "staticTemplate",
					"type": {
						"text": "HttpServerRequestDelegate()",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "HttpServerRequestDelegate",
							"qualifiedName": "HttpServerRequestDelegate",
							"name": "HttpServerRequestDelegate",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "staticTemplate"
				}
			]
		]
	},
	"name": "vibe.http.server"
},
"vibe.db.mongo.db": {
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\db.d",
	"ddoc": "\n\tMongoDB class doing connection management.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\tRepresents a single remote MongoDB.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " http://www.mongodb.org/display/DOCS/fsync+Command\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoDB.fsync",
									"type": {
										"text": "Bson(string db, bool async = false)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "db"
											},
											{
												"defaultValue": "false",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "async"
											}
										],
										"attributes": []
									},
									"name": "fsync"
								}
							],
							[
								{
									"ddoc": " http://www.mongodb.org/display/DOCS/getLastError+Command\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoDB.getLastError",
									"type": {
										"text": "Bson(string db)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "db"
											}
										],
										"attributes": []
									},
									"name": "getLastError"
								}
							],
							[
								{
									"ddoc": " See http://www.mongodb.org/display/DOCS/getLog+Command\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoDB.getLog",
									"type": {
										"text": "Bson(string db, string mask)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "db"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "mask"
											}
										],
										"attributes": []
									},
									"name": "getLog"
								}
							],
							[
								{
									"ddoc": "\n\t\tAccesses the collections inside this DB.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoDB.opIndex",
									"type": {
										"text": "MongoCollection(string name)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoCollection",
											"qualifiedName": "vibe.db.mongo.collection.MongoCollection",
											"name": "MongoCollection",
											"moduleName": "vibe.db.mongo.collection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "name"
											}
										],
										"attributes": []
									},
									"name": "opIndex"
								}
							],
							[
								{
									"ddoc": "\n\t\tRuns a command on the specified database.\n\n\t\tSee_Also: http://www.mongodb.org/display/DOCS/Commands\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoDB.runCommand",
									"type": {
										"text": "Bson(string db, Bson[string] command_and_options)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "db"
											},
											{
												"type": {
													"kind": "type",
													"keyType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"typeClass": "associative array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Bson",
														"qualifiedName": "vibe.data.bson.Bson",
														"name": "Bson",
														"moduleName": "vibe.data.bson"
													},
													"attributes": []
												},
												"name": "command_and_options"
											}
										],
										"attributes": []
									},
									"name": "runCommand"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MongoDB.defaultPort",
									"type": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									},
									"name": "defaultPort"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MongoDB",
					"name": "MongoDB"
				}
			]
		]
	},
	"name": "vibe.db.mongo.db"
},
"vibe.core.args": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\args.d",
	"ddoc": "\n\tParsing of command line arguments.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tProcesses the command line arguments passed to the application.\n\n\tAny argument that matches a vibe supported command switch is removed from the 'args' array.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "processCommandLineArgs",
					"type": {
						"text": "void(ref string[] args)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"attributes": [
										"ref"
									]
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "processCommandLineArgs"
				}
			]
		]
	},
	"name": "vibe.core.args"
},
"vibe.stream.stream": {
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\stream.d",
	"ddoc": "\n\tGeneric stream interface used by several stream-like classes.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\tWraps an existing input stream, counting the bytes that are written.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "CountingInputStream.this",
									"type": {
										"text": "CountingInputStream(InputStream stream)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "CountingInputStream",
											"qualifiedName": "vibe.stream.stream.CountingInputStream",
											"name": "CountingInputStream",
											"moduleName": "vibe.stream.stream"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.bytesRead",
									"type": {
										"text": "const @property ulong()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "bytesRead"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.empty",
									"type": {
										"text": "@property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.leastSize",
									"type": {
										"text": "@property ulong()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.readAll",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readAll"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingInputStream.readLine",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0, string linesep = \"\\x0d\\x0a\")",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readLine"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "CountingInputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "InputStream",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "CountingInputStream"
				}
			],
			[
				{
					"ddoc": "\n\tWraps an existing output stream, counting the bytes that are written.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "CountingOutputStream.this",
									"type": {
										"text": "CountingOutputStream(OutputStream stream)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "CountingOutputStream",
											"qualifiedName": "vibe.stream.stream.CountingOutputStream",
											"name": "CountingOutputStream",
											"moduleName": "vibe.stream.stream"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "OutputStream",
													"qualifiedName": "vibe.stream.stream.OutputStream",
													"name": "OutputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingOutputStream.bytesWritten",
									"type": {
										"text": "const @property ulong()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "bytesWritten"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingOutputStream.finalize",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingOutputStream.flush",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingOutputStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "CountingOutputStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "CountingOutputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "CountingOutputStream"
				}
			],
			[
				{
					"ddoc": "\n\tWraps an existing stream, limiting the amount of data that can be read.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"ddoc": " Constructs a limited stream from an existing input stream.\n\n\t\tParams:\n\t\t\tstream: the input stream to be wrapped\n\t\t\tbyte_limit: the maximum number of bytes readable from the constructed stream\n\t\t\tsilent_limit: if set, the stream will behave exactly like the original stream, but\n\t\t\t\twill throw an exception as soon as the limit is reached.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "LimitedInputStream.this",
									"type": {
										"text": "LimitedInputStream(InputStream stream, ulong byte_limit, bool silent_limit = false)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "LimitedInputStream",
											"qualifiedName": "vibe.stream.stream.LimitedInputStream",
											"name": "LimitedInputStream",
											"moduleName": "vibe.stream.stream"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "byte_limit"
											},
											{
												"defaultValue": "false",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "silent_limit"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.empty",
									"type": {
										"text": "@property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.leastSize",
									"type": {
										"text": "@property ulong()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "LimitedInputStream.onSizeLimitReached",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "onSizeLimitReached"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.readAll",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readAll"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.readLine",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0, string linesep = \"\\x0d\\x0a\")",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readLine"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "LimitedInputStream.sourceStream",
									"type": {
										"text": "inout @property inout(InputStream)()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "InputStream",
											"qualifiedName": "vibe.stream.stream.InputStream",
											"name": "InputStream",
											"moduleName": "vibe.stream.stream"
										},
										"parameters": [],
										"attributes": [
											"inout",
											"@property"
										]
									},
									"name": "sourceStream"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "LimitedInputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "InputStream",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "LimitedInputStream"
				}
			],
			[
				{
					"ddoc": "\n\tStream implementation acting as a sink with no function.\n\n\tAny data written to the stream will be ignored and discarded. This stream type is useful if\n\tthe output of a particular stream is not needed but the stream needs to be drained.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "NullOutputStream.finalize",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "NullOutputStream.flush",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "NullOutputStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "NullOutputStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "NullOutputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "NullOutputStream"
				}
			]
		],
		"interfaces": [
			[
				{
					"ddoc": "\n\tInterface for all classes implementing readable streams.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Returns true iff the end of the stream has been reached\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "InputStream.empty",
									"type": {
										"text": "@property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"ddoc": "\tReturns the maximum number of bytes that are known to remain in this stream until the\n\t\tend is reached. After leastSize() bytes have been read, the stream will either have\n\t\treached EOS and empty() returns true, or leastSize() returns again a number > 0.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "InputStream.leastSize",
									"type": {
										"text": "@property ulong()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"ddoc": "\tFills the preallocated array 'bytes' with data from the stream.\n\n\t\tThrows: An exception if the operation reads past the end of the stream\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "InputStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "InputStream.readAll",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readAll"
								}
							],
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "InputStream.readAllDefault",
									"type": {
										"text": "ubyte[](uint max_bytes)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readAllDefault"
								}
							],
							[
								{
									"ddoc": "\tReads and returns a single line from the stream.\n\n\t\tThrows: An exception if either the stream end was hit without hitting a newline first, or\n\t\t\tif more than max_bytes have been read from the stream in case of max_bytes != 0.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "InputStream.readLine",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0, string linesep = \"\\x0d\\x0a\")",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readLine"
								}
							],
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "InputStream.readLineDefault",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0, const(immutable(char)[]) linesep = \"\\x0d\\x0a\")",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readLineDefault"
								}
							]
						]
					},
					"nestedName": "InputStream",
					"name": "InputStream"
				}
			],
			[
				{
					"ddoc": "\n\tInterface for all classes implementing writeable streams.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"ddoc": " Flushes and finalizes the stream.\n\n\t\tFinalize has to be called on certain types of streams. No writes are possible after a\n\t\tcall to finalize().\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.finalize",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"ddoc": " Flushes the stream and makes sure that all data is being written to the output device.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.flush",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"ddoc": " Writes an array of bytes to the stream.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"ddoc": " Writes an array of chars to the stream.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.write",
									"type": {
										"text": "void(const(char[]) bytes, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "char",
														"qualifiedName": "char",
														"name": "char",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"ddoc": " Pipes an InputStream directly into this OutputStream.\n\n\t\tThe number of bytes written is either the whole input stream when nbytes == 0, or exactly\n\t\tnbytes for nbytes > 0. If the input stream contains less than nbytes of data, an exception\n\t\tis thrown.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "OutputStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "OutputStream.writeDefault",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "writeDefault"
								}
							]
						]
					},
					"nestedName": "OutputStream",
					"name": "OutputStream"
				}
			],
			[
				{
					"ddoc": "\n\tInterface for all classes implementing readable and writable streams.\n",
					"kind": "interface",
					"protection": "public",
					"members": {
					},
					"nestedName": "Stream",
					"interfaces": [
						{
							"kind": "type",
							"text": "InputStream",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						},
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "Stream"
				}
			]
		]
	},
	"name": "vibe.stream.stream"
},
"vibe.core.signal": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\signal.d",
	"ddoc": "\n\tEvented signal-slot mechanism\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Signal.this",
									"type": {
										"text": "Signal()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Signal",
											"qualifiedName": "vibe.core.signal.Signal",
											"name": "Signal",
											"moduleName": "vibe.core.signal"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Signal.emit",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "emit"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Signal.emitCount",
									"type": {
										"text": "const @property int()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "emitCount"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Signal.isSelfRegistered",
									"type": {
										"text": "bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "isSelfRegistered"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Signal.registerSelf",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "registerSelf"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Signal.unregisterSelf",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "unregisterSelf"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Signal.wait",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "wait"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Signal",
					"name": "Signal"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "SignalException.this",
									"type": {
										"text": "SignalException()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SignalException",
											"qualifiedName": "vibe.core.signal.SignalException",
											"name": "SignalException",
											"moduleName": "vibe.core.signal"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Exception",
						"typeClass": "primitive",
						"nestedName": "Exception",
						"qualifiedName": "Exception",
						"name": "Exception",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "SignalException",
					"name": "SignalException"
				}
			]
		]
	},
	"name": "vibe.core.signal"
},
"vibe.utils.string": {
	"kind": "module",
	"file": "..\\source\\vibe\\utils\\string.d",
	"ddoc": "\n\tUtiltiy functions for string processing\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tChecks if all characters in 'str' are contained in 'chars'.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "allOf",
					"type": {
						"text": "bool(string str, string chars)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "chars"
							}
						],
						"attributes": []
					},
					"name": "allOf"
				}
			],
			[
				{
					"ddoc": "\n\tChecks if any character in 'str' is contained in 'chars'.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "anyOf",
					"type": {
						"text": "bool(string str, string chars)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "chars"
							}
						],
						"attributes": []
					},
					"name": "anyOf"
				}
			],
			[
				{
					"ddoc": "\n\tJoins an array of strings using 'linesep' as the line separator (\\n by default).\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "joinLines",
					"type": {
						"text": "string(string[] strs, string linesep = \"\\x0a\")",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "strs"
							},
							{
								"defaultValue": "\\x0a\"",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "linesep"
							}
						],
						"attributes": []
					},
					"name": "joinLines"
				}
			],
			[
				{
					"ddoc": "\n\tTakes a string with possibly invalid UTF8 sequences and outputs a valid UTF8 string as near to\n\tthe original as possible.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "sanitizeUTF8",
					"type": {
						"text": "string(const(ubyte[]) str)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"modifiers": [
										"const"
									],
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "ubyte",
										"qualifiedName": "ubyte",
										"name": "ubyte",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "sanitizeUTF8"
				}
			]
		]
	},
	"name": "vibe.utils.string"
},
"vibe.db.mongo.cursor": {
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\cursor.d",
	"ddoc": "\n\tMongoDB cursor abstraction\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"ddoc": "\n\tRepresents a cursor for a MongoDB query.\n\n\tUse foreach( doc; cursor ) to iterate over the list of documents.\n\n\tThis struct uses reference counting to destroy the underlying MongoDB cursor.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoCursor.__cpctor",
									"type": {
										"text": "const void(ref const(MongoCursor) p)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "MongoCursor",
													"qualifiedName": "vibe.db.mongo.cursor.MongoCursor",
													"name": "MongoCursor",
													"moduleName": "vibe.db.mongo.cursor",
													"attributes": [
														"ref"
													]
												},
												"name": "p"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "__cpctor"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns true if there are more documents for this cursor.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoCursor.empty",
									"type": {
										"text": "bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "empty"
								}
							],
							[
								{
									"ddoc": "\n\t\tIterates over all remaining documents.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoCursor.opApply",
									"type": {
										"text": "int(int delegate(ref Bson doc) del)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Bson",
																"qualifiedName": "vibe.data.bson.Bson",
																"name": "Bson",
																"moduleName": "vibe.data.bson",
																"attributes": [
																	"ref"
																]
															},
															"name": "doc"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								}
							],
							[
								{
									"ddoc": "\n\t\tIterates over all remaining documents.\n\n\t\tThrows: An exception if there is a query or communication error.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoCursor.opApply",
									"type": {
										"text": "int(int delegate(ref uint idx, ref Bson doc) del)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "uint",
																"qualifiedName": "uint",
																"name": "uint",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Bson",
																"qualifiedName": "vibe.data.bson.Bson",
																"name": "Bson",
																"moduleName": "vibe.data.bson",
																"attributes": [
																	"ref"
																]
															},
															"name": "doc"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoCursor.opAssign",
									"type": {
										"text": "ref MongoCursor(MongoCursor p)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoCursor",
											"qualifiedName": "vibe.db.mongo.cursor.MongoCursor",
											"name": "MongoCursor",
											"moduleName": "vibe.db.mongo.cursor"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "MongoCursor",
													"qualifiedName": "vibe.db.mongo.cursor.MongoCursor",
													"name": "MongoCursor",
													"moduleName": "vibe.db.mongo.cursor",
													"attributes": []
												},
												"name": "p"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "opAssign"
								}
							]
						]
					},
					"nestedName": "MongoCursor",
					"name": "MongoCursor"
				}
			]
		]
	},
	"name": "vibe.db.mongo.cursor"
},
"vibe.http.auth.basic_auth": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\auth\\basic_auth.d",
	"ddoc": "\n\tImplements HTTP Basic Auth.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "addBasicAuth",
					"type": {
						"text": "void(HttpRequest req, string user, string password)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpRequest",
									"qualifiedName": "vibe.http.common.HttpRequest",
									"name": "HttpRequest",
									"moduleName": "vibe.http.common",
									"attributes": []
								},
								"name": "req"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "user"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "password"
							}
						],
						"attributes": []
					},
					"name": "addBasicAuth"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "performBasicAuth",
					"type": {
						"text": "void delegate(HttpServerRequest req, HttpServerResponse res)(string realm, bool delegate(string user, string name) pwcheck)",
						"typeclass": "function",
						"returnType": {
							"typeclass": "delegate",
							"returnType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "void",
								"qualifiedName": "void",
								"name": "void",
								"moduleName": ""
							},
							"parameters": [
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerRequest",
										"qualifiedName": "vibe.http.server.HttpServerRequest",
										"name": "HttpServerRequest",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "req"
								},
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerResponse",
										"qualifiedName": "vibe.http.server.HttpServerResponse",
										"name": "HttpServerResponse",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "res"
								}
							]
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "realm"
							},
							{
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											},
											"name": "user"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											},
											"name": "name"
										}
									],
									"attributes": []
								},
								"name": "pwcheck"
							}
						],
						"attributes": []
					},
					"name": "performBasicAuth"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "performBasicAuth",
					"type": {
						"text": "string(HttpServerRequest req, HttpServerResponse res, string realm, bool delegate(string user, string name) pwcheck)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerRequest",
									"qualifiedName": "vibe.http.server.HttpServerRequest",
									"name": "HttpServerRequest",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "req"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerResponse",
									"qualifiedName": "vibe.http.server.HttpServerResponse",
									"name": "HttpServerResponse",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "res"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "realm"
							},
							{
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "bool",
										"qualifiedName": "bool",
										"name": "bool",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											},
											"name": "user"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": "",
												"attributes": []
											},
											"name": "name"
										}
									],
									"attributes": []
								},
								"name": "pwcheck"
							}
						],
						"attributes": []
					},
					"name": "performBasicAuth"
				}
			]
		]
	},
	"name": "vibe.http.auth.basic_auth"
},
"vibe.inet.mimetypes": {
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\mimetypes.d",
	"ddoc": "\n\tMaps file name extensions to standard mime types.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tReturns the standard mime type for the extension of the specified file name.\n\n\tAny unknown file extension will map to \"application/octet-stream\".\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "getMimeTypeForFile",
					"type": {
						"text": "string(string filename)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "filename"
							}
						],
						"attributes": []
					},
					"name": "getMimeTypeForFile"
				}
			],
			[
				{
					"ddoc": "\n\tReturns true for a selected but incomplete list of mime-types that are describing a compressed\n\tformat.\n\n\tThis function is useful for avoiding redundant compression.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isCompressedFormat",
					"type": {
						"text": "bool(string mimetype)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "mimetype"
							}
						],
						"attributes": []
					},
					"name": "isCompressedFormat"
				}
			]
		]
	},
	"name": "vibe.inet.mimetypes"
},
"vibe.vibe": {
	"kind": "module",
	"file": "..\\source\\vibe\\vibe.d",
	"ddoc": "\n\tCentral include for every vibe.d based application.\n\n\tThis file provides the majority of the vibe API through a single import. Note that typical\n\tvibe.d applications will import 'vibe.d' instead to also get an implicit application entry\n\tpoint.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
	},
	"name": "vibe.vibe"
},
"vibe.stream.zlib": {
	"kind": "module",
	"file": "..\\source\\vibe\\stream\\zlib.d",
	"ddoc": "\n\tZlib input/output streams\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\tTakes an input stream that contains data in deflate compressed format and outputs the\n\tuncompressed data.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "DeflateInputStream.this",
									"type": {
										"text": "DeflateInputStream(InputStream dst)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "DeflateInputStream",
											"qualifiedName": "vibe.stream.zlib.DeflateInputStream",
											"name": "DeflateInputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "ZlibInputStream",
						"typeClass": "primitive",
						"nestedName": "ZlibInputStream",
						"qualifiedName": "vibe.stream.zlib.ZlibInputStream",
						"name": "ZlibInputStream",
						"moduleName": "vibe.stream.zlib",
						"attributes": []
					},
					"nestedName": "DeflateInputStream",
					"name": "DeflateInputStream"
				}
			],
			[
				{
					"ddoc": "\n\tWrites any data compressed in deflate format to the specified output stream.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "DeflateOutputStream.this",
									"type": {
										"text": "DeflateOutputStream(OutputStream dst)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "DeflateOutputStream",
											"qualifiedName": "vibe.stream.zlib.DeflateOutputStream",
											"name": "DeflateOutputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "OutputStream",
													"qualifiedName": "vibe.stream.stream.OutputStream",
													"name": "OutputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "ZlibOutputStream",
						"typeClass": "primitive",
						"nestedName": "ZlibOutputStream",
						"qualifiedName": "vibe.stream.zlib.ZlibOutputStream",
						"name": "ZlibOutputStream",
						"moduleName": "vibe.stream.zlib",
						"attributes": []
					},
					"nestedName": "DeflateOutputStream",
					"name": "DeflateOutputStream"
				}
			],
			[
				{
					"ddoc": "\n\tTakes an input stream that contains data in gzip compressed format and outputs the\n\tuncompressed data.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "GzipInputStream.this",
									"type": {
										"text": "GzipInputStream(InputStream dst)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "GzipInputStream",
											"qualifiedName": "vibe.stream.zlib.GzipInputStream",
											"name": "GzipInputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "ZlibInputStream",
						"typeClass": "primitive",
						"nestedName": "ZlibInputStream",
						"qualifiedName": "vibe.stream.zlib.ZlibInputStream",
						"name": "ZlibInputStream",
						"moduleName": "vibe.stream.zlib",
						"attributes": []
					},
					"nestedName": "GzipInputStream",
					"name": "GzipInputStream"
				}
			],
			[
				{
					"ddoc": "\n\tWrites any data compressed in gzip format to the specified output stream.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "GzipOutputStream.this",
									"type": {
										"text": "GzipOutputStream(OutputStream dst)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "GzipOutputStream",
											"qualifiedName": "vibe.stream.zlib.GzipOutputStream",
											"name": "GzipOutputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "OutputStream",
													"qualifiedName": "vibe.stream.stream.OutputStream",
													"name": "OutputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "ZlibOutputStream",
						"typeClass": "primitive",
						"nestedName": "ZlibOutputStream",
						"qualifiedName": "vibe.stream.zlib.ZlibOutputStream",
						"name": "ZlibOutputStream",
						"moduleName": "vibe.stream.zlib",
						"attributes": []
					},
					"nestedName": "GzipOutputStream",
					"name": "GzipOutputStream"
				}
			],
			[
				{
					"ddoc": "\n\tGeneric zlib input stream.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "ZlibInputStream.this",
									"type": {
										"text": "ZlibInputStream(InputStream src, HeaderFormat type)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ZlibInputStream",
											"qualifiedName": "vibe.stream.zlib.ZlibInputStream",
											"name": "ZlibInputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "src"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HeaderFormat",
													"qualifiedName": "HeaderFormat",
													"name": "HeaderFormat",
													"moduleName": "",
													"attributes": []
												},
												"name": "type"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibInputStream.empty",
									"type": {
										"text": "@property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibInputStream.leastSize",
									"type": {
										"text": "@property ulong()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibInputStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibInputStream.readAll",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readAll"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibInputStream.readLine",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0, string linesep = \"\\x0d\\x0a\")",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readLine"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "ZlibInputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "InputStream",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "ZlibInputStream"
				}
			],
			[
				{
					"ddoc": "\n\tGeneric zlib output stream.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "ZlibOutputStream.this",
									"type": {
										"text": "ZlibOutputStream(OutputStream dst, HeaderFormat type)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ZlibOutputStream",
											"qualifiedName": "vibe.stream.zlib.ZlibOutputStream",
											"name": "ZlibOutputStream",
											"moduleName": "vibe.stream.zlib"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "OutputStream",
													"qualifiedName": "vibe.stream.stream.OutputStream",
													"name": "OutputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "dst"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HeaderFormat",
													"qualifiedName": "HeaderFormat",
													"name": "HeaderFormat",
													"moduleName": "",
													"attributes": []
												},
												"name": "type"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibOutputStream.finalize",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibOutputStream.flush",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibOutputStream.write",
									"type": {
										"text": "void(const(ubyte[]) data, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ZlibOutputStream.write",
									"type": {
										"text": "void(InputStream stream, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "ZlibOutputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "ZlibOutputStream"
				}
			]
		]
	},
	"name": "vibe.stream.zlib"
},
"vibe.data.json": {
	"kind": "module",
	"file": "..\\source\\vibe\\data\\json.d",
	"ddoc": "\n\tJSON serialization and value handling.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"ddoc": "\n\n\n\tRepresents a single JSON value.\n\n\tJSON values can have one of the types defined in the JSON.Type enum. They\n\tbehave mostly like values in ECMA script in the way that you can\n\ttransparently perform operations on them. However, strict typechecking is\n\tdone, so that operations between differently typed JSON values will throw\n\tand exception. Additionally, an explicit cast is required to convert a\n\tJSON value the the corresponding static D type.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(typeof(null))",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"typeclass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "typeof",
														"qualifiedName": "typeof",
														"name": "typeof",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "null",
																"qualifiedName": "null",
																"name": "null",
																"moduleName": "",
																"attributes": []
															}
														}
													],
													"attributes": []
												}
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(bool v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(int v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(long v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(double v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(string v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(Json[] v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								},
								{
									"ddoc": "\n\t\tConstructor for a JSON object.\n\t\n",
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Json.this",
									"type": {
										"text": "ref Json(Json[string] v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"keyType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"typeClass": "associative array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"enums": [
							[
								{
									"ddoc": " Represents the run time type of a JSON value.\n\t\n",
									"kind": "enum",
									"protection": "public",
									"members": [
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Undefined",
											"name": "Undefined"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Null",
											"name": "Null"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Bool",
											"name": "Bool"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Int",
											"name": "Int"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Float",
											"name": "Float"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.String",
											"name": "String"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Array",
											"name": "Array"
										},
										{
											"kind": "enum member",
											"protection": "public",
											"nestedName": "Json.Type.Object",
											"name": "Object"
										}
									],
									"nestedName": "Json.Type",
									"name": "Type",
									"baseType": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									}
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.EmptyArray",
									"type": {
										"text": "@property Json()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "EmptyArray"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.EmptyObject",
									"type": {
										"text": "@property Json()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "EmptyObject"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "checkType(T)",
									"nestedName": "Json.checkType",
									"type": {
										"text": "const void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "checkType"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns the number of entries of string, array or object typed JSON values.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.length",
									"type": {
										"text": "const @property uint()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "length"
								}
							],
							[
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "int(int delegate(ref Json obj) del)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "const int(int delegate(ref const(Json) obj) del)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"modifiers": [
																	"const"
																],
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "int(int delegate(ref uint idx, ref Json obj) del)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "uint",
																"qualifiedName": "uint",
																"name": "uint",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "const int(int delegate(ref uint idx, ref const(Json) obj) del)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "uint",
																"qualifiedName": "uint",
																"name": "uint",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"modifiers": [
																	"const"
																],
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "int(int delegate(ref string idx, ref Json obj) del)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								},
								{
									"ddoc": "\n\t\tAllows foreach iterating over JSON objects and arrays.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opApply",
									"type": {
										"text": "const int(int delegate(ref string idx, ref const(Json) obj) del)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "idx"
														},
														{
															"type": {
																"kind": "type",
																"modifiers": [
																	"const"
																],
																"typeClass": "primitive",
																"nestedName": "Json",
																"qualifiedName": "vibe.data.json.Json",
																"name": "Json",
																"moduleName": "vibe.data.json",
																"attributes": [
																	"ref"
																]
															},
															"name": "obj"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opApply"
								}
							],
							[
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "ref Json(Json v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "void(typeof(null))",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "typeof",
														"qualifiedName": "typeof",
														"name": "typeof",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "null",
																"qualifiedName": "null",
																"name": "null",
																"moduleName": "",
																"attributes": []
															}
														}
													],
													"attributes": []
												}
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "bool(bool v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "int(int v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "long(long v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "long",
											"qualifiedName": "long",
											"name": "long",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "double(double v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "double",
											"qualifiedName": "double",
											"name": "double",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "string(string v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "Json[](Json[] v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "Json",
												"qualifiedName": "vibe.data.json.Json",
												"name": "Json",
												"moduleName": "vibe.data.json"
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								},
								{
									"ddoc": "\n\t\tAllows assignment of D values to a JSON value.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opAssign",
									"type": {
										"text": "Json[string](Json[string] v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"keyType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": ""
											},
											"typeClass": "associative array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "Json",
												"qualifiedName": "vibe.data.json.Json",
												"name": "Json",
												"moduleName": "vibe.data.json"
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"keyType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"typeClass": "associative array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": []
									},
									"name": "opAssign"
								}
							],
							[
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "const Json(ref const(Json) other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "Json(Json other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": []
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opOpAssign(string op) if (op == \"+\" || op == \"-\" || op == \"*\" || op == \"/\" || op == \"%\")",
									"nestedName": "Json.opOpAssign",
									"type": {
										"text": "void(Json other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": []
									},
									"name": "opOpAssign"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "const Json(bool other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "const Json(long other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "const Json(double other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "const Json(string other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinary(string op)",
									"nestedName": "Json.opBinary",
									"type": {
										"text": "Json(Json[] other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": []
									},
									"name": "opBinary"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op)",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "const Json(bool other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinaryRight"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op)",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "const Json(long other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinaryRight"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op)",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "const Json(double other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinaryRight"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op) if (op == \"~\")",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "const Json(string other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinaryRight"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op) if (op == \"in\")",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "inout inout(Json)*(string other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "pointer",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"inout"
												],
												"typeClass": "primitive",
												"nestedName": "Json",
												"qualifiedName": "vibe.data.json.Json",
												"name": "Json",
												"moduleName": "vibe.data.json"
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opBinaryRight"
								},
								{
									"ddoc": "\n\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or an exception\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opBinaryRight(string op)",
									"nestedName": "Json.opBinaryRight",
									"type": {
										"text": "Json(Json[] other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Json",
														"qualifiedName": "vibe.data.json.Json",
														"name": "Json",
														"moduleName": "vibe.data.json"
													},
													"attributes": []
												},
												"name": "other"
											}
										],
										"attributes": []
									},
									"name": "opBinaryRight"
								}
							],
							[
								{
									"ddoc": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n",
									"kind": "function",
									"templateName": "opCast(T)",
									"nestedName": "Json.opCast",
									"type": {
										"text": "inout inout(T)()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"inout"
										]
									},
									"name": "opCast"
								},
								{
									"kind": "function",
									"ddoc": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n",
									"templateName": "get(T)",
									"nestedName": "Json.get",
									"type": {
										"text": "inout inout(T)()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"inout"
										]
									},
									"name": "get"
								},
								{
									"kind": "function",
									"ddoc": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n",
									"templateName": "opt(T)",
									"nestedName": "Json.opt",
									"type": {
										"text": "const const(T)(const(T) def = T.init)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"const"
											],
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"defaultValue": "T.init",
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "def"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opt"
								},
								{
									"kind": "function",
									"ddoc": "\n\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n\t\n",
									"templateName": "opt(T)",
									"nestedName": "Json.opt",
									"type": {
										"text": "T(T def = T.init)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [
											{
												"defaultValue": "T.init",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "def"
											}
										],
										"attributes": []
									},
									"name": "opt"
								}
							],
							[
								{
									"ddoc": "\n\t\tCompares two JSON values.\n\n\t\tIf the types of the two values differ, the value with the smaller type\n\t\tid is considered the smaller value. This differs from ECMA script, which\n\t\tperforms a type conversion before comparing the values.\n\n\t\tJSON values of type Object cannot be compared and will throw an\n\t\texception.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opCmp",
									"type": {
										"text": "const int(ref const(Json) other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opCmp"
								}
							],
							[
								{
									"kind": "function",
									"ddoc": "\n\t\tAllows to access existing fields of a JSON object using dot syntax.\n\t\n",
									"templateName": "opDispatch(string prop)",
									"nestedName": "Json.opDispatch",
									"type": {
										"text": "const const(Json)()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"const"
											],
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "opDispatch"
								},
								{
									"kind": "function",
									"ddoc": "\n\t\tAllows to access existing fields of a JSON object using dot syntax.\n\t\n",
									"templateName": "opDispatch(string prop)",
									"nestedName": "Json.opDispatch",
									"type": {
										"text": "Json()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "opDispatch"
								}
							],
							[
								{
									"ddoc": "\n\t\tCompares two JSON values for equality.\n\n\t\tIf the two values have different types, they are considered unequal.\n\t\tThis differs with ECMA script, which performs a type conversion before\n\t\tcomparing the values.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(ref const(Json) other)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Json",
													"qualifiedName": "vibe.data.json.Json",
													"name": "Json",
													"moduleName": "vibe.data.json",
													"attributes": [
														"ref"
													]
												},
												"name": "other"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								},
								{
									"ddoc": "\n\t\tCompares two JSON values for equality.\n\n\t\tIf the two values have different types, they are considered unequal.\n\t\tThis differs with ECMA script, which performs a type conversion before\n\t\tcomparing the values.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(typeof(null))",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "typeof",
														"qualifiedName": "typeof",
														"name": "typeof",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "null",
																"qualifiedName": "null",
																"name": "null",
																"moduleName": "",
																"attributes": []
															}
														}
													],
													"attributes": []
												}
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(bool v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(long v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(double v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "double",
													"qualifiedName": "double",
													"name": "double",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opEquals",
									"type": {
										"text": "const bool(string v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"ddoc": "\n\t\tAllows direct indexing of array typed JSON values.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opIndex",
									"type": {
										"text": "inout ref inout(Json)(uint idx)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "idx"
											}
										],
										"attributes": [
											"inout",
											"ref"
										]
									},
									"name": "opIndex"
								}
							],
							[
								{
									"ddoc": "\n\t\tAllows direct indexing of object typed JSON values using a string as\n\t\tthe key.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opIndex",
									"type": {
										"text": "const const(Json)(string key)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"const"
											],
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opIndex"
								},
								{
									"ddoc": "\n\t\tAllows direct indexing of object typed JSON values using a string as\n\t\tthe key.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opIndex",
									"type": {
										"text": "ref Json(string key)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "opIndex"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns a slice of a JSON array.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opSlice",
									"type": {
										"text": "inout inout(Json[])()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "Json",
												"qualifiedName": "vibe.data.json.Json",
												"name": "Json",
												"moduleName": "vibe.data.json"
											}
										},
										"parameters": [],
										"attributes": [
											"inout"
										]
									},
									"name": "opSlice"
								}
							],
							[
								{
									"ddoc": "\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.opSlice",
									"type": {
										"text": "inout inout(Json[])(uint from, uint to)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "Json",
												"qualifiedName": "vibe.data.json.Json",
												"name": "Json",
												"moduleName": "vibe.data.json"
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "from"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "to"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opSlice"
								}
							],
							[
								{
									"ddoc": "\n\t\tPerforms unary operations on the JSON value.\n\n\t\tThe following operations are supported for each type:\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD ~)\n\t\t\t$(DT Int)    $(DD +, -, ++, --)\n\t\t\t$(DT Float)  $(DD +, -, ++, --)\n\t\t\t$(DT String) $(DD none)\n\t\t\t$(DT Array)  $(DD none)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n\t\n",
									"kind": "function",
									"templateName": "opUnary(string op)",
									"nestedName": "Json.opUnary",
									"type": {
										"text": "const Json()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "opUnary"
								}
							],
							[
								{
									"kind": "function",
									"ddoc": "\n\t\tConverts the JSON value to the corresponding D type - types are converted as neccessary.\n\t\n",
									"templateName": "to(T)",
									"nestedName": "Json.to",
									"type": {
										"text": "inout inout(T)()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"modifiers": [
												"inout"
											],
											"typeClass": "primitive",
											"nestedName": "T",
											"qualifiedName": "T",
											"name": "T",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"inout"
										]
									},
									"name": "to"
								}
							],
							[
								{
									"ddoc": "\n\t\tReturns the JSON object as a string.\n\n\t\tFor large JSON values use toJSON() instead as this function will store the whole string\n\t\tin memory, whereas toJSON() writes it out bit for bit.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.toString",
									"type": {
										"text": "const string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							],
							[
								{
									"ddoc": "\n\t\tThe current type id of this JSON object.\n\t\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Json.type",
									"type": {
										"text": "const @property Type()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Type",
											"qualifiedName": "Type",
											"name": "Type",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "type"
								}
							],
							[
								{
									"kind": "function",
									"ddoc": "\n\t\tReturns the type id corresponding to the given D type.\n\t\n",
									"templateName": "typeId(T)",
									"nestedName": "Json.typeId",
									"type": {
										"text": "Type()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Type",
											"qualifiedName": "Type",
											"name": "Type",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "typeId"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Json.Undefined",
									"type": {
										"kind": "type",
										"text": "Json",
										"typeClass": "primitive",
										"nestedName": "Json",
										"qualifiedName": "vibe.data.json.Json",
										"name": "Json",
										"moduleName": "vibe.data.json",
										"attributes": []
									},
									"name": "Undefined"
								}
							]
						]
					},
					"nestedName": "Json",
					"name": "Json"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"templateName": "deserializeJson(T)",
					"nestedName": "deserializeJson",
					"type": {
						"text": "void(ref T dst, Json src)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": []
								},
								"name": "src"
							}
						],
						"attributes": []
					},
					"name": "deserializeJson"
				}
			],
			[
				{
					"ddoc": "\n\n\n\tParses the given range as a JSON string and returns the corresponding JSON object.\n\n\tThrows an Exception if any parsing error occured.\n",
					"kind": "function",
					"templateName": "parseJson(R) if (is(R == string))",
					"nestedName": "parseJson",
					"type": {
						"text": "Json(ref R range, int* line = null)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Json",
							"qualifiedName": "vibe.data.json.Json",
							"name": "Json",
							"moduleName": "vibe.data.json"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "range"
							},
							{
								"defaultValue": "null",
								"type": {
									"kind": "type",
									"typeClass": "pointer",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "line"
							}
						],
						"attributes": []
					},
					"name": "parseJson"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "serializeToJson(T)",
					"nestedName": "serializeToJson",
					"type": {
						"text": "Json(T value)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "Json",
							"qualifiedName": "vibe.data.json.Json",
							"name": "Json",
							"moduleName": "vibe.data.json"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "value"
							}
						],
						"attributes": []
					},
					"name": "serializeToJson"
				}
			],
			[
				{
					"ddoc": "\n\tWrites the given JSON object as a JSON string into the destination range.\n\n\tThe basic version will not output any whitespace and thus minizime the size of the string.\n\n\ttoPrettyJSON() in the other hand will add newlines and indents to make the output human\n\treadable.\n",
					"kind": "function",
					"templateName": "toJson(R)",
					"nestedName": "toJson",
					"type": {
						"text": "void(ref R dst, in const(Json) json)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"modifiers": [
										"const"
									],
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": [
										"in"
									]
								},
								"name": "json"
							}
						],
						"attributes": []
					},
					"name": "toJson"
				},
				{
					"ddoc": "\n\tWrites the given JSON object as a JSON string into the destination range.\n\n\tThe basic version will not output any whitespace and thus minizime the size of the string.\n\n\ttoPrettyJSON() in the other hand will add newlines and indents to make the output human\n\treadable.\n",
					"kind": "function",
					"templateName": "toPrettyJson(R)",
					"nestedName": "toPrettyJson",
					"type": {
						"text": "void(ref R dst, ref const(Json) json, int level = 0)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"modifiers": [
										"const"
									],
									"typeClass": "primitive",
									"nestedName": "Json",
									"qualifiedName": "vibe.data.json.Json",
									"name": "Json",
									"moduleName": "vibe.data.json",
									"attributes": [
										"ref"
									]
								},
								"name": "json"
							},
							{
								"defaultValue": "0",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "level"
							}
						],
						"attributes": []
					},
					"name": "toPrettyJson"
				}
			]
		]
	},
	"name": "vibe.data.json"
},
"vibe.inet.urltransfer": {
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\urltransfer.d",
	"ddoc": "\n\tDownloading and uploading of data from/to URLs.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tDownloads a file from the specified URL.\n\n\tAny redirects will be followed until the actual file resource is reached or if the redirection\n\tlimit of 10 is reached. Note that only HTTP(S) is currently supported.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "download",
					"type": {
						"text": "InputStream(string url_, HttpClient client = null)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "url_"
							},
							{
								"defaultValue": "null",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpClient",
									"qualifiedName": "vibe.http.client.HttpClient",
									"name": "HttpClient",
									"moduleName": "vibe.http.client",
									"attributes": []
								},
								"name": "client"
							}
						],
						"attributes": []
					},
					"name": "download"
				},
				{
					"ddoc": "\n\tDownloads a file from the specified URL.\n\n\tAny redirects will be followed until the actual file resource is reached or if the redirection\n\tlimit of 10 is reached. Note that only HTTP(S) is currently supported.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "download",
					"type": {
						"text": "void(string url, string filename)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "url"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "filename"
							}
						],
						"attributes": []
					},
					"name": "download"
				}
			]
		]
	},
	"name": "vibe.inet.urltransfer"
},
"vibe.appmain": {
	"kind": "module",
	"file": "..\\source\\vibe\\appmain.d",
	"ddoc": "\n\tProvides vibe based applications with a central program entry point.\n\n\tThis module is included automatically through the import 'vibe.d'. It will provide a default\n\tapplication entry point which parses command line arguments, reads the global vibe configuration\n\tfile, and starts the event loop.\n\n\tThe application itself then just has to initialize itself from within a 'static this' module\n\tconstructor and perform the appropriate calls to listen for connections or other operations.\n\n\tIf you want to provide your own main() function, you have to import 'vibe.vibe' instead of\n\t'vibe.d'. Be sure to call start() at the end of your main function in this case. Also beware\n\tthat any global configuration is not applied in this case and features such as priviledge\n\tlowering are not in place.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tThe predefined vibe.d application entry point.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "main",
					"type": {
						"text": "int(string[] args)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "int",
							"qualifiedName": "int",
							"name": "int",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "main"
				}
			]
		]
	},
	"name": "vibe.appmain"
},
"vibe.db.mongo.mongo": {
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\mongo.d",
	"ddoc": "\n\tMongoDB and MongoCollection classes and connections.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tConnects to a MongoDB instance.\n\n\tExamples:\n\t---\n\tauto db = connectMongoDB(\"127.0.0.1\")\n\tauto users = db[\"users\"];\n\tusers.insert(BSON(\"peter\"));\n\t---\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "connectMongoDB",
					"type": {
						"text": "MongoDB(string host, ushort port = cast(ushort)27017)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "MongoDB",
							"qualifiedName": "vibe.db.mongo.db.MongoDB",
							"name": "MongoDB",
							"moduleName": "vibe.db.mongo.db"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "host"
							},
							{
								"defaultValue": "cast(ushort",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "port"
							}
						],
						"attributes": []
					},
					"name": "connectMongoDB"
				}
			]
		]
	},
	"name": "vibe.db.mongo.mongo"
},
"vibe.inet.url": {
	"kind": "module",
	"file": "..\\source\\vibe\\inet\\url.d",
	"ddoc": "\n\tURL parsing routines.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"ddoc": "\n\tRepresents an absolute or relative file system path.\n\n\tThis struct allows to do safe operations on paths, such as concatenation and sub paths. Checks\n\tare done to disallow invalid operations such as concatenating two absolute paths. It also\n\tvalidates path strings and allows for easy checking of malicious relative paths.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Path.this",
									"type": {
										"text": "ref Path(string pathstr)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "pathstr"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Path.this",
									"type": {
										"text": "ref Path(immutable(PathEntry)[] nodes, bool absolute)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"modifiers": [
															"immutable"
														],
														"typeClass": "primitive",
														"nestedName": "PathEntry",
														"qualifiedName": "vibe.inet.url.PathEntry",
														"name": "PathEntry",
														"moduleName": "vibe.inet.url"
													},
													"attributes": []
												},
												"name": "nodes"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "absolute"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "Path.this",
									"type": {
										"text": "ref Path(PathEntry entry)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "entry"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.absolute",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "absolute"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.empty",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"ddoc": " Determines if this path goes outside of its base path (i.e. begins with '..').\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.external",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "external"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.head",
									"type": {
										"text": "const @property PathEntry()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "PathEntry",
											"qualifiedName": "vibe.inet.url.PathEntry",
											"name": "PathEntry",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "head"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.length",
									"type": {
										"text": "const @property uint()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "uint",
											"qualifiedName": "uint",
											"name": "uint",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "length"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.nodes",
									"type": {
										"text": "const @property immutable(PathEntry)[]()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"immutable"
												],
												"typeClass": "primitive",
												"nestedName": "PathEntry",
												"qualifiedName": "vibe.inet.url.PathEntry",
												"name": "PathEntry",
												"moduleName": "vibe.inet.url"
											}
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "nodes"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinary(string OP) if (OP == \"~\")",
									"nestedName": "Path.opBinary",
									"type": {
										"text": "const Path(const const(Path) rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"const"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinary(string OP) if (OP == \"~\")",
									"nestedName": "Path.opBinary",
									"type": {
										"text": "const Path(string rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinary(string OP) if (OP == \"~\")",
									"nestedName": "Path.opBinary",
									"type": {
										"text": "const Path(PathEntry rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.opCmp",
									"type": {
										"text": "const int(ref const(Path) rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"ref"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opCmp"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opDollar(int dim) if (dim == 0)",
									"nestedName": "Path.opDollar",
									"type": {
										"text": "const size_t()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "size_t",
											"qualifiedName": "size_t",
											"name": "size_t",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "opDollar"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.opEquals",
									"type": {
										"text": "const bool(ref const(Path) rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"ref"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.opIndex",
									"type": {
										"text": "const PathEntry(uint idx)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "PathEntry",
											"qualifiedName": "vibe.inet.url.PathEntry",
											"name": "PathEntry",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "idx"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opIndex"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opOpAssign(string OP) if (OP == \"~\")",
									"nestedName": "Path.opOpAssign",
									"type": {
										"text": "void(string rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": []
									},
									"name": "opOpAssign"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opOpAssign(string OP) if (OP == \"~\")",
									"nestedName": "Path.opOpAssign",
									"type": {
										"text": "void(PathEntry rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": []
									},
									"name": "opOpAssign"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opOpAssign(string OP) if (OP == \"~\")",
									"nestedName": "Path.opOpAssign",
									"type": {
										"text": "void(Path rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": []
									},
									"name": "opOpAssign"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.opSlice",
									"type": {
										"text": "const Path(uint start, uint end)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "start"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "end"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opSlice"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.parentPath",
									"type": {
										"text": "const @property Path()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "parentPath"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.relativeTo",
									"type": {
										"text": "const Path(const(Path) parentPath)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "parentPath"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "relativeTo"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.startsWith",
									"type": {
										"text": "const bool(const(Path) rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Path",
													"qualifiedName": "vibe.inet.url.Path",
													"name": "Path",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "startsWith"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Path.toString",
									"type": {
										"text": "const string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							]
						]
					},
					"nestedName": "Path",
					"name": "Path"
				}
			],
			[
				{
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "PathEntry.this",
									"type": {
										"text": "ref PathEntry(string str)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "PathEntry",
											"qualifiedName": "vibe.inet.url.PathEntry",
											"name": "PathEntry",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "str"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PathEntry.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinary(string OP) if (OP == \"~\")",
									"nestedName": "PathEntry.opBinary",
									"type": {
										"text": "const Path(PathEntry rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Path",
											"qualifiedName": "vibe.inet.url.Path",
											"name": "Path",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opBinary"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PathEntry.opCmp",
									"type": {
										"text": "const int(ref const(PathEntry) rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"ref"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opCmp"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PathEntry.opEquals",
									"type": {
										"text": "const bool(ref const(PathEntry) rhs)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "PathEntry",
													"qualifiedName": "vibe.inet.url.PathEntry",
													"name": "PathEntry",
													"moduleName": "vibe.inet.url",
													"attributes": [
														"ref"
													]
												},
												"name": "rhs"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "PathEntry.toString",
									"type": {
										"text": "const string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							]
						]
					},
					"nestedName": "PathEntry",
					"name": "PathEntry"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents a URL decomposed into its components.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.__xopEquals",
									"type": {
										"text": "bool(const(void*) p, const(void*) q)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "p"
											},
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "pointer",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "q"
											}
										],
										"attributes": []
									},
									"name": "__xopEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.opEquals",
									"type": {
										"text": "const bool(const(Url) p)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "primitive",
													"nestedName": "Url",
													"qualifiedName": "vibe.inet.url.Url",
													"name": "Url",
													"moduleName": "vibe.inet.url",
													"attributes": []
												},
												"name": "p"
											}
										],
										"attributes": [
											"const"
										]
									},
									"name": "opEquals"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.parse",
									"type": {
										"text": "Url(string str)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Url",
											"qualifiedName": "vibe.inet.url.Url",
											"name": "Url",
											"moduleName": "vibe.inet.url"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "str"
											}
										],
										"attributes": []
									},
									"name": "parse"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Url.toString",
									"type": {
										"text": "const string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const"
										]
									},
									"name": "toString"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Url.anchor",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "anchor"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Url.host",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "host"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Url.localURI",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "localURI"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Url.password",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "password"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Url.path",
									"type": {
										"kind": "type",
										"text": "Path",
										"typeClass": "primitive",
										"nestedName": "Path",
										"qualifiedName": "vibe.inet.url.Path",
										"name": "Path",
										"moduleName": "vibe.inet.url",
										"attributes": []
									},
									"name": "path"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Url.pathString",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "pathString"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Url.port",
									"type": {
										"kind": "type",
										"text": "ushort",
										"typeClass": "primitive",
										"nestedName": "ushort",
										"qualifiedName": "ushort",
										"name": "ushort",
										"moduleName": "",
										"attributes": []
									},
									"name": "port"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Url.querystring",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "querystring"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Url.schema",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "schema"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Url.username",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "username"
								}
							]
						]
					},
					"nestedName": "Url",
					"name": "Url"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": " Joins two path strings. subpath must be relative.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "joinPath",
					"type": {
						"text": "string(string basepath, string subpath)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "basepath"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "subpath"
							}
						],
						"attributes": []
					},
					"name": "joinPath"
				}
			],
			[
				{
					"ddoc": " Splits up a path string into its elements/folders\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "splitPath",
					"type": {
						"text": "PathEntry[](string path)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "array",
							"elementType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "PathEntry",
								"qualifiedName": "vibe.inet.url.PathEntry",
								"name": "PathEntry",
								"moduleName": "vibe.inet.url"
							}
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "path"
							}
						],
						"attributes": []
					},
					"name": "splitPath"
				}
			]
		]
	},
	"name": "vibe.inet.url"
},
"vibe.mail.smtp": {
	"kind": "module",
	"file": "..\\source\\vibe\\mail\\smtp.d",
	"ddoc": "\n\tSMTP client implementation\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpConnectionType.Plain",
							"name": "Plain"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpConnectionType.SSL",
							"name": "SSL"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpConnectionType.StartTLS",
							"name": "StartTLS"
						}
					],
					"nestedName": "SmtpConnectionType",
					"name": "SmtpConnectionType",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus._Success",
							"name": "_Success"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.SystemStatus",
							"name": "SystemStatus"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.HelpMessage",
							"name": "HelpMessage"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.ServiceReady",
							"name": "ServiceReady"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.ServiceClosing",
							"name": "ServiceClosing"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.Success",
							"name": "Success"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.Forwarding",
							"name": "Forwarding"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.StartMailInput",
							"name": "StartMailInput"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.ServiceUnavailable",
							"name": "ServiceUnavailable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.MailboxTemporarilyUnavailable",
							"name": "MailboxTemporarilyUnavailable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.ProcessingError",
							"name": "ProcessingError"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.OutOfDiskSpace",
							"name": "OutOfDiskSpace"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.CommandUnrecognized",
							"name": "CommandUnrecognized"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.InvalidParameters",
							"name": "InvalidParameters"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.CommandNotImplemented",
							"name": "CommandNotImplemented"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.BadCommandSequence",
							"name": "BadCommandSequence"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.CommandParameterNotImplemented",
							"name": "CommandParameterNotImplemented"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.DomainAcceptsNoMail",
							"name": "DomainAcceptsNoMail"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.AccessDenied",
							"name": "AccessDenied"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.MailboxUnavailable",
							"name": "MailboxUnavailable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.UserNotLocal",
							"name": "UserNotLocal"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.ExceededStorageAllocation",
							"name": "ExceededStorageAllocation"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.MailboxNameNotAllowed",
							"name": "MailboxNameNotAllowed"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "SmtpStatus.TransactionFailed",
							"name": "TransactionFailed"
						}
					],
					"nestedName": "SmtpStatus",
					"name": "SmtpStatus",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Mail.bodyText",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "bodyText"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Mail.headers",
									"type": {
										"kind": "type",
										"text": "StrMapCI",
										"typeClass": "primitive",
										"nestedName": "StrMapCI",
										"qualifiedName": "vibe.http.common.StrMapCI",
										"name": "StrMapCI",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "headers"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Mail",
					"name": "Mail"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "SmtpClientSettings.this",
									"type": {
										"text": "SmtpClientSettings()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SmtpClientSettings",
											"qualifiedName": "vibe.mail.smtp.SmtpClientSettings",
											"name": "SmtpClientSettings",
											"moduleName": "vibe.mail.smtp"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "SmtpClientSettings.this",
									"type": {
										"text": "SmtpClientSettings(string host, ushort port)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "SmtpClientSettings",
											"qualifiedName": "vibe.mail.smtp.SmtpClientSettings",
											"name": "SmtpClientSettings",
											"moduleName": "vibe.mail.smtp"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "host"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.connectionType",
									"type": {
										"kind": "type",
										"text": "SmtpConnectionType",
										"typeClass": "primitive",
										"nestedName": "SmtpConnectionType",
										"qualifiedName": "vibe.mail.smtp.SmtpConnectionType",
										"name": "SmtpConnectionType",
										"moduleName": "vibe.mail.smtp",
										"attributes": []
									},
									"name": "connectionType"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.host",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "host"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.localname",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "localname"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "SmtpClientSettings.port",
									"type": {
										"kind": "type",
										"text": "ushort",
										"typeClass": "primitive",
										"nestedName": "ushort",
										"qualifiedName": "ushort",
										"name": "ushort",
										"moduleName": "",
										"attributes": []
									},
									"name": "port"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "SmtpClientSettings",
					"name": "SmtpClientSettings"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "sendMail",
					"type": {
						"text": "void(SmtpClientSettings settings, Mail mail)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "SmtpClientSettings",
									"qualifiedName": "vibe.mail.smtp.SmtpClientSettings",
									"name": "SmtpClientSettings",
									"moduleName": "vibe.mail.smtp",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Mail",
									"qualifiedName": "vibe.mail.smtp.Mail",
									"name": "Mail",
									"moduleName": "vibe.mail.smtp",
									"attributes": []
								},
								"name": "mail"
							}
						],
						"attributes": []
					},
					"name": "sendMail"
				}
			]
		]
	},
	"name": "vibe.mail.smtp"
},
"vibe.http.status": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\status.d",
	"ddoc": "\n\tList of all standard HTTP status codes.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n",
	"members": {
		"enums": [
			[
				{
					"ddoc": "\n\tDefinitions of all standard HTTP status codes.\n",
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Continue",
							"name": "Continue"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.SwitchingProtocols",
							"name": "SwitchingProtocols"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.OK",
							"name": "OK"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Created",
							"name": "Created"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Accepted",
							"name": "Accepted"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NonAuthoritativeInformation",
							"name": "NonAuthoritativeInformation"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NoContent",
							"name": "NoContent"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.ResetContent",
							"name": "ResetContent"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.PartialContent",
							"name": "PartialContent"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.MultipleChoices",
							"name": "MultipleChoices"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.MovedPermanently",
							"name": "MovedPermanently"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Found",
							"name": "Found"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.SeeOther",
							"name": "SeeOther"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NotModified",
							"name": "NotModified"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.UseProxy",
							"name": "UseProxy"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.TemporaryRedirect",
							"name": "TemporaryRedirect"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.BadRequest",
							"name": "BadRequest"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Unauthorized",
							"name": "Unauthorized"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.PaymentRequired",
							"name": "PaymentRequired"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Forbidden",
							"name": "Forbidden"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NotFound",
							"name": "NotFound"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.MethodNotAllowed",
							"name": "MethodNotAllowed"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NotAcceptable",
							"name": "NotAcceptable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.ProxyAuthenticationRequired",
							"name": "ProxyAuthenticationRequired"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.RequestTimeout",
							"name": "RequestTimeout"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Conflict",
							"name": "Conflict"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Gone",
							"name": "Gone"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.LengthRequired",
							"name": "LengthRequired"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.PreconditionFailed",
							"name": "PreconditionFailed"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.RequestEntityTooLarge",
							"name": "RequestEntityTooLarge"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.RequestURITooLarge",
							"name": "RequestURITooLarge"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.UnsupportedMediaType",
							"name": "UnsupportedMediaType"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.Requestedrangenotsatisfiable",
							"name": "Requestedrangenotsatisfiable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.ExpectationFailed",
							"name": "ExpectationFailed"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.InternalServerError",
							"name": "InternalServerError"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.NotImplemented",
							"name": "NotImplemented"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.BadGateway",
							"name": "BadGateway"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.ServiceUnavailable",
							"name": "ServiceUnavailable"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.GatewayTimeout",
							"name": "GatewayTimeout"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpStatus.HTTPVersionNotSupported",
							"name": "HTTPVersionNotSupported"
						}
					],
					"nestedName": "HttpStatus",
					"name": "HttpStatus",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tReturns a standard text description of the specified HTTP status code.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "httpStatusText",
					"type": {
						"text": "string(int code)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "code"
							}
						],
						"attributes": []
					},
					"name": "httpStatusText"
				}
			],
			[
				{
					"ddoc": "\n\tDetermines if the given status code justifies closing the connection (e.g. evil big request bodies)\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "justifiesConnectionClose",
					"type": {
						"text": "bool(int status)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "status"
							}
						],
						"attributes": []
					},
					"name": "justifiesConnectionClose"
				}
			]
		]
	},
	"name": "vibe.http.status"
},
"vibe.http.proxy": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\proxy.d",
	"ddoc": "\n\tHTTP (reverse) proxy implementation\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tTransparently forwards all requests to the proxy to a destination_host.\n\n\tYou can use the hostName field in the 'settings' to combine multiple internal HTTP servers\n\tinto one public web server with multiple virtual hosts.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttpReverseProxy",
					"type": {
						"text": "void(HttpServerSettings settings, string destination_host, ushort destination_port)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "destination_host"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "destination_port"
							}
						],
						"attributes": []
					},
					"name": "listenHttpReverseProxy"
				}
			],
			[
				{
					"ddoc": "\n\tReturns a HTTP request handler that forwards any request to the specified host/port.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "reverseProxyRequest",
					"type": {
						"text": "void delegate(HttpServerRequest req, HttpServerResponse res)(string destination_host, ushort destination_port)",
						"typeclass": "function",
						"returnType": {
							"typeclass": "delegate",
							"returnType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "void",
								"qualifiedName": "void",
								"name": "void",
								"moduleName": ""
							},
							"parameters": [
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerRequest",
										"qualifiedName": "vibe.http.server.HttpServerRequest",
										"name": "HttpServerRequest",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "req"
								},
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerResponse",
										"qualifiedName": "vibe.http.server.HttpServerResponse",
										"name": "HttpServerResponse",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "res"
								}
							]
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "destination_host"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "destination_port"
							}
						],
						"attributes": []
					},
					"name": "reverseProxyRequest"
				}
			]
		]
	},
	"name": "vibe.http.proxy"
},
"vibe.db.mongo.collection": {
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\collection.d",
	"ddoc": "\n\tMongoCollection class\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"structs": [
			[
				{
					"ddoc": "\n\tRepresents a single collection inside a MongoDB.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "MongoCollection.this",
									"type": {
										"text": "ref MongoCollection(MongoDB db, string collection_name)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoCollection",
											"qualifiedName": "vibe.db.mongo.collection.MongoCollection",
											"name": "MongoCollection",
											"moduleName": "vibe.db.mongo.collection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "MongoDB",
													"qualifiedName": "vibe.db.mongo.db.MongoDB",
													"name": "MongoDB",
													"moduleName": "vibe.db.mongo.db",
													"attributes": []
												},
												"name": "db"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											}
										],
										"attributes": [
											"ref"
										]
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"ddoc": "\n\t\tQueries the collection for existing documents.\n\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t\n",
									"kind": "function",
									"templateName": "find(T,U = typeof(null))",
									"nestedName": "MongoCollection.find",
									"type": {
										"text": "MongoCursor(T query, U returnFieldSelector = null, QueryFlags flags = QueryFlags.None, int num_skip = 0, int num_docs_per_chunk = 0)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoCursor",
											"qualifiedName": "vibe.db.mongo.cursor.MongoCursor",
											"name": "MongoCursor",
											"moduleName": "vibe.db.mongo.cursor"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "query"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "U",
													"qualifiedName": "U",
													"name": "U",
													"moduleName": "",
													"attributes": []
												},
												"name": "returnFieldSelector"
											},
											{
												"defaultValue": "QueryFlags.None",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "QueryFlags",
													"qualifiedName": "vibe.db.mongo.connection.QueryFlags",
													"name": "QueryFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											},
											{
												"defaultValue": "0",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "num_skip"
											},
											{
												"defaultValue": "0",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "num_docs_per_chunk"
											}
										],
										"attributes": []
									},
									"name": "find"
								}
							],
							[
								{
									"ddoc": "\n\t\tCombines a modify and find operation to a single atomic operation.\n\n\t\tThrows Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/findAndModify+Command)\n\t\n",
									"kind": "function",
									"templateName": "findAndModify(T,U,V)",
									"nestedName": "MongoCollection.findAndModify",
									"type": {
										"text": "Bson(T query, U update, V returnFieldSelector = null)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "query"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "U",
													"qualifiedName": "U",
													"name": "U",
													"moduleName": "",
													"attributes": []
												},
												"name": "update"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "V",
													"qualifiedName": "V",
													"name": "V",
													"moduleName": "",
													"attributes": []
												},
												"name": "returnFieldSelector"
											}
										],
										"attributes": []
									},
									"name": "findAndModify"
								}
							],
							[
								{
									"ddoc": "\n\t\tQueries the collection for existing documents.\n\n\t\tReturns: the first match or null\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n\t\n",
									"kind": "function",
									"templateName": "findOne(T,U = typeof(null))",
									"nestedName": "MongoCollection.findOne",
									"type": {
										"text": "Bson(T query, U returnFieldSelector = null, QueryFlags flags = QueryFlags.None)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "query"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "U",
													"qualifiedName": "U",
													"name": "U",
													"moduleName": "",
													"attributes": []
												},
												"name": "returnFieldSelector"
											},
											{
												"defaultValue": "QueryFlags.None",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "QueryFlags",
													"qualifiedName": "vibe.db.mongo.connection.QueryFlags",
													"name": "QueryFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											}
										],
										"attributes": []
									},
									"name": "findOne"
								}
							],
							[
								{
									"ddoc": "\n\t\tInserts new documents into the collection.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Inserting)\n\t\n",
									"kind": "function",
									"templateName": "insert(T)",
									"nestedName": "MongoCollection.insert",
									"type": {
										"text": "void(T document_or_documents, InsertFlags flags = InsertFlags.None)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "document_or_documents"
											},
											{
												"defaultValue": "InsertFlags.None",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InsertFlags",
													"qualifiedName": "vibe.db.mongo.connection.InsertFlags",
													"name": "InsertFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											}
										],
										"attributes": []
									},
									"name": "insert"
								}
							],
							[
								{
									"ddoc": "\n\t\tRemoves documents from the collection.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Removing)\n\t\n",
									"kind": "function",
									"templateName": "remove(T)",
									"nestedName": "MongoCollection.remove",
									"type": {
										"text": "void(T selector, DeleteFlags flags = DeleteFlags.None)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "selector"
											},
											{
												"defaultValue": "DeleteFlags.None",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "DeleteFlags",
													"qualifiedName": "vibe.db.mongo.connection.DeleteFlags",
													"name": "DeleteFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											}
										],
										"attributes": []
									},
									"name": "remove"
								}
							],
							[
								{
									"ddoc": "\n\t\tPerforms an update operation on documents matching 'selector', updating them with 'update'.\n\n\t\tThrows: Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Updating)\n\t\n",
									"kind": "function",
									"templateName": "update(T,U)",
									"nestedName": "MongoCollection.update",
									"type": {
										"text": "void(T selector, U update, UpdateFlags flags = UpdateFlags.None)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "selector"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "U",
													"qualifiedName": "U",
													"name": "U",
													"moduleName": "",
													"attributes": []
												},
												"name": "update"
											},
											{
												"defaultValue": "UpdateFlags.None",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "UpdateFlags",
													"qualifiedName": "vibe.db.mongo.connection.UpdateFlags",
													"name": "UpdateFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											}
										],
										"attributes": []
									},
									"name": "update"
								}
							]
						]
					},
					"nestedName": "MongoCollection",
					"name": "MongoCollection"
				}
			]
		]
	},
	"name": "vibe.db.mongo.collection"
},
"vibe.http.client": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\client.d",
	"ddoc": "\n\tA simple HTTP/1.1 client implementation.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpClient.this",
									"type": {
										"text": "HttpClient()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpClient",
											"qualifiedName": "vibe.http.client.HttpClient",
											"name": "HttpClient",
											"moduleName": "vibe.http.client"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClient.connect",
									"type": {
										"text": "void(string server, ushort port = cast(ushort)80, bool ssl = false)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "server"
											},
											{
												"defaultValue": "cast(ushort",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "connect"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClient.disconnect",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "disconnect"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClient.request",
									"type": {
										"text": "HttpClientResponse(void delegate(HttpClientRequest req) requester)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpClientResponse",
											"qualifiedName": "vibe.http.client.HttpClientResponse",
											"name": "HttpClientResponse",
											"moduleName": "vibe.http.client"
										},
										"parameters": [
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpClientRequest",
																"qualifiedName": "vibe.http.client.HttpClientRequest",
																"name": "HttpClientRequest",
																"moduleName": "vibe.http.client",
																"attributes": []
															},
															"name": "req"
														}
													],
													"attributes": []
												},
												"name": "requester"
											}
										],
										"attributes": []
									},
									"name": "request"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpClient.MaxHttpHeaderLineLength",
									"type": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									},
									"name": "MaxHttpHeaderLineLength"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpClient",
					"name": "HttpClient"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientRequest.bodyWriter",
									"type": {
										"text": "@property OutputStream()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "OutputStream",
											"qualifiedName": "vibe.stream.stream.OutputStream",
											"name": "OutputStream",
											"moduleName": "vibe.stream.stream"
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "bodyWriter"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientRequest.writeBody",
									"type": {
										"text": "void(InputStream data, ulong length)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "data"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "length"
											}
										],
										"attributes": []
									},
									"name": "writeBody"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientRequest.writeBody",
									"type": {
										"text": "void(ubyte[] data, string content_type = null)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "null",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "content_type"
											}
										],
										"attributes": []
									},
									"name": "writeBody"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientRequest.writeBody",
									"type": {
										"text": "void(string[string] form)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"keyType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"typeClass": "associative array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "string",
														"qualifiedName": "string",
														"name": "string",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "form"
											}
										],
										"attributes": []
									},
									"name": "writeBody"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "writeJsonBody(T)",
									"nestedName": "HttpClientRequest.writeJsonBody",
									"type": {
										"text": "void(T data)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "T",
													"qualifiedName": "T",
													"name": "T",
													"moduleName": "",
													"attributes": []
												},
												"name": "data"
											}
										],
										"attributes": []
									},
									"name": "writeJsonBody"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientRequest.writePart",
									"type": {
										"text": "void(MultiPart part)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "MultiPart",
													"qualifiedName": "vibe.http.common.MultiPart",
													"name": "MultiPart",
													"moduleName": "vibe.http.common",
													"attributes": []
												},
												"name": "part"
											}
										],
										"attributes": []
									},
									"name": "writePart"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "HttpRequest",
						"typeClass": "primitive",
						"nestedName": "HttpRequest",
						"qualifiedName": "vibe.http.common.HttpRequest",
						"name": "HttpRequest",
						"moduleName": "vibe.http.common",
						"attributes": []
					},
					"nestedName": "HttpClientRequest",
					"name": "HttpClientRequest"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpClientResponse.readJson",
									"type": {
										"text": "Json()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Json",
											"qualifiedName": "vibe.data.json.Json",
											"name": "Json",
											"moduleName": "vibe.data.json"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "readJson"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpClientResponse.bodyReader",
									"type": {
										"kind": "type",
										"text": "vibe.stream.stream.InputStream",
										"typeClass": "primitive",
										"nestedName": "InputStream",
										"qualifiedName": "vibe.stream.stream.InputStream",
										"name": "InputStream",
										"moduleName": "vibe.stream.stream",
										"attributes": []
									},
									"name": "bodyReader"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "HttpResponse",
						"typeClass": "primitive",
						"nestedName": "HttpResponse",
						"qualifiedName": "vibe.http.common.HttpResponse",
						"name": "HttpResponse",
						"moduleName": "vibe.http.common",
						"attributes": []
					},
					"nestedName": "HttpClientResponse",
					"name": "HttpClientResponse"
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\n\n\tPerforms a HTTP request on the specified URL.\n\n\tThe 'requester' parameter allows to customize the request and to specify the request body for\n\tnon-GET requests.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "requestHttp",
					"type": {
						"text": "HttpClientResponse(string url, void delegate(HttpClientRequest req) requester = null)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "HttpClientResponse",
							"qualifiedName": "vibe.http.client.HttpClientResponse",
							"name": "HttpClientResponse",
							"moduleName": "vibe.http.client"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "url"
							},
							{
								"defaultValue": "null",
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpClientRequest",
												"qualifiedName": "vibe.http.client.HttpClientRequest",
												"name": "HttpClientRequest",
												"moduleName": "vibe.http.client",
												"attributes": []
											},
											"name": "req"
										}
									],
									"attributes": []
								},
								"name": "requester"
							}
						],
						"attributes": []
					},
					"name": "requestHttp"
				},
				{
					"ddoc": "\n\n\n\tPerforms a HTTP request on the specified URL.\n\n\tThe 'requester' parameter allows to customize the request and to specify the request body for\n\tnon-GET requests.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "requestHttp",
					"type": {
						"text": "HttpClientResponse(Url url, void delegate(HttpClientRequest req) requester = null)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "HttpClientResponse",
							"qualifiedName": "vibe.http.client.HttpClientResponse",
							"name": "HttpClientResponse",
							"moduleName": "vibe.http.client"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "Url",
									"qualifiedName": "vibe.inet.url.Url",
									"name": "Url",
									"moduleName": "vibe.inet.url",
									"attributes": []
								},
								"name": "url"
							},
							{
								"defaultValue": "null",
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpClientRequest",
												"qualifiedName": "vibe.http.client.HttpClientRequest",
												"name": "HttpClientRequest",
												"moduleName": "vibe.http.client",
												"attributes": []
											},
											"name": "req"
										}
									],
									"attributes": []
								},
								"name": "requester"
							}
						],
						"attributes": []
					},
					"name": "requestHttp"
				}
			]
		]
	},
	"name": "vibe.http.client"
},
"vibe.http.common": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\common.d",
	"ddoc": "\n\tCommon classes for HTTP clients and servers.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpVersion.HTTP_1_0",
							"name": "HTTP_1_0"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "HttpVersion.HTTP_1_1",
							"name": "HTTP_1_1"
						}
					],
					"nestedName": "HttpVersion",
					"name": "HttpVersion",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"structs": [
			[
				{
					"ddoc": "\n\tBehaves like string[string] but case does not matter for the key.\n\n\tThis kind of map is used for MIME headers (e.g. for HTTP), where the case of the key strings\n\tdoes not matter.\n\n\tNote that despite case not being relevant for matching keyse, iterating over the map will yield\n\tthe original case of the key that was put in.\n",
					"kind": "struct",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.opApply",
									"type": {
										"text": "int(int delegate(ref string key, ref string val) del)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "key"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "val"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.opApply",
									"type": {
										"text": "int(int delegate(ref string name) del)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "int",
											"qualifiedName": "int",
											"name": "int",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "int",
														"qualifiedName": "int",
														"name": "int",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "string",
																"qualifiedName": "string",
																"name": "string",
																"moduleName": "",
																"attributes": [
																	"ref"
																]
															},
															"name": "name"
														}
													],
													"attributes": []
												},
												"name": "del"
											}
										],
										"attributes": []
									},
									"name": "opApply"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinaryRight(string op) if (op == \"in\")",
									"nestedName": "StrMapCI.opBinaryRight",
									"type": {
										"text": "inout inout(string)*(string key)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "pointer",
											"elementType": {
												"kind": "type",
												"modifiers": [
													"inout"
												],
												"typeClass": "primitive",
												"nestedName": "string",
												"qualifiedName": "string",
												"name": "string",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opBinaryRight"
								}
							],
							[
								{
									"kind": "function",
									"templateName": "opBinaryRight(string op) if (op == \"!in\")",
									"nestedName": "StrMapCI.opBinaryRight",
									"type": {
										"text": "inout bool(string key)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": [
											"inout"
										]
									},
									"name": "opBinaryRight"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.opIndex",
									"type": {
										"text": "string(string key)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "opIndex"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.opIndexAssign",
									"type": {
										"text": "string(string val, string key)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "val"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "opIndexAssign"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "StrMapCI.remove",
									"type": {
										"text": "void(string key)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "key"
											}
										],
										"attributes": []
									},
									"name": "remove"
								}
							]
						]
					},
					"nestedName": "StrMapCI",
					"name": "StrMapCI"
				}
			]
		],
		"classes": [
			[
				{
					"ddoc": "\n\tTakes an input stream that contains data in HTTP chunked format and outputs the raw data.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "ChunkedInputStream.this",
									"type": {
										"text": "ChunkedInputStream(InputStream stream)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ChunkedInputStream",
											"qualifiedName": "vibe.http.common.ChunkedInputStream",
											"name": "ChunkedInputStream",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedInputStream.empty",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "empty"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedInputStream.leastSize",
									"type": {
										"text": "const @property ulong()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ulong",
											"qualifiedName": "ulong",
											"name": "ulong",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "leastSize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedInputStream.read",
									"type": {
										"text": "void(ubyte[] dst)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "dst"
											}
										],
										"attributes": []
									},
									"name": "read"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedInputStream.readAll",
									"type": {
										"text": "ubyte[](uint max_bytes = cast(uint)0)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"defaultValue": "cast(uint",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											}
										],
										"attributes": []
									},
									"name": "readAll"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedInputStream.readLine",
									"type": {
										"text": "ubyte[](uint max_bytes, string line_sep = \"\\x0d\\x0a\")",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "array",
											"elementType": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "ubyte",
												"qualifiedName": "ubyte",
												"name": "ubyte",
												"moduleName": ""
											}
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "uint",
													"qualifiedName": "uint",
													"name": "uint",
													"moduleName": "",
													"attributes": []
												},
												"name": "max_bytes"
											},
											{
												"defaultValue": "\\x0d\\x0a\"",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "line_sep"
											}
										],
										"attributes": []
									},
									"name": "readLine"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "ChunkedInputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "InputStream",
							"typeClass": "primitive",
							"nestedName": "InputStream",
							"qualifiedName": "vibe.stream.stream.InputStream",
							"name": "InputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "ChunkedInputStream"
				}
			],
			[
				{
					"ddoc": "\n\tOutputs data to an output stream in HTTP chunked format.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "ChunkedOutputStream.this",
									"type": {
										"text": "ChunkedOutputStream(OutputStream stream)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "ChunkedOutputStream",
											"qualifiedName": "vibe.http.common.ChunkedOutputStream",
											"name": "ChunkedOutputStream",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "OutputStream",
													"qualifiedName": "vibe.stream.stream.OutputStream",
													"name": "OutputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "stream"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedOutputStream.finalize",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "finalize"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedOutputStream.flush",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "flush"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedOutputStream.write",
									"type": {
										"text": "void(const(ubyte[]) bytes, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"modifiers": [
														"const"
													],
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "ubyte",
														"qualifiedName": "ubyte",
														"name": "ubyte",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "bytes"
											},
											{
												"defaultValue": "true",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "do_flush"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "ChunkedOutputStream.write",
									"type": {
										"text": "void(InputStream data, ulong nbytes = cast(ulong)0, bool do_flush = true)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InputStream",
													"qualifiedName": "vibe.stream.stream.InputStream",
													"name": "InputStream",
													"moduleName": "vibe.stream.stream",
													"attributes": []
												},
												"name": "data"
											},
											{
												"defaultValue": "cast(ulong",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ulong",
													"qualifiedName": "ulong",
													"name": "ulong",
													"moduleName": "",
													"attributes": []
												},
												"name": "nbytes"
											}
										],
										"attributes": []
									},
									"name": "write"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "ChunkedOutputStream",
					"interfaces": [
						{
							"kind": "type",
							"text": "OutputStream",
							"typeClass": "primitive",
							"nestedName": "OutputStream",
							"qualifiedName": "vibe.stream.stream.OutputStream",
							"name": "OutputStream",
							"moduleName": "vibe.stream.stream",
							"attributes": []
						}
					],
					"name": "ChunkedOutputStream"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.domain",
									"type": {
										"text": "@property string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "domain"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.expires",
									"type": {
										"text": "@property string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "expires"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.isHttpOnly",
									"type": {
										"text": "@property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "isHttpOnly"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.isSecure",
									"type": {
										"text": "@property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "isSecure"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.maxAge",
									"type": {
										"text": "@property long()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "long",
											"qualifiedName": "long",
											"name": "long",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "maxAge"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.path",
									"type": {
										"text": "@property string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "path"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setDomain",
									"type": {
										"text": "Cookie(string domain)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "domain"
											}
										],
										"attributes": []
									},
									"name": "setDomain"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setExpire",
									"type": {
										"text": "Cookie(string expires)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "expires"
											}
										],
										"attributes": []
									},
									"name": "setExpire"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setHttpOnly",
									"type": {
										"text": "Cookie(bool enabled)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "enabled"
											}
										],
										"attributes": []
									},
									"name": "setHttpOnly"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setMaxAge",
									"type": {
										"text": "Cookie(long maxAge)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "maxAge"
											}
										],
										"attributes": []
									},
									"name": "setMaxAge"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setPath",
									"type": {
										"text": "Cookie(string path)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											}
										],
										"attributes": []
									},
									"name": "setPath"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setSecure",
									"type": {
										"text": "Cookie(bool enabled)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "bool",
													"qualifiedName": "bool",
													"name": "bool",
													"moduleName": "",
													"attributes": []
												},
												"name": "enabled"
											}
										],
										"attributes": []
									},
									"name": "setSecure"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.setValue",
									"type": {
										"text": "Cookie(string value)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "value"
											}
										],
										"attributes": []
									},
									"name": "setValue"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "Cookie.value",
									"type": {
										"text": "@property string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"@property"
										]
									},
									"name": "value"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Cookie",
					"name": "Cookie"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents an HTTP request made to a server.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "protected",
									"nestedName": "HttpRequest.this",
									"type": {
										"text": "HttpRequest(TcpConnection conn)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpRequest",
											"qualifiedName": "vibe.http.common.HttpRequest",
											"name": "HttpRequest",
											"moduleName": "vibe.http.common"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "TcpConnection",
													"qualifiedName": "vibe.core.tcp.TcpConnection",
													"name": "TcpConnection",
													"moduleName": "vibe.core.tcp",
													"attributes": []
												},
												"name": "conn"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "protected",
									"nestedName": "HttpRequest.this",
									"type": {
										"text": "HttpRequest()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpRequest",
											"qualifiedName": "vibe.http.common.HttpRequest",
											"name": "HttpRequest",
											"moduleName": "vibe.http.common"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpRequest.host",
									"type": {
										"text": "const @property string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "host"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpRequest.host",
									"type": {
										"text": "@property void(string v)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "v"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "host"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpRequest.persistent",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "persistent"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpRequest.headers",
									"type": {
										"kind": "type",
										"text": "StrMapCI",
										"typeClass": "primitive",
										"nestedName": "StrMapCI",
										"qualifiedName": "vibe.http.common.StrMapCI",
										"name": "StrMapCI",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "headers"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpRequest.httpVersion",
									"type": {
										"kind": "type",
										"text": "HttpVersion",
										"typeClass": "primitive",
										"nestedName": "HttpVersion",
										"qualifiedName": "vibe.http.common.HttpVersion",
										"name": "HttpVersion",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "httpVersion"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "protected",
									"nestedName": "HttpRequest.m_conn",
									"type": {
										"kind": "type",
										"text": "vibe.core.tcp.TcpConnection",
										"typeClass": "primitive",
										"nestedName": "TcpConnection",
										"qualifiedName": "vibe.core.tcp.TcpConnection",
										"name": "TcpConnection",
										"moduleName": "vibe.core.tcp",
										"attributes": []
									},
									"name": "m_conn"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpRequest.method",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "method"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpRequest.url",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "url"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpRequest",
					"name": "HttpRequest"
				}
			],
			[
				{
					"ddoc": "\n\tRepresents the HTTP response from the server back to the client.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpResponse.contentType",
									"type": {
										"text": "const @property string()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "contentType"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "HttpResponse.contentType",
									"type": {
										"text": "@property void(string ct)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "ct"
											}
										],
										"attributes": [
											"@property"
										]
									},
									"name": "contentType"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpResponse.cookies",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "Cookie[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Cookie",
											"qualifiedName": "vibe.http.common.Cookie",
											"name": "Cookie",
											"moduleName": "vibe.http.common"
										},
										"attributes": []
									},
									"name": "cookies"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpResponse.headers",
									"type": {
										"kind": "type",
										"text": "StrMapCI",
										"typeClass": "primitive",
										"nestedName": "StrMapCI",
										"qualifiedName": "vibe.http.common.StrMapCI",
										"name": "StrMapCI",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "headers"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpResponse.httpVersion",
									"type": {
										"kind": "type",
										"text": "HttpVersion",
										"typeClass": "primitive",
										"nestedName": "HttpVersion",
										"qualifiedName": "vibe.http.common.HttpVersion",
										"name": "HttpVersion",
										"moduleName": "vibe.http.common",
										"attributes": []
									},
									"name": "httpVersion"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpResponse.statusCode",
									"type": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									},
									"name": "statusCode"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpResponse.statusPhrase",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "statusPhrase"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpResponse",
					"name": "HttpResponse"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MultiPart.contentType",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "contentType"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MultiPart.form",
									"type": {
										"kind": "type",
										"keyType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"text": "string[string]",
										"typeClass": "associative array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "string",
											"qualifiedName": "string",
											"name": "string",
											"moduleName": ""
										},
										"attributes": []
									},
									"name": "form"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "MultiPart.stream",
									"type": {
										"kind": "type",
										"text": "vibe.stream.stream.InputStream",
										"typeClass": "primitive",
										"nestedName": "InputStream",
										"qualifiedName": "vibe.stream.stream.InputStream",
										"name": "InputStream",
										"moduleName": "vibe.stream.stream",
										"attributes": []
									},
									"name": "stream"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MultiPart",
					"name": "MultiPart"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "getHttpVersionString",
					"type": {
						"text": "string(HttpVersion ver)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpVersion",
									"qualifiedName": "vibe.http.common.HttpVersion",
									"name": "HttpVersion",
									"moduleName": "vibe.http.common",
									"attributes": []
								},
								"name": "ver"
							}
						],
						"attributes": []
					},
					"name": "getHttpVersionString"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "parseHttpVersion",
					"type": {
						"text": "HttpVersion(ref string str)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "HttpVersion",
							"qualifiedName": "vibe.http.common.HttpVersion",
							"name": "HttpVersion",
							"moduleName": "vibe.http.common"
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "parseHttpVersion"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "toRFC822DateString",
					"type": {
						"text": "string(SysTime time)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "SysTime",
									"qualifiedName": "SysTime",
									"name": "SysTime",
									"moduleName": "",
									"attributes": []
								},
								"name": "time"
							}
						],
						"attributes": []
					},
					"name": "toRFC822DateString"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "toRFC822DateTimeString",
					"type": {
						"text": "string(SysTime time)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "SysTime",
									"qualifiedName": "SysTime",
									"name": "SysTime",
									"moduleName": "",
									"attributes": []
								},
								"name": "time"
							}
						],
						"attributes": []
					},
					"name": "toRFC822DateTimeString"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "toRFC822TimeString",
					"type": {
						"text": "string(SysTime time)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "SysTime",
									"qualifiedName": "SysTime",
									"name": "SysTime",
									"moduleName": "",
									"attributes": []
								},
								"name": "time"
							}
						],
						"attributes": []
					},
					"name": "toRFC822TimeString"
				}
			]
		]
	},
	"name": "vibe.http.common"
},
"vibe.crypto.md5": {
	"kind": "module",
	"file": "..\\source\\vibe\\crypto\\md5.d",
	"ddoc": "\n\tMD5 hashing functions.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n",
	"members": {
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "md5",
					"type": {
						"text": "string(const(char[]) str)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"modifiers": [
										"const"
									],
									"typeClass": "array",
									"elementType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "char",
										"qualifiedName": "char",
										"name": "char",
										"moduleName": ""
									},
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "md5"
				}
			]
		]
	},
	"name": "vibe.crypto.md5"
},
"vibe.db.mongo.connection": {
	"kind": "module",
	"file": "..\\source\\vibe\\db\\mongo\\connection.d",
	"ddoc": "\n\tLow level mongodb protocol.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "DeleteFlags.None",
							"name": "None"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "DeleteFlags.SingleRemove",
							"name": "SingleRemove"
						}
					],
					"nestedName": "DeleteFlags",
					"name": "DeleteFlags",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "InsertFlags.None",
							"name": "None"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "InsertFlags.ContinueOnError",
							"name": "ContinueOnError"
						}
					],
					"nestedName": "InsertFlags",
					"name": "InsertFlags",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.None",
							"name": "None"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.TailableCursor",
							"name": "TailableCursor"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.SlaveOk",
							"name": "SlaveOk"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.OplogReplay",
							"name": "OplogReplay"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.NoCursorTimeout",
							"name": "NoCursorTimeout"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.AwaitData",
							"name": "AwaitData"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.Exhaust",
							"name": "Exhaust"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "QueryFlags.Partial",
							"name": "Partial"
						}
					],
					"nestedName": "QueryFlags",
					"name": "QueryFlags",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "ReplyFlags.None",
							"name": "None"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "ReplyFlags.CursorNotFound",
							"name": "CursorNotFound"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "ReplyFlags.QueryFailure",
							"name": "QueryFailure"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "ReplyFlags.ShardConfigStale",
							"name": "ShardConfigStale"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "ReplyFlags.AwaitCapable",
							"name": "AwaitCapable"
						}
					],
					"nestedName": "ReplyFlags",
					"name": "ReplyFlags",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			],
			[
				{
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "UpdateFlags.None",
							"name": "None"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "UpdateFlags.Upsert",
							"name": "Upsert"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "UpdateFlags.MultiUpdate",
							"name": "MultiUpdate"
						}
					],
					"nestedName": "UpdateFlags",
					"name": "UpdateFlags",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"classes": [
			[
				{
					"ddoc": "\n\tProvides low-level mongodb protocol access.\n\n\tNote that a MongoConnection my only be used from one fiber/thread at a time.\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "MongoConnection.this",
									"type": {
										"text": "MongoConnection(string server, ushort port = cast(ushort)27017)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "MongoConnection",
											"qualifiedName": "vibe.db.mongo.connection.MongoConnection",
											"name": "MongoConnection",
											"moduleName": "vibe.db.mongo.connection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "server"
											},
											{
												"defaultValue": "cast(ushort",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "ushort",
													"qualifiedName": "ushort",
													"name": "ushort",
													"moduleName": "",
													"attributes": []
												},
												"name": "port"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"functions": [
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.acquire",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "acquire"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.connect",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "connect"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.connected",
									"type": {
										"text": "const @property bool()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "bool",
											"qualifiedName": "bool",
											"name": "bool",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": [
											"const",
											"@property"
										]
									},
									"name": "connected"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.delete_",
									"type": {
										"text": "void(string collection_name, DeleteFlags flags, Bson selector)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "DeleteFlags",
													"qualifiedName": "vibe.db.mongo.connection.DeleteFlags",
													"name": "DeleteFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "selector"
											}
										],
										"attributes": []
									},
									"name": "delete_"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.disconnect",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "disconnect"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.getMore",
									"type": {
										"text": "Reply(string collection_name, int nret, long cursor_id)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Reply",
											"qualifiedName": "vibe.db.mongo.connection.Reply",
											"name": "Reply",
											"moduleName": "vibe.db.mongo.connection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "nret"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "long",
													"qualifiedName": "long",
													"name": "long",
													"moduleName": "",
													"attributes": []
												},
												"name": "cursor_id"
											}
										],
										"attributes": []
									},
									"name": "getMore"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.insert",
									"type": {
										"text": "void(string collection_name, InsertFlags flags, Bson[] documents)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "InsertFlags",
													"qualifiedName": "vibe.db.mongo.connection.InsertFlags",
													"name": "InsertFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "Bson",
														"qualifiedName": "vibe.data.bson.Bson",
														"name": "Bson",
														"moduleName": "vibe.data.bson"
													},
													"attributes": []
												},
												"name": "documents"
											}
										],
										"attributes": []
									},
									"name": "insert"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.killCursors",
									"type": {
										"text": "void(long[] cursors)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "array",
													"elementType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "long",
														"qualifiedName": "long",
														"name": "long",
														"moduleName": ""
													},
													"attributes": []
												},
												"name": "cursors"
											}
										],
										"attributes": []
									},
									"name": "killCursors"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.query",
									"type": {
										"text": "Reply(string collection_name, QueryFlags flags, int nskip, int nret, Bson query, Bson returnFieldSelector = (Bson __ctmp1480;\r\n , __ctmp1480).this(null))",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Reply",
											"qualifiedName": "vibe.db.mongo.connection.Reply",
											"name": "Reply",
											"moduleName": "vibe.db.mongo.connection"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "QueryFlags",
													"qualifiedName": "vibe.db.mongo.connection.QueryFlags",
													"name": "QueryFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "nskip"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "int",
													"qualifiedName": "int",
													"name": "int",
													"moduleName": "",
													"attributes": []
												},
												"name": "nret"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "query"
											},
											{
												"defaultValue": "(Bson__ctmp1480;,__ctmp1480",
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "returnFieldSelector"
											}
										],
										"attributes": []
									},
									"name": "query"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.release",
									"type": {
										"text": "void()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [],
										"attributes": []
									},
									"name": "release"
								}
							],
							[
								{
									"kind": "function",
									"protection": "public",
									"nestedName": "MongoConnection.update",
									"type": {
										"text": "void(string collection_name, UpdateFlags flags, Bson selector, Bson update)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "collection_name"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "UpdateFlags",
													"qualifiedName": "vibe.db.mongo.connection.UpdateFlags",
													"name": "UpdateFlags",
													"moduleName": "vibe.db.mongo.connection",
													"attributes": []
												},
												"name": "flags"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "selector"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "Bson",
													"qualifiedName": "vibe.data.bson.Bson",
													"name": "Bson",
													"moduleName": "vibe.data.bson",
													"attributes": []
												},
												"name": "update"
											}
										],
										"attributes": []
									},
									"name": "update"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "MongoConnection",
					"name": "MongoConnection"
				}
			],
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Reply.cursor",
									"type": {
										"kind": "type",
										"text": "long",
										"typeClass": "primitive",
										"nestedName": "long",
										"qualifiedName": "long",
										"name": "long",
										"moduleName": "",
										"attributes": []
									},
									"name": "cursor"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Reply.documents",
									"type": {
										"kind": "type",
										"text": "Bson[]",
										"typeClass": "array",
										"elementType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "Bson",
											"qualifiedName": "vibe.data.bson.Bson",
											"name": "Bson",
											"moduleName": "vibe.data.bson"
										},
										"attributes": []
									},
									"name": "documents"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Reply.firstDocument",
									"type": {
										"kind": "type",
										"text": "int",
										"typeClass": "primitive",
										"nestedName": "int",
										"qualifiedName": "int",
										"name": "int",
										"moduleName": "",
										"attributes": []
									},
									"name": "firstDocument"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "Reply.flags",
									"type": {
										"kind": "type",
										"text": "ReplyFlags",
										"typeClass": "primitive",
										"nestedName": "ReplyFlags",
										"qualifiedName": "vibe.db.mongo.connection.ReplyFlags",
										"name": "ReplyFlags",
										"moduleName": "vibe.db.mongo.connection",
										"attributes": []
									},
									"name": "flags"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "Reply",
					"name": "Reply"
				}
			]
		]
	},
	"name": "vibe.db.mongo.connection"
},
"vibe.d": {
	"kind": "module",
	"file": "..\\source\\vibe\\d.d",
	"ddoc": "\n\tvibe.d is the default module for vibe.d based applications.\n\n\tApplications that import 'vibe.d' will have most of the vibe API available and will be provided\n\twith an implicit application entry point (main). The resulting application parses command line\n\tparameters and reads the global vibe.d configuration (/etc/vibe/vibe.conf).\n\n\tInitialization is done in module constructors (static this), which run just before the event\n\tloop is started by the application entry point.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
	},
	"name": "vibe.d"
},
"vibe.http.dist": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\dist.d",
	"ddoc": "\n\tInterface for the VibeDist load balancer\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tListens for HTTP connections on the spefified load balancer using the given HTTP server settings.\n\n\tThis function is usable as direct replacement of\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "listenHttpDist",
					"type": {
						"text": "void(HttpServerSettings settings, void delegate(HttpServerRequest req, HttpServerResponse res) handler, string balancer_address, ushort balancer_port = cast(ushort)11000)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpServerSettings",
									"qualifiedName": "vibe.http.server.HttpServerSettings",
									"name": "HttpServerSettings",
									"moduleName": "vibe.http.server",
									"attributes": []
								},
								"name": "settings"
							},
							{
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerRequest",
												"qualifiedName": "vibe.http.server.HttpServerRequest",
												"name": "HttpServerRequest",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "req"
										},
										{
											"type": {
												"kind": "type",
												"typeClass": "primitive",
												"nestedName": "HttpServerResponse",
												"qualifiedName": "vibe.http.server.HttpServerResponse",
												"name": "HttpServerResponse",
												"moduleName": "vibe.http.server",
												"attributes": []
											},
											"name": "res"
										}
									],
									"attributes": []
								},
								"name": "handler"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "balancer_address"
							},
							{
								"defaultValue": "cast(ushort",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "ushort",
									"qualifiedName": "ushort",
									"name": "ushort",
									"moduleName": "",
									"attributes": []
								},
								"name": "balancer_port"
							}
						],
						"attributes": []
					},
					"name": "listenHttpDist"
				}
			]
		]
	},
	"name": "vibe.http.dist"
},
"vibe.core.core": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\core.d",
	"ddoc": "\n\tThis module contains the core functionality of the vibe framework.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"ddoc": "\n\tReturns a task/fiber specific variable.\n",
					"kind": "function",
					"templateName": "getTaskLocal(T)",
					"nestedName": "getTaskLocal",
					"type": {
						"text": "T(string name)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "T",
							"qualifiedName": "T",
							"name": "T",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "name"
							}
						],
						"attributes": []
					},
					"name": "getTaskLocal"
				}
			],
			[
				{
					"ddoc": "\n\tReturns a task/fiber specific variable.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "isTaskLocalSet",
					"type": {
						"text": "bool(string name)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "bool",
							"qualifiedName": "bool",
							"name": "bool",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "name"
							}
						],
						"attributes": []
					},
					"name": "isTaskLocalSet"
				}
			],
			[
				{
					"ddoc": "\n\tRuns a new asynchronous task.\n\n\ttask will be called synchronously from within the vibeRunTask call. It will\n\tcontinue to run until vibeYield() or any of the I/O or wait functions is\n\tcalled.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "runTask",
					"type": {
						"text": "void(void delegate() task)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"typeclass": "delegate",
									"returnType": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "void",
										"qualifiedName": "void",
										"name": "void",
										"moduleName": ""
									},
									"parameters": [],
									"attributes": []
								},
								"name": "task"
							}
						],
						"attributes": []
					},
					"name": "runTask"
				}
			],
			[
				{
					"ddoc": "\n\tSets a variable specific to the calling task/fiber.\n",
					"kind": "function",
					"templateName": "setTaskLocal(T)",
					"nestedName": "setTaskLocal",
					"type": {
						"text": "void(string name, T value)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "name"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "value"
							}
						],
						"attributes": []
					},
					"name": "setTaskLocal"
				}
			],
			[
				{
					"ddoc": "\n\tSuspends the execution of the calling task for the specified amount of time.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "sleep",
					"type": {
						"text": "void(double seconds)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "double",
									"qualifiedName": "double",
									"name": "double",
									"moduleName": "",
									"attributes": []
								},
								"name": "seconds"
							}
						],
						"attributes": []
					},
					"name": "sleep"
				}
			],
			[
				{
					"ddoc": "\n\n\n\tStarts the vibe event loop.\n\n\tNote that this function is usually called automatically by the vibe framework. However, if\n\tyou provide your own main() function, you need to call it manually.\n\n\tThe event loop will continue running during the whole life time of the application.\n\tTasks will be started and handled from within the event loop.\n\n\tThe 'num_worker_threads' parameter allows to specify the number of threads\n\tthat are used to handle incoming connections. Increasing the number of threads\n\tcan be useful for server applications that perform a considerable amount of\n\tCPU work. In this case it is recommended to set the number of worker threads\n\tequal to the number of CPU cores in the system for optimum performance.\n\n\tIn some cases it may be desirable to specify a number that is higher\n\tthan the actual CPU core count to decrease the maximum wait time for lengthy\n\tCPU operations. However, if at all possible, such operations should instead\n\tbe broken up into small chunks with calls to vibeYield() inbetween.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "start",
					"type": {
						"text": "int(int num_worker_threads = 1)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "int",
							"qualifiedName": "int",
							"name": "int",
							"moduleName": ""
						},
						"parameters": [
							{
								"defaultValue": "1",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "int",
									"qualifiedName": "int",
									"name": "int",
									"moduleName": "",
									"attributes": []
								},
								"name": "num_worker_threads"
							}
						],
						"attributes": []
					},
					"name": "start"
				}
			],
			[
				{
					"ddoc": "\n\tSuspends the execution of the calling task to let other tasks and events be\n\thandled.\n\n\tCalling this function in short intervals is recommended if long CPU\n\tcomputations are carried out by a task. It can also be used in conjunction\n\twith Signals to implement cross-fiber events with no polling.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "yield",
					"type": {
						"text": "void()",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [],
						"attributes": []
					},
					"name": "yield"
				}
			]
		],
		"variables": [
			[
				{
					"ddoc": " A version string representing the current vibe version\n",
					"kind": "variable",
					"protection": "public",
					"nestedName": "VibeVersionString",
					"type": {
						"kind": "type",
						"text": "string",
						"typeClass": "primitive",
						"nestedName": "string",
						"qualifiedName": "string",
						"name": "string",
						"moduleName": "",
						"attributes": []
					},
					"name": "VibeVersionString"
				}
			]
		]
	},
	"name": "vibe.core.core"
},
"vibe.http.fileserver": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\fileserver.d",
	"ddoc": "\n\tA static HTTP file server.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"kind": "class",
					"protection": "public",
					"members": {
						"constructors": [
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpFileServerSettings.this",
									"type": {
										"text": "HttpFileServerSettings()",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpFileServerSettings",
											"qualifiedName": "vibe.http.fileserver.HttpFileServerSettings",
											"name": "HttpFileServerSettings",
											"moduleName": "vibe.http.fileserver"
										},
										"parameters": [],
										"attributes": []
									},
									"name": "this"
								}
							],
							[
								{
									"kind": "constructor",
									"protection": "public",
									"nestedName": "HttpFileServerSettings.this",
									"type": {
										"text": "HttpFileServerSettings(string path_prefix)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "HttpFileServerSettings",
											"qualifiedName": "vibe.http.fileserver.HttpFileServerSettings",
											"name": "HttpFileServerSettings",
											"moduleName": "vibe.http.fileserver"
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path_prefix"
											}
										],
										"attributes": []
									},
									"name": "this"
								}
							]
						],
						"variables": [
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpFileServerSettings.maxAge",
									"type": {
										"kind": "type",
										"text": "long",
										"typeClass": "primitive",
										"nestedName": "long",
										"qualifiedName": "long",
										"name": "long",
										"moduleName": "",
										"attributes": []
									},
									"name": "maxAge"
								}
							],
							[
								{
									"kind": "variable",
									"protection": "public",
									"nestedName": "HttpFileServerSettings.serverPathPrefix",
									"type": {
										"kind": "type",
										"text": "string",
										"typeClass": "primitive",
										"nestedName": "string",
										"qualifiedName": "string",
										"name": "string",
										"moduleName": "",
										"attributes": []
									},
									"name": "serverPathPrefix"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "HttpFileServerSettings",
					"name": "HttpFileServerSettings"
				}
			]
		],
		"functions": [
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "serveStaticFiles",
					"type": {
						"text": "void delegate(HttpServerRequest req, HttpServerResponse res)(string local_path, HttpFileServerSettings settings = null)",
						"typeclass": "function",
						"returnType": {
							"typeclass": "delegate",
							"returnType": {
								"kind": "type",
								"typeClass": "primitive",
								"nestedName": "void",
								"qualifiedName": "void",
								"name": "void",
								"moduleName": ""
							},
							"parameters": [
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerRequest",
										"qualifiedName": "vibe.http.server.HttpServerRequest",
										"name": "HttpServerRequest",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "req"
								},
								{
									"type": {
										"kind": "type",
										"typeClass": "primitive",
										"nestedName": "HttpServerResponse",
										"qualifiedName": "vibe.http.server.HttpServerResponse",
										"name": "HttpServerResponse",
										"moduleName": "vibe.http.server",
										"attributes": []
									},
									"name": "res"
								}
							]
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "local_path"
							},
							{
								"defaultValue": "null",
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "HttpFileServerSettings",
									"qualifiedName": "vibe.http.fileserver.HttpFileServerSettings",
									"name": "HttpFileServerSettings",
									"moduleName": "vibe.http.fileserver",
									"attributes": []
								},
								"name": "settings"
							}
						],
						"attributes": []
					},
					"name": "serveStaticFiles"
				}
			]
		]
	},
	"name": "vibe.http.fileserver"
},
"vibe.http.router": {
	"kind": "module",
	"file": "..\\source\\vibe\\http\\router.d",
	"ddoc": "\n\tPattern based URL router.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"classes": [
			[
				{
					"ddoc": "\n\tRoutes HTTP requests based on the request method and URL.\n\n\tRoutes are matched using a special URL match string that supports two forms of placeholders.\n\tThe following example shows how these are used.\n\n\tRegistered routes are matched in the same sequence as initially specified.\n\tMatching ends as soon as a route handler writes a response using res.writeBody()\n\tor similar means. If no route matches or if no route handler writes a response,\n\tthe router will simply not handle the request and the HTTP server may generate\n\ta 404 error.\n\n\t---\n\tvoid addGroup(HttpServerRequest req, HttpServerResponse res)\n\t{\n\t\t// Route variables are accessible via the params map\n\t\tlogInfo(\"Getting group %s for user %s.\", req.params[\"groupname\"], req.params[\"username\"]);\n\t}\n\n\tstatic this()\n\t{\n\t\tauto router = new UrlRouter;\n\t\t// Matches all GET requests for /users/*/groups/* and places\n\t\t// the place holders in req.params as 'username' and 'groupname'.\n\t\trouter.get(\"/users/:username/groups/:groupname\", &addGroup);\n\n\t\t// Natches all requests. This can be useful for authorization and\n\t\t// similar tasks. The auth method will only write a response if the\n\t\t// user is _not_ authorized. Otherwise, the router will fall through\n\t\t// and continue with the following routes.\n\t\trouter.any(\"*\", &auth)\n\n\t\t// Matches a POST request\n\t\trouter.post(\"/users/:username/delete\", &deleteUser)\n\n\t\t// Matches all GET requests in /static/ such as /static/img.png or\n\t\t// /static/styles/sty.css\n\t\trouter.get(\"/static/*\", &serveStaticFiles)\n\n\t\t// Setup a HTTP server...\n\t\tauto settings = new HttpServerSettings;\n\t\t// ...\n\n\t\t// The router can be directly passed to the listenHttp function as\n\t\t// the main request handler.\n\t\tlistenHttp(settings, router);\n\t}\n\t---\n",
					"kind": "class",
					"protection": "public",
					"members": {
						"functions": [
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "UrlRouter.addRoute",
									"type": {
										"text": "void(string method, string path, IHttpServerRequestHandler cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "method"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "addRoute"
								}
							],
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "UrlRouter.addRoute",
									"type": {
										"text": "void(string method, string path, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "method"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											},
											{
												"type": {
													"typeclass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "addRoute"
								}
							],
							[
								{
									"kind": "function",
									"protection": "protected",
									"nestedName": "UrlRouter.addRoute",
									"type": {
										"text": "void(string method, string path, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "method"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "path"
											},
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "addRoute"
								}
							],
							[
								{
									"ddoc": " Adds a new route for requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.any",
									"type": {
										"text": "void(string url_match, IHttpServerRequestHandler cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "any"
								},
								{
									"ddoc": " Adds a new route for requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.any",
									"type": {
										"text": "void(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeclass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "any"
								},
								{
									"ddoc": " Adds a new route for requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.any",
									"type": {
										"text": "void(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "any"
								}
							],
							[
								{
									"ddoc": " Adds a new route for DELETE requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.delete_",
									"type": {
										"text": "void(string url_match, IHttpServerRequestHandler cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "delete_"
								},
								{
									"ddoc": " Adds a new route for DELETE requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.delete_",
									"type": {
										"text": "void(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeclass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "delete_"
								},
								{
									"ddoc": " Adds a new route for DELETE requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.delete_",
									"type": {
										"text": "void(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "delete_"
								}
							],
							[
								{
									"ddoc": " Adds a new route for GET requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.get",
									"type": {
										"text": "void(string url_match, IHttpServerRequestHandler cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "get"
								},
								{
									"ddoc": " Adds a new route for GET requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.get",
									"type": {
										"text": "void(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeclass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "get"
								},
								{
									"ddoc": " Adds a new route for GET requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.get",
									"type": {
										"text": "void(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "get"
								}
							],
							[
								{
									"ddoc": " Handles a HTTP request by dispatching it to the registered route handlers.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.handleRequest",
									"type": {
										"text": "void(HttpServerRequest req, HttpServerResponse res)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerRequest",
													"qualifiedName": "vibe.http.server.HttpServerRequest",
													"name": "HttpServerRequest",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "req"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "HttpServerResponse",
													"qualifiedName": "vibe.http.server.HttpServerResponse",
													"name": "HttpServerResponse",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "res"
											}
										],
										"attributes": []
									},
									"name": "handleRequest"
								}
							],
							[
								{
									"ddoc": " Adds a new route for POST requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.post",
									"type": {
										"text": "void(string url_match, IHttpServerRequestHandler cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "post"
								},
								{
									"ddoc": " Adds a new route for POST requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.post",
									"type": {
										"text": "void(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeclass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "post"
								},
								{
									"ddoc": " Adds a new route for POST requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.post",
									"type": {
										"text": "void(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "post"
								}
							],
							[
								{
									"ddoc": " Adds a new route for PUT requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.put",
									"type": {
										"text": "void(string url_match, IHttpServerRequestHandler cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "IHttpServerRequestHandler",
													"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
													"name": "IHttpServerRequestHandler",
													"moduleName": "vibe.http.server",
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "put"
								},
								{
									"ddoc": " Adds a new route for PUT requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.put",
									"type": {
										"text": "void(string url_match, void function(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeclass": "function",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "put"
								},
								{
									"ddoc": " Adds a new route for PUT requests matching the specified pattern.\n",
									"kind": "function",
									"protection": "public",
									"nestedName": "UrlRouter.put",
									"type": {
										"text": "void(string url_match, void delegate(HttpServerRequest req, HttpServerResponse res) cb)",
										"typeclass": "function",
										"returnType": {
											"kind": "type",
											"typeClass": "primitive",
											"nestedName": "void",
											"qualifiedName": "void",
											"name": "void",
											"moduleName": ""
										},
										"parameters": [
											{
												"type": {
													"kind": "type",
													"typeClass": "primitive",
													"nestedName": "string",
													"qualifiedName": "string",
													"name": "string",
													"moduleName": "",
													"attributes": []
												},
												"name": "url_match"
											},
											{
												"type": {
													"typeclass": "delegate",
													"returnType": {
														"kind": "type",
														"typeClass": "primitive",
														"nestedName": "void",
														"qualifiedName": "void",
														"name": "void",
														"moduleName": ""
													},
													"parameters": [
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerRequest",
																"qualifiedName": "vibe.http.server.HttpServerRequest",
																"name": "HttpServerRequest",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "req"
														},
														{
															"type": {
																"kind": "type",
																"typeClass": "primitive",
																"nestedName": "HttpServerResponse",
																"qualifiedName": "vibe.http.server.HttpServerResponse",
																"name": "HttpServerResponse",
																"moduleName": "vibe.http.server",
																"attributes": []
															},
															"name": "res"
														}
													],
													"attributes": []
												},
												"name": "cb"
											}
										],
										"attributes": []
									},
									"name": "put"
								}
							]
						]
					},
					"base": {
						"kind": "type",
						"text": "Object",
						"typeClass": "primitive",
						"nestedName": "Object",
						"qualifiedName": "Object",
						"name": "Object",
						"moduleName": "",
						"attributes": []
					},
					"nestedName": "UrlRouter",
					"interfaces": [
						{
							"kind": "type",
							"text": "IHttpServerRequestHandler",
							"typeClass": "primitive",
							"nestedName": "IHttpServerRequestHandler",
							"qualifiedName": "vibe.http.server.IHttpServerRequestHandler",
							"name": "IHttpServerRequestHandler",
							"moduleName": "vibe.http.server",
							"attributes": []
						}
					],
					"name": "UrlRouter"
				}
			]
		]
	},
	"name": "vibe.http.router"
},
"vibe.textfilter.urlencode": {
	"kind": "module",
	"file": "..\\source\\vibe\\textfilter\\urlencode.d",
	"ddoc": "\n\tURL-encode implementation\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n",
	"members": {
		"functions": [
			[
				{
					"kind": "function",
					"templateName": "filterUrlDecode(R)",
					"nestedName": "filterUrlDecode",
					"type": {
						"text": "void(ref R dst, string str)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "filterUrlDecode"
				}
			],
			[
				{
					"kind": "function",
					"templateName": "filterUrlEncode(R)",
					"nestedName": "filterUrlEncode",
					"type": {
						"text": "void(ref R dst, string str)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "R",
									"qualifiedName": "R",
									"name": "R",
									"moduleName": "",
									"attributes": [
										"ref"
									]
								},
								"name": "dst"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "filterUrlEncode"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "urlDecode",
					"type": {
						"text": "string(string str)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "urlDecode"
				}
			],
			[
				{
					"kind": "function",
					"protection": "public",
					"nestedName": "urlEncode",
					"type": {
						"text": "string(string str)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "string",
							"qualifiedName": "string",
							"name": "string",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "str"
							}
						],
						"attributes": []
					},
					"name": "urlEncode"
				}
			]
		]
	},
	"name": "vibe.textfilter.urlencode"
},
"vibe.core.log": {
	"kind": "module",
	"file": "..\\source\\vibe\\core\\log.d",
	"ddoc": "\n\tCentral logging facility for vibe.\n\n\tCopyright: © 2012 Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n",
	"members": {
		"enums": [
			[
				{
					"ddoc": " Specifies the log level for a particular log message.\n",
					"kind": "enum",
					"protection": "public",
					"members": [
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Trace",
							"name": "Trace"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Debug",
							"name": "Debug"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Info",
							"name": "Info"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Warn",
							"name": "Warn"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Error",
							"name": "Error"
						},
						{
							"kind": "enum member",
							"protection": "public",
							"nestedName": "LogLevel.Fatal",
							"name": "Fatal"
						}
					],
					"nestedName": "LogLevel",
					"name": "LogLevel",
					"baseType": {
						"kind": "type",
						"text": "int",
						"typeClass": "primitive",
						"nestedName": "int",
						"qualifiedName": "int",
						"name": "int",
						"moduleName": "",
						"attributes": []
					}
				}
			]
		],
		"functions": [
			[
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "logTrace(T...)",
					"nestedName": "logTrace",
					"type": {
						"text": "void(string fmt, T args)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "logTrace"
				},
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "logDebug(T...)",
					"nestedName": "logDebug",
					"type": {
						"text": "void(string fmt, T args)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "logDebug"
				},
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "logInfo(T...)",
					"nestedName": "logInfo",
					"type": {
						"text": "void(string fmt, T args)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "logInfo"
				},
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "logWarn(T...)",
					"nestedName": "logWarn",
					"type": {
						"text": "void(string fmt, T args)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "logWarn"
				},
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "logError(T...)",
					"nestedName": "logError",
					"type": {
						"text": "void(string fmt, T args)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "logError"
				},
				{
					"ddoc": "\n\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n",
					"kind": "function",
					"templateName": "log(T...)",
					"nestedName": "log",
					"type": {
						"text": "void(LogLevel level, string fmt, T args)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "LogLevel",
									"qualifiedName": "vibe.core.log.LogLevel",
									"name": "LogLevel",
									"moduleName": "vibe.core.log",
									"attributes": []
								},
								"name": "level"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "string",
									"qualifiedName": "string",
									"name": "string",
									"moduleName": "",
									"attributes": []
								},
								"name": "fmt"
							},
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "T",
									"qualifiedName": "T",
									"name": "T",
									"moduleName": "",
									"attributes": []
								},
								"name": "args"
							}
						],
						"attributes": []
					},
					"name": "log"
				}
			],
			[
				{
					"ddoc": " Sets the minimum log level to be printed.\n",
					"kind": "function",
					"protection": "public",
					"nestedName": "setLogLevel",
					"type": {
						"text": "void(LogLevel level)",
						"typeclass": "function",
						"returnType": {
							"kind": "type",
							"typeClass": "primitive",
							"nestedName": "void",
							"qualifiedName": "void",
							"name": "void",
							"moduleName": ""
						},
						"parameters": [
							{
								"type": {
									"kind": "type",
									"typeClass": "primitive",
									"nestedName": "LogLevel",
									"qualifiedName": "vibe.core.log.LogLevel",
									"name": "LogLevel",
									"moduleName": "vibe.core.log",
									"attributes": []
								},
								"name": "level"
							}
						],
						"attributes": []
					},
					"name": "setLogLevel"
				}
			]
		]
	},
	"name": "vibe.core.log"
}
}